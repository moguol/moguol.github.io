<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hexo]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2017-05-06T15:08:59.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Kubernetes理论篇]]></title>
    <link href="http://yoursite.com/2017/03/23/kubernetes/"/>
    <id>http://yoursite.com/2017/03/23/kubernetes/</id>
    <published>2017-03-23T04:17:30.000Z</published>
    <updated>2017-05-06T15:08:59.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;《Kubernetes权威指南》的阅读笔记，由于Kubernetes项目还在快速发展中，书里有些内容已有更新的变化，不过核心内容变化不大，书还是值得认真看的。</p>
<h2 id="基本概念"><strong>基本概念</strong></h2><ul>
<li><p><strong>Master</strong><br>  &emsp;Master是整个Kubernetes系统的调度中心，其主要由以下3个重要组件组成(原本为4个组件，但etcd存在单点此处就使用了自建的外部etcd集群):</p>
<ul>
<li><strong>kube-apiserver</strong><br>  &emsp;以RESTful方式提供API给外部调用，将核心对象存储在etcd中并提供增删改查功能。</li>
<li><strong>kube-scheduler</strong><br>  &emsp;负责集群资源调度。监听etcd集群pod目录变化，将新增的pod按照分配算法分配到node节点中，调用kube-apiserver接口将node和pod进行关联。</li>
<li><strong>kube-controller-manager</strong><br>  &emsp;Master的主要功能集中在kube-controller-manager组件上。主要负责执行不同的控制器，主要的控制器有以下几种：<ol>
<li><strong>Endpoint Controller</strong>：维护Service和Pod的关联关系。</li>
<li><strong>Replication Controller</strong>：维护Pod实例的运行个数，确保Pod的运行个数和设置的一致，Pod副本数过多则销毁，过少则增加。</li>
<li><strong>Namespace Controller</strong>：通过调用kube-apiserver提供的接口获取Namespace信息，删除被标记为<code>Terminating</code>的Namespace并删除该Namespace下ServiceAccount、RC、Pod、Secret、ResourceQuota等资源。</li>
<li><strong>ServiceAccount Controller &amp; Token Controller</strong>：主要负责新的Namespace中默认帐号、密钥、证书和Token的管理。</li>
<li><strong>Node Controller</strong>：负责发现、管理和监控Node节点。Node Controller通过定期调用kube-apiserver提供的接口获取Node节点信息(<code>kubelet启动时调用kube-apiserver接口注册Node信息并定时更新Node信息</code>)</li>
<li><strong>ResourceQuota Controller</strong>：负责资源配额控制，确保指定对象使用的系统资源在规定范围内。</li>
<li><strong>Service Controller</strong>：负责监控Service变化，确保外部 LoadBalancer 被更新。</li>
</ol>
</li>
</ul>
</li>
<li><p><strong>Node</strong><br>  &emsp;Node是Kubernetes相对于Master的节点，Node上主要运行着众多Pod(默认Master不运行Pods等)。Node上由2个组件组成：</p>
<ul>
<li><strong>kubelet</strong><br>  &emsp;kubelet主要负责监控和管理Pod(启动/停止)、Volume等，定期调用kube-apiserver接口从etcd获取分配到该Node的Pod信息并启动/停止容器，定期通过kub-apiserver汇报Pod状态。</li>
<li><strong>kube-proxy</strong><br>  &emsp;kube-proxy主要用于Kubernetes的Service。kube-proxy从etcd中获取Service和Endpoints(Pod’s IP+Port)信息，Kubernetes为每个Service分配一个ClusterIP，kube-proxy根据从etcd获取到的信息为每个Service随机监听一个端口，所有到该Service的请求(<code>ClusterIP:Port</code>)会被转发到该kube-proxy的随机端口上(通过iptables的nat实现转发)，再由kube-proxy根据从etcd中获取到的信息转发给Pod(Pod在别的Node就转发到kube-proxy)。</li>
</ul>
</li>
<li><p><strong>Pod</strong><br>  &emsp;Pod是Kubernetes中最小的操作单元，一个Pod中可以有一个或多个容器(Container)(一个Pod中的多个容器应该是紧耦合的)。Pod的生命周期是通过Replication Controller来管理的，Pod被分配到具体的Node上并被创建、启动和销毁(默认Master不运行Pod )。<br>  &emsp;Kubernetes之所以要在容器(Container)之上再封装一层Pod，是因为Docker容器之间通信麻烦和效率不高，所以通过Pod将多个紧耦合的容器(Container)组合起来，每个Pod内都会启动一个<code>google_containers/pause</code>的容器(Container)，然后再启动所需的业务容器，业务容器通过<code>google_containers/pause</code>容器共享网络。<br>  &emsp;同一个Pod内的容器共享以下资源：</p>
<ul>
<li><strong>PID Namespace</strong>：同一个Pod内的应用程序能看到其他应用程序的PID(原本不同容器的PID是相互隔离的)</li>
<li><strong>Network Namespace</strong>：Pod内多个容器能访问同一个IP和端口(原本不同容器网络访问需要通过容器IP+Port方式，共享后同一个Pod内的所有容器都可直接通过localhost相互访问)</li>
<li><strong>IPC Namespace</strong>：Pod内多个容器可使用SystemV IPC或POSIX消息队列通信</li>
<li><strong>UTS Namespace</strong>：Pod内的多个容器共享一个主机名</li>
<li><strong>Volume(共享存储卷)</strong>：Pod内的多个容器可访问Pod级别的Volumes，即多个容器可共享存储空间。</li>
</ul>
</li>
<li><p><strong>Label</strong><br>  &emsp;Label以<code>key/value</code>的形式附加到Pod、Service、RC(ReplicationController)、Node等对象上，定义对象的<strong>可识别属性</strong>，然后通过Label Selector(选择器)对对象进行选择和管理。Replication Controller就是通过Label Selector来选择需要管理的Pod的。<br>  &emsp;Label Selector的定义由多个逗号分隔，如下例子所示：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"label"</span>: &#123;</span><br><span class="line"><span class="string">"key1"</span>: <span class="string">"value1"</span>,</span><br><span class="line"><span class="string">"key2"</span>: <span class="string">"value2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  &emsp;Label Selector有基于等式(Equality-based)和基于集合(Set-based)两种形式。</p>
<ul>
<li>基于等式：name = nginx，选择所有Label中<code>key=name</code>且<code>value=nginx</code>的对象。</li>
<li>基于集合：name in (nginx, tengine)，选择所有Label中<code>key=name</code>且<code>value=nginx</code>或<code>value=tengine</code>的对象。</li>
</ul>
</li>
<li><p><strong>RC(Replication Controller)</strong><br>  &emsp;Replication Controller用于定义Pod副本的数量。Kubernetes通过Replication Controller实现动态伸缩以达到应用集群高可用的目的。<br>  &emsp;Kubernetes可通过<code>kubectl scale</code>实现动态伸缩Pod</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale rc &lt;ReplicationControllerName&gt; --replicas=<span class="number">3</span></span><br></pre></td></tr></table></figure>
<p>  &emsp;<strong>删除RC，通过RC创建的Pods并不会随之跟着删除。</strong></p>
</li>
<li><p><strong>Service</strong><br>  &emsp;Service是一组相同服务Pod集群的对外访问入口，Kubernetes会为Service分配一个<strong>ClusterIP</strong>作为该Service的入口。引入Service是为了外部对后端Pod的变化无感知。<br>  &emsp;Kubernetes会根据Service定义中的Label Selector，将Service和Endpoint对象(Pod的IP:Port)关联起来。查看Endpoint对象：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get endpoints</span><br></pre></td></tr></table></figure>
<p>  &emsp;Kubernetes分配给Service的ClusterIP只能在内部访问，若想Service被外部访问则需要分配一个”公网IP”。暴露Service的方式有三种：</p>
<ul>
<li><strong>NodePort</strong>：这种是最常用的方式，直接在Node机器上监听端口。在定义Service时指定<code>spec.type=NodePort</code>并指定<code>spec.ports.nodePort</code>的值。Kubernetes会在Node上监听<code>spec.ports.nodePort</code>端口提供外部访问。并非一定要要指定<code>spec.ports.nodePort</code>的值，<code>spec.ports.nodePort</code>端口的范围必须在<code>30000</code>~<code>32767</code>内，不指定<code>spec.ports.nodePort</code>则会随机在范围内分配一个IP。</li>
<li><strong>LoadBalancer</strong>：这种是在云服务(GCE/AWS)提供LoadBalancer时可使用，在定义Service时指定<code>spec.type=LoadBalancer</code>并指定Service的<code>nodePort</code>和<code>ClusterIP</code></li>
<li><strong>Ingress</strong>：Ingress是Kubernetes1.2版本后引入的，通过Ingress来利用Nginx/HAProxy等常见开源反向代理软件实现对外暴露服务功能。</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>Volume</strong><br>  &emsp;Volume是Pod中能被多个容器访问的共享目录。Kubernetes的Volume和Docker的Volume差不多，但Kubernetes的Volume是随Pod销毁而销毁的，Pod中的容器停止或重启不影响Kubernetes的Volume。<br>  &emsp;Kubernetes提供多种类型的Volume，如下所示：</p>
<ul>
<li><strong>EmptyDir</strong>：EmptyDir Volume在Pod被分配到Node时创建，Pod内的所有容器都可以读写EmptyDir中的文件。Pod被删除时EmptyDir也会被删除。</li>
<li><p><strong>hostPath</strong>：hostPath Volume是在Pod中挂载宿主机上的文件或目录。常用于需要持久保留的文件。由于Pod可能分配到多个Node上，挂载多个Node的hostPath Volume可能会导致数据的不一致。可在创建RC的时候指定Pod挂载宿主机的目录，比如将宿主机中<code>/data</code>目录挂载到Pod容器内的<code>/data</code>上：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    name: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx</span><br><span class="line">    spec:</span><br><span class="line">      volumes:</span><br><span class="line">        - name: <span class="string">"nginx-log"</span></span><br><span class="line">          hostPath:</span><br><span class="line">            path: <span class="string">"/data"</span></span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: nginx</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: <span class="number">80</span></span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: <span class="string">"nginx-log"</span></span><br><span class="line">              mountPath: <span class="string">"/data"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>gcePersistentDisk</strong>：使用GCE的永久磁盘(Persistent Disk)，当Pod被删除时，这类磁盘只被卸载不会被删除。</p>
</li>
<li><strong>awsElasticBlockStore</strong>：使用AWS的EBS。</li>
<li><strong>nfs</strong>：使用NFS提供的目录挂载到Pod中。</li>
<li><strong>glusterfs</strong>：使用GlusterFS提供的目录挂载到Pod中。</li>
<li><strong>rdb</strong>：使用Linux块设备共享存储挂载到Pod中。</li>
<li><strong>gitRepo</strong>：通过挂载一个空目录，并从GIT库clone一个git repository以供pod使用。</li>
<li><strong>secret</strong>：为Pod提供加密存储，Secret Volume是通过tmpfs实现的，不能持久化。</li>
<li><strong>persistentVolumeClaim</strong>：从PV（persistentVolume）中申请所需的空间，PV通常是种网络存储，如GCEPersistentDisk、AWSElasticBlockStore、NFS、iSCSI等。</li>
</ul>
</li>
<li><p><strong>Namespace</strong><br>  &emsp;Kubernetes的Namespace和Linux系统中的Namespace并非同一个东西，但功能相似都是用于隔离。Kubernetes通过将对象分配到不同的Namespace中以达到分组管理的目的。<br>  &emsp;Kubernetes启动后会创建一个<strong><code>default</code></strong>的Namespace，使用<code>kubeadm</code>部署集群的话会创建<code>kube-system</code>的Namespace。若不知道资源对象的Namespace，则Pod、RC、Service等都会被创建到<code>default</code>的默认Namespace中。可通过以下命令查看Namespace：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get namespace</span><br></pre></td></tr></table></figure>
<p>  &emsp;可通过yaml文件创建Namespace：</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#namespace-test.yaml</span></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Namespace</span><br><span class="line">metadata:</span><br><span class="line">  name: <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create <span class="operator">-f</span> namespace-test.yaml</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Annotation</strong><br>  &emsp;Annotation也是使用<code>key/value</code>形式进行定义，个人理解为相当于备注的作用。</p>
</li>
</ul>
<h4 id="Kubernetes创建Pod流程"><strong>Kubernetes创建Pod流程</strong></h4><ol>
<li>通过<code>kubectl</code>提交一个创建RC请求给<code>kube-apiserver</code>，<code>kube-apiserver</code>将请求存到<code>etcd</code></li>
<li><code>kube-controller-manager</code>通过调用<code>kube-apiserver</code>接口得知创建RC事件，分析后发现集群中没有该RC对应的Pod，根据RC定义中的Pod模板生成Pod对象并调用<code>kube-apiserver</code>接口存入<code>etcd</code>。</li>
<li><code>kube-scheduler</code>监听etcd发现有创建Pod事件，<code>kube-scheduler</code>根据算法得出Pod被分配到哪个Node，调用<code>kube-apiserver</code>将结果存入<code>etcd</code>。</li>
<li>目标Node上的<code>kubectl</code>通过调用<code>kube-apiserver</code>得知需要创建Pod并按照相关定义创建Pod及容器。该Node的<code>kubectl</code>对Pod进行监控和管理并定期调用<code>kube-apiserver</code>接口上报Pod的状态。</li>
</ol>
<h4 id="Kubernetes创建Service流程"><strong>Kubernetes创建Service流程</strong></h4><ol>
<li>通过<code>kubectl</code>提交创建Service请求给<code>kube-apiserver</code>，<code>kube-apiserver</code>将请求存到<code>etcd</code></li>
<li><code>kube-controller-manager</code>调用<code>kube-apiserver</code>接口得知创建Service事件，通过<code>Label</code>查询到与Service相关的Pod，生成Service的Endpoint信息并调用<code>kube-apiserver</code>接口存入<code>etcd</code>。</li>
<li>Node上的<code>kube-proxy</code>调用<code>kube-apiserver</code>接口查询到Service和对应Endpoint信息，在Node上监听随机端口，配置iptables将所有到Service的ClusterIP:Port的请求都转发到<code>kube-proxy</code>监听的随机端口上，<code>kube-proxy</code>将请求转发到Pod上。</li>
</ol>
<h2 id="Kubernetes核心原理"><strong>Kubernetes核心原理</strong></h2><h3 id="kube-apiserver"><strong>kube-apiserver</strong></h3><p>&emsp;&emsp;kube-apiserver默认会监听两个端口，一个是非安全用于接受HTTP请求的<code>8080</code>端口，另一个是安全的HTTPS端口<code>6443</code>用于认证等安全机制请求，kube-apiserver主要功能：</p>
<ul>
<li>提供集群管理API接口</li>
<li>集群各功能模块间数据交互和通信的中枢</li>
<li>提供安全机制</li>
</ul>
<p>&emsp;&emsp;Kubernetes提供<code>kubectl</code>命令行工具将API功能封装成简单的命令集。更多具体功能使用<code>kubectl -h</code>获取。<br>&emsp;&emsp;kube-apiserver提供API接口访问Pod、Node和Service等，详细的API接口没去研究。<br>&emsp;&emsp;Kubernetes中基本上都是通过调用kube-apiserver提供的接口完成集群中模块间信息的交换的。比如Node上的<code>kubectl</code>会定期调用API报告节点状态并存入etcd中，Node Controller通过调用API获取到节点相关信息并作出相应操作。为了缓解kube-apiserver的压力各功能模块会定时调用API获取信息并保持到本地缓存，使得某些情况下模块不需要直接调用API而通过访问缓存数据间接调用API。</p>
<h3 id="kube-controller-manager原理"><strong>kube-controller-manager原理</strong></h3><p>&emsp;&emsp;<code>kube-controller-manager</code>作为Kubernetes集群的管理控制中心，对集群内的Node、Pod副本、Endpoint、Namespace、ServiceAccount和ResourceQuota等资源进行管理及执行自动修复流程。如上所说，<code>kube-controller-manager</code>是由多个Controller组成，对各个Controller进行较深入了解。</p>
<h4 id="Replication_Controller"><strong>Replication Controller</strong></h4><p>&emsp;&emsp;Replication Controller的主要功能是确保Pod的副本数目和RC定义中的一致。正常来说，都是通过RC来创建Pod的，所以Replication Controller的管理对象是Pod。Pod的状态值如下：</p>
<ul>
<li><strong>pending</strong>：API Server已创建Pod，但Pod内有一个或多个容器没创建</li>
<li><strong>running</strong>：Pod内所有容器已创建，且至少有一个容器正常运行</li>
<li><strong>successded</strong>：Pod内所有容器均停止成功且不会再重启</li>
<li><strong>failed</strong>：Pod内所有容器已退出，且至少一个发生错误退出</li>
</ul>
<p>&emsp;&emsp;Pod的重启策略有三种<code>Always</code>、<code>OnFailure</code>和<code>Never</code>，只有是<code>Always</code>时，Replication  Controller才会管理该Pod。当Pod副本状态为<code>failed</code>或被删除且<code>RestartPolicy=Always</code>时，Replication Controller会重新创建该Pod的副本。</p>
<p>&emsp;&emsp;通过具体的RC实例来说明Replication Controller是如何创建Pod的。创建一个Nginx的RC实例，启动2个Pod：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: ReplicationController</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx</span><br><span class="line">spec:</span><br><span class="line">  replicas: <span class="number">2</span></span><br><span class="line">  selector:</span><br><span class="line">    name: nginx</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        name: nginx</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: nginx</span><br><span class="line">          image: nginx</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports:</span><br><span class="line">            - containerPort: <span class="number">80</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>kind: ReplicationController</code>：指明这是个ReplicationController</li>
<li><code>spec.replicas</code>：指明该RC的Pod副本数目</li>
<li><code>spec.selector</code>：指明该RC关联的Pod</li>
<li><code>spec.template</code>：RC创建的Pod实例都是根据RC定义中的创建。</li>
<li><code>spec.template.spec.containers</code>：指明Pod中容器的属性(该使用什么镜像、端口等)</li>
</ul>
<p>&emsp;&emsp;需要注意到是，删除RC并不会影响其所已经创建的Pod。Pod可以通过修改其Label实现脱离RC的管控(RC是通过<code>spec.selector</code>中的<code>name</code>来关联Pod的)。<br>&emsp;&emsp;Replication Controller主要就是根据RC定义中的<code>spec.replicas</code>值来调整Pod的副本数目，以确保集群中有且仅有<code>spec.replicas</code>个Pod实例。<br>&emsp;&emsp;Replication Controller的常用模式如下：</p>
<ul>
<li><strong>Rescheduling</strong>：重新调度，即在Pod副本实例发生异常时重新创建Pod副本实例。</li>
<li><p><strong>Scaling</strong>：手动或自动扩容/缩容。可通过<code>kubectl scale</code>命令实现</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl scale rc &lt;ReplicationControllerName&gt; --replicas=&lt;NUM&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Rolling Updates</strong>：滚动更新，ReplicationController通过逐个对Pod进行更新来实现滚动升级。一般是重新创建一个RC，然后新RC中的Pod数目不断增加，旧RC中Pod数目不断减少直至<code>0</code>。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl rolling-update &lt;OLD_RC_NAME&gt; --update-period=<span class="number">10</span>s <span class="operator">-f</span> &lt;NEW_RC&gt;.yaml</span><br></pre></td></tr></table></figure>
<p>  &emsp;Kubernetes1.2版本后推荐使用<strong>Deployment</strong>来进行Rolling Updates。新的Deployment会创建<strong>ReplicaSet</strong>，关于这个内容改天专门来写。</p>
</li>
</ul>
<h4 id="Node_Controller"><strong>Node Controller</strong></h4><p>&emsp;&emsp;Node Controller主要负责发现、管理和监控Node。<code>kubectl</code>启动时调用API注册Node并定时调用API上报Node信息，<code>kube-apiserver</code>将Node信息存入etcd。Node信息包括：Node健康状态、节点资源、节点名称、节点地址信息、OS版本、Docker版本和kubelet版本。<br>&emsp;&emsp;Node健康状态分为：<code>True</code>(就绪)、<code>False</code>(未就绪)和<code>Unknown</code>(未知)<br>&emsp;&emsp;Node Controller会定期调用API接口获取Node信息。如果<code>kube-controller-manager</code>启动时没有指定<code>CIDR</code>则为每个Node生产<code>CIDR</code>并设置Node的<code>spec.PodCIDR</code>属性；逐个读取Node信息并和Node Controller中<code>nodeStatusMap</code>中保存的信息做对比，若无变化则更新探测时间，有变化则更新<code>nodeStatusMap</code>中的信息。若规定时间内没收到Node信息则将状态设置为<code>Unknown</code>并调用API存入etcd。再逐个读取Node信息，将非<code>True</code>状态Node加入待删队列，若发现该Node故障则删除etcd中Node信息及相关资源信息。</p>
<h4 id="ResourceQuota_Controller"><strong>ResourceQuota Controller</strong></h4><p>&emsp;&emsp;ResourceQuota Controller是对Kubernetes集群进行资源配额管理的，支持三个层次的资源配额管理：</p>
<ul>
<li>容器级别：对容器CPU和Memory进行限制</li>
<li>Pod级别：对Pod内所有容器进行资源限制</li>
<li>Namespace级别：Namespace级别的限制包括以下方面：<ul>
<li>Pod数量</li>
<li>RC数量</li>
<li>Service数量</li>
<li>ResourceQuota数量</li>
<li>Secret数量</li>
<li>PV(persistentVolume)数量</li>
</ul>
</li>
</ul>
<p>&emsp;&emsp;Kubernetes中配额管理是通过<strong>准入机制(admission control)</strong>实现的，配额的准入控制器有<strong>LimitRanger</strong>和<strong>ResourceQuota</strong>，LimitRanger作用于Pod和Container，ResourceQuota作用于Namespace。<br>&emsp;&emsp;ResourceQuota Controller以Namespace作为分组统计单元，调用API定时从etcd中获取每个Namespace中的ResourceQuota信息，计算Pod、RC、Service等资源对象和Container实例使用的资源(CPU/Memory)并调用API存入etcd。用户请求创建资源时，kube-apiserver调用admission controller的ResourceQuota插件从etcd中配额信息，若某项资源超过配额则该请求被拒绝。</p>
<h4 id="Namespace_Controller"><strong>Namespace Controller</strong></h4><p>&emsp;&emsp;Namespace Controller主要就是用来管理Namespace的。当Namespace被标记为<strong>优雅删除</strong>(即设置了<code>DeletionTimestamp</code>删除期限)，则该Namespace状态被设置为<code>Terminating</code>。Namespace Controller会删除该Namespace下的所有资源，然后执行<code>finalize</code>操作(删除<code>spec.finalizers</code>信息)。当Namespace Controller发现一个Namespace设置了<code>DeletionTimestamp</code>且<code>spec.finalizers</code>值为空则调用API删除Namespace。</p>
<h4 id="Service_Controller_&amp;_Endpoint_Controller"><strong>Service Controller &amp; Endpoint Controller</strong></h4><p>&emsp;&emsp;当调用API创建Service时，Kubernetes会为该Service指派一个集群内网IP<code>ClusterIP</code>，Service中的<code>spec.selector</code>指明该Service和<code>name: nginx</code>的Pod关联，每个Pod的<code>80</code>端口都被映射到本地节点的<code>80</code>端口(<code>targetPort</code>)。创建Service时指定了<code>spec.selector</code>的话，Kubernetes会创建一个和Service<strong>同名的</strong>Endpoint对象。该Endpoint对象其实就是和Service关联的Pod的IP+Port。<br>&emsp;&emsp;也可创建没<code>spec.selector</code>的Service，Kubernetes便不会自动创建与之相关的Endpoint，可手动创建和Service同名的Endpoint指定后端Pod。<br>&emsp;创建Nginx的Service实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-service</span><br><span class="line">  labels:</span><br><span class="line">    name: nginx-service</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: <span class="number">80</span></span><br><span class="line">      targetPort: <span class="number">80</span></span><br><span class="line">      protocol: TCP</span><br><span class="line">  selector:</span><br><span class="line">    name: nginx</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;Service是Kubernetes中的对象，请求从Service到Pod的工作是由<code>kube-proxy</code>来完成的。<code>kube-proxy</code>为每个Service在本机上随机监听一个端口，通过添加iptables规则将访问Service的请求转发到<code>kube-proxy</code>的随机端口，然后<code>kube-proxy</code>根据<code>Round Robin</code>算法及Session保持(<code>SessionAffinity</code>)决定将请求转发到后端的哪个Pod。<br>&emsp;&emsp;Kubernetes支持两种模式找到Service：</p>
<ul>
<li>Container的Service环境变量<br>  在创建Pod时，在所有Pod中的Container中加入一系列的Service环境变量，如<code>{SVCNAME}_SERVICE_HOST</code>/<code>{SVCNAME}_SERVICE_PORT</code>等，<code>{SVCNAME}</code>是大写的Service Name，若有<code>-</code>则自动转换为<code>_</code>。</li>
<li>DNS<br>  DNS服务器通过调用API监控Service相关活动，新增Service时创建一系列DNS记录。<br>  更为常用的是DNS SVC被命名端口的记录，若<code>service_name.namespace_name</code>的Service有名为”http”的端口，则可用<code>_http._tcp.service_name.namespace_name</code>通过DNS服务器找到对于的Pod暴露端口。</li>
</ul>
<p>&emsp;&emsp;对于Service的暴露，如前面所说常用三种方式：<strong>LoadBalancer</strong>、<strong>NodePort</strong>和<strong>Ingress</strong>。详细参照前面。<br>&emsp;&emsp;Service Controller和Endpoint Controller分别监控Service和Endpoint对象，调用API更新变更再存入etcd中。</p>
<h4 id="kube-scheduler"><strong>kube-scheduler</strong></h4><p>&emsp;&emsp;<code>kube-scheduler</code>主要负责Pod的调度，将待调度的Pod按照特定的调度算法和调度策略绑定到合适的Node上并将信息存入etcd。Node上的<code>kubelet</code>监听到<code>kube-scheduler</code>产生的Pod绑定事件后，获取对应的Pod清单、下载image镜像并启动Container容器。<br>&emsp;&emsp;<code>kube-scheduler</code>默认调度流程分两步，Kubernetes提供一系列的预选策略和优选策略，此处不一一具体分析：</p>
<ul>
<li>预选策略：遍历所有Node，筛选符合条件的Node。</li>
<li>优选策略：基于预选策略，采用优选策略计算积分，最终选出最佳Node。</li>
</ul>
<h4 id="kubelet"><strong>kubelet</strong></h4><p>&emsp;&emsp;Kubernetes会在每个Node节点中运行<code>kubelet</code>，<code>kubelet</code>主要负责以下功能：</p>
<ul>
<li>Node管理<br>  <code>kubelet</code>在启动时会调用API以注册Node信息(可手动设置不进行自动注册)，并定期调用API将信息存入etcd。</li>
<li>Pod管理<br>  <code>kubelet</code>通常通过以下3种获取Node上的Pod清单：<ul>
<li>文件：在启动<code>kubelet</code>时指定，<code>--pod-manifest-path=/etc/kubernetes/manifests</code>。</li>
<li>HTTP URL：指定<code>--manifest-url</code>。</li>
<li>API Server：调用API监听etcd目录同步Pod清单。<br>前两种非API Server方式创建的Pod称之为<strong>Static Pod</strong>，<code>kubelet</code>会将Static Pod汇报给API Server，API Server会为Static Pod创建Mirror Pod与其匹配。<br><code>kubelet</code>通过API Server方式创建或修改Pod大致流程如下：</li>
</ul>
<ol>
<li>创建Pod的数据目录</li>
<li>调用API获取Pod清单</li>
<li>挂载外部卷(Extenal Volume)到Pod</li>
<li>下载Pod所需的Secret</li>
<li>检查Node运行中的Pod，若Pod中无容器或<code>Pause</code>容器没启动，则先停止Pod内所有容器，若有要删除的容器则删除</li>
<li>为每个Pod创建<code>Pause</code>容器，Pod中的其他容器通过<code>Pause</code>容器共享网络</li>
<li>为Pod中的每个容器做如下处理：为容器计算hash值，用容器名去Docker查询对应容器的hash值，若hash值不同则停止容器。若设置了<code>restartPolicy</code>则按照策略处理，无则调用Docker client下载镜像并运行容器。</li>
</ol>
</li>
<li><p>健康检查<br>  Pod通过两种探针检查容器健康状态：</p>
<ul>
<li><p><strong>LivenessProbe</strong>：用于判断容器是否健康。若不健康，<code>kubelet</code>则删除容器并按照<code>restartPolicy</code>策略处理。LivenessProbe检查可分成三种实现方式，<code>LivenessProbe</code>的定义在Pod的<strong><code>spec.containers</code></strong>中：</p>
<ol>
<li><p><strong>ExecAction</strong>：容器内执行一条命令，退出码为<code>0</code>则健康</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: nginx</span><br><span class="line">      image: nginx</span><br><span class="line">      imagePullPolicy: IfNotPresent</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">      livenessProbe:</span><br><span class="line">        <span class="built_in">exec</span>:</span><br><span class="line">          <span class="built_in">command</span>:</span><br><span class="line">          - cat</span><br><span class="line">          - /tmp/healthy</span><br><span class="line">        initialDelaySeconds: <span class="number">5</span></span><br><span class="line">        periodSeconds: <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>TCPSocketAction</strong>：对容器内端口做TCP检测，端口能被访问则健康</p>
</li>
<li><strong>HTTPGetAction</strong>：对容器特点的端口+路径调用<code>GET</code>方法，HTTP响应状态码在<code>200</code>~<code>400</code>之间为健康 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">    - name: nginx</span><br><span class="line">      image: nginx</span><br><span class="line">      imagePullPolicy: IfNotPresent</span><br><span class="line">      ports:</span><br><span class="line">        - containerPort: <span class="number">80</span></span><br><span class="line">      livenessProbe:</span><br><span class="line">        httpGet:</span><br><span class="line">          path: /heath_pah</span><br><span class="line">          port: <span class="number">80</span></span><br><span class="line">          httpHeaders:</span><br><span class="line">            - name: X-Custom-Header</span><br><span class="line">              value: Awesome</span><br><span class="line">        initialDelaySeconds: <span class="number">5</span></span><br><span class="line">        periodSeconds: <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>ReadinessProbe</strong>：用于判断容器是否启动完成且准备接受请求。若ReadinessProbe检查失败，Endpoint Controller会删除Service中该Pod的Endpoint信息。</p>
</li>
</ul>
</li>
</ul>
<h4 id="网络原理"><strong>网络原理</strong></h4><ul>
<li><p><strong>Kubernetes网络模型</strong><br>  &emsp;&emsp;Kubernetes使用的网络模型称为<strong>IP-per-Pod</strong>模型，每个Pod拥有单独的IP地址，IP是以Pod为单位分配的。一个Pod内的所有容器共享网络(使用同一个Network Namespace通过Pause容器实现)，IP和端口在Pod内部和外部都是一致的(不需要NAT)。<br>  &emsp;&emsp;Kubernetes设计之初是运行在谷歌的GCE环境上的，GCE默认就支持Kubernetes的网络。但要在非GCE环境运行Kubernetes则需要先搭建出符合Kubernetes网络要求的环境，目前开源的方案有很多诸如Flannel、Weave等用于实现Kubernetes中容器与容器之间网络的环境。<br>  &emsp;&emsp;Kubernetes主要针对一下几种网络场景制定不同的解决方案：</p>
<ul>
<li>容器间通信<br>  这里的容器间通信特指在同一个Pod内的容器间通信，正如前面所说，同一个Pod内的容器是通过Pause容器共享同一个Network Namespace的，同一个Pod内的容器甚至可以通过<code>localhost</code>直接访问彼此的端口，这就使得同一个Pod内容器间的通信变得简单高效。</li>
<li><p>Pod间通信</p>
<ul>
<li>同一Node中Pod间通信<br>  由于同一个Node中的不同Pod都是通过<code>veth</code>连接到同一个<code>docker0</code>网桥上，Pod的IP地址和<code>docker0</code>的IP地址在同一个网段内，所有同一个Node上的不同Pod都由<code>docker0</code>网桥进行中转，可直接通信。</li>
<li><p>不同Node中Pod间通信<br>  由于Pod的IP是隐藏在<code>docker0</code>网桥后的，出了<code>docker0</code>后不同Node之间的Pod是无法感知到对方，所以需要有完善的网络方案使得Pod之间能使用私有IP进行通信、集群内Pod的IP分配不会冲突、Pod的IP和Node的IP关联(Pod通信时需要先找到Node)。为此有了多个不同的开源网络组件：</p>
<ul>
<li><p>Flannel<br>  Flannel会创建<code>flannel0</code>网桥，一端连接<code>docker0</code>，另一端连接<code>flanneld</code>服务进程。<code>flanneld</code>服务进程利用<code>etcd</code>来管理分配IP并监听<code>etcd</code>中每个Pod的IP，创建Pod节点路由表。<code>flanneld</code>服务进程根据Pod节点路由表将从<code>docker0</code>发来的数据包进行封装通过物理网络传输到目的<code>flanneld</code>上，以此完成不同Node上的Pod通信。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">containerA--&gt;docker0--&gt;flannel0--&gt;flanneld--&gt;NodeA--&gt;[Network]--&gt;NodeB--&gt;flanneld--&gt;flannel0--&gt;docker0--&gt;containerB</span><br></pre></td></tr></table></figure>
</li>
<li><p>Open vSwitch<br>  Open vSwitch是一个开源虚拟交换机软件，该项目较成熟但比较复杂，一般最求高性能网络的话网上都比较推荐此方案，由于比较复杂我也没怎么研究。</p>
</li>
<li>直接路由<br>  简单来说，直接路由就是让集群能够通过<code>docker0</code>直接通信，让每个Node的路由表有到所有<code>docker0</code>的路由，将<code>docker0</code>和Node的<code>eth0</code>关联起来。简单的可手动在所有Node上添加到集群内所有<code>docker0</code>地址的路由，但更实际的方案是结合动态路由协议来做。</li>
</ul>
</li>
</ul>
</li>
<li>Pod和Service间通信<br>  正如前面所说，Pod和Service间的通信是通过<code>kube-proxy</code>实现的，<code>kube-proxy</code>为Service随机监听一个端口并添加iptables规则将到Service的请求转发到<code>kube-proxy</code>，再由<code>kube-proxy</code>根据Endpoint信息转发到后端的Pod。<br>  值得一提的是如果Service定义中指定了Session保持，则<code>kube-proxy</code>会查看是否存在改IP的<code>affinityState</code>对象，存在则转到改对象对应的Pod。</li>
<li>外部到内部访问<br>  同样如前面所说，外部访问内部目前主要有3种方式：NodePort、LoadBalancer和Ingress。接下来重点讲一下<strong>Ingress</strong>。<br>  Ingress是利用Nginx/HAProxy等反向代理软件来暴露服务，从而实现外部到内部的访问，Ingress可根据URL(<code>/serviceA</code>)、域名来进行暴露Service。<br>  Ingress在Kubernetes中也是一个对象资源，Kubernetes使用<strong>Ingress Controller</strong>来对控制管理Ingress资源，Ingress Controller主要与Kubernetes API交互，负责感知规则变化，然后生成配置文件，最后reload Pod中的Nginx。Ingress Controller不像其他Controller一样包含在<code>kube-controller-manager</code>里，需要选择适合的Ingress Controller并运行。</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;《Kubernetes权威指南》的阅读笔记，由于Kubernetes项目还在快速发展中，书里有些内容已有更新的变化，不过核心内容变化不大，书还是值得认真看的。</p>
<h2 id="基本概念"><strong>基本概念</strong></h2><]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ELK+Kafka+Search-Guard+Sentinl全攻略]]></title>
    <link href="http://yoursite.com/2017/02/28/ELK-full/"/>
    <id>http://yoursite.com/2017/02/28/ELK-full/</id>
    <published>2017-02-28T08:29:11.000Z</published>
    <updated>2017-03-05T05:58:08.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;&emsp;ELK(Elasticsearch/Logstash/Kibana)是目前对日志采集分析比较适合的解决方案；Kafka是一个分布式高可用高吞吐的消息队列软件，在日志量大及对数据可靠性要求高的场景使用；Search-Guard是一款开源的、对Elasticsearch提供安全及权限控制功能的插件；Sentinl是一款类似Watch的Kibana插件，提供监控、报警和报告功能。<br>&emsp;&emsp;这整个系统为日志的采集、存储、查询、图表分析和监控报警提供一套完整的解决方案。</p>
<h2 id="软件版本列表"><strong>软件版本列表</strong></h2><ul>
<li>CentOS 6.8 64bit</li>
<li>JDK1.8.0_51</li>
<li><a href="https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/tar/elasticsearch/2.4.4/elasticsearch-2.4.4.tar.gz" target="_blank" rel="external">Elasticsearch-2.4.4</a></li>
<li><a href="https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-5.2.0-x86_64.rpm" target="_blank" rel="external">Filebeat-5.2.0</a></li>
<li><a href="https://download.elastic.co/logstash/logstash/logstash-2.4.1.tar.gz" target="_blank" rel="external">Logstash-2.4.1</a></li>
<li><a href="https://download.elastic.co/kibana/kibana/kibana-4.6.4-linux-x86_64.tar.gz" target="_blank" rel="external">Kibana-4.6.4</a></li>
<li><a href="http://apache.communilink.net/kafka/0.10.0.0/kafka_2.11-0.10.0.0.tgz" target="_blank" rel="external">Kafka_2.11-0.10.0.0</a></li>
<li>Search-Guard-SSL/2.4.4.19</li>
<li>Search-Guard-2/2.4.4.10</li>
<li>Sentinl</li>
</ul>
<h2 id="Kafka"><strong>Kafka</strong></h2><h3 id="安装"><strong>安装</strong></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf kafka_2<span class="number">.11</span>-<span class="number">0.10</span><span class="number">.0</span><span class="number">.0</span>.tgz</span><br><span class="line">mv kafka_2<span class="number">.11</span>-<span class="number">0.10</span><span class="number">.0</span><span class="number">.0</span> <span class="regexp">/usr/</span>local/kafka</span><br><span class="line">mkdir <span class="regexp">/data/</span>zookeeper</span><br><span class="line">chown -R <span class="string">osadmin:</span>osadmin <span class="regexp">/data/</span>zookeeper</span><br></pre></td></tr></table></figure>
<h3 id="配置"><strong>配置</strong></h3><h4 id="zookeeper配置"><strong>zookeeper配置</strong></h4><ul>
<li><p><strong>/usr/local/kafka/config/zookeeper.properties</strong></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tickTime=<span class="number">2000</span></span><br><span class="line">initLimit=<span class="number">10</span></span><br><span class="line">syncLimit=<span class="number">5</span></span><br><span class="line">dataDir=/data/zookeeper</span><br><span class="line">clientPort=<span class="number">2181</span></span><br><span class="line">server.<span class="number">0</span>=<span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line">server.<span class="number">1</span>=<span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>设置集群节点myid<br>  &emsp;根据配置文件中<strong><code>server.X</code></strong>设置集群节点的<code>myid</code></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> X &gt; /data/zookeeper/myid</span><br></pre></td></tr></table></figure>
</li>
<li><p>zookeeper调整JVM内存大小<br>  &emsp;zookeeper默认的JVM堆内存大小为<code>512M</code>，可视具体情况调整<br>  &emsp;<strong>/usr/local/kafka/bin/zookeeper-server-start.sh</strong></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">"-Xmx512M -Xms512M"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动zookeeper<br>  &emsp;手动启动zookeeper(更好的方式是使用<strong>Supervisord</strong>来管理)</p>
  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="regexp">/usr/</span>local<span class="regexp">/kafka/</span>bin<span class="regexp">/zookeeper-server-start.sh /u</span>sr<span class="regexp">/local/</span>kafka<span class="regexp">/config/</span>zookeeper.properties &amp;&gt; <span class="regexp">/usr/</span>local<span class="regexp">/kafka/</span>logs<span class="regexp">/zookeeper.log &amp;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Kafka配置"><strong>Kafka配置</strong></h4><ul>
<li><p><strong>/usr/local/kafka/config/server.properties</strong></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#id唯一</span></span><br><span class="line">broker.id=<span class="number">0</span></span><br><span class="line">port=<span class="number">9092</span></span><br><span class="line">advertised.host.name=<span class="number">10.201</span>.<span class="number">3.33</span></span><br><span class="line"><span class="comment">#host.name唯一</span></span><br><span class="line">host.name=<span class="number">10.201</span>.<span class="number">3.33</span></span><br><span class="line">num.network.threads=<span class="number">3</span></span><br><span class="line">num.io.threads=<span class="number">8</span></span><br><span class="line">socket.send.buffer.bytes=<span class="number">102400</span></span><br><span class="line">socket.receive.buffer.bytes=<span class="number">102400</span></span><br><span class="line">socket.request.max.bytes=<span class="number">104857600</span></span><br><span class="line">log.dirs=/usr/<span class="built_in">local</span>/kafka/logs</span><br><span class="line">num.partitions=<span class="number">5</span></span><br><span class="line">num.recovery.threads.per.data.dir=<span class="number">1</span></span><br><span class="line">log.retention.hours=<span class="number">72</span></span><br><span class="line">log.segment.bytes=<span class="number">1073741824</span></span><br><span class="line">log.retention.check.interval.ms=<span class="number">300000</span></span><br><span class="line">zookeeper.connect=<span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">2181</span>,<span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">2181</span></span><br><span class="line">zookeeper.connection.timeout.ms=<span class="number">6000</span></span><br><span class="line">delete.topic.enable=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Kafka配置集群注意事项</strong></p>
<ol>
<li>echo X &gt; /data/zookeeper/myid</li>
<li>/usr/local/kafka/config/server.properties<ul>
<li>broker.id</li>
<li>host.name</li>
</ul>
</li>
</ol>
</li>
<li><p>Kafka调优项</p>
<ul>
<li><p>调整JVM内存大小<br>  &emsp;Kafka默认的JVM堆内存大小为<code>1G</code>，如果需要承载较大日志量可视具体情况调整JVM堆内存大小，建议JVM堆的内存大小最好不要超过<strong>4G</strong>。<br>  &emsp;<strong>/usr/local/kafka/bin/kafka-server-start.sh</strong></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> KAFKA_HEAP_OPTS=<span class="string">"-Xmx3G -Xms3G"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>线程数调整<br>  &emsp;在需要处理大量日志的场景时可调整<code>num.network.threads</code>和<code>num.io.threads</code></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num.network.threads=nproc</span><br><span class="line">num.io.threads=<span class="number">2</span>*nproc</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>启动Kafka<br>  &emsp;手动启动kafka(更好的方式是使用<strong>Supervisord</strong>来管理)</p>
  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="regexp">/usr/</span>local<span class="regexp">/kafka/</span>bin<span class="regexp">/kafka-server-start.sh /u</span>sr<span class="regexp">/local/</span>kafka<span class="regexp">/config/</span>server.properties &amp;&gt; <span class="regexp">/usr/</span>local<span class="regexp">/kafka/</span>logs<span class="regexp">/kafka.log &amp;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="kafka常用操作"><strong>kafka常用操作</strong></h4><ul>
<li><p>创建topic</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/kafka/bin/kafka-topics.sh --create --zookeeper <span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">2181</span>,<span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">2181</span> --replication-factor <span class="number">2</span> --partitions <span class="number">2</span> --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看topic</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出所有topic</span></span><br><span class="line">/usr/<span class="built_in">local</span>/kafka/bin/kafka-topics.sh --list --zookeeper <span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">2181</span>,<span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">2181</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看具体topic</span></span><br><span class="line">/usr/<span class="built_in">local</span>/kafka/bin/kafka-topics.sh --describe --zookeeper <span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">2181</span>,<span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">2181</span> --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>删除topic</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/kafka/bin/kafka-topics.sh --delete --zookeeper <span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">2181</span>,<span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">2181</span> --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看logstash消费Kafka队列情况</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出所有consumer group</span></span><br><span class="line">/usr/<span class="built_in">local</span>/kafka/bin/kafka-consumer-groups.sh --zookeeper <span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">2181</span>,<span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">2181</span> --list</span><br><span class="line"><span class="comment">#默认所有logstash消费者在logstash的group中</span></span><br><span class="line">/usr/<span class="built_in">local</span>/kafka/bin/kafka-consumer-groups.sh --zookeeper <span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">2181</span>,<span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">2181</span> --describe --group logstash</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态增加Kafka partition<br>  &emsp;将<code>test</code>topic的partition<strong>增加到</strong><code>12</code>个</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/kafka/bin/kafka-topics.sh --zookeeper <span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">2181</span>,<span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">2181</span> --alter --topic <span class="built_in">test</span> --partitions <span class="number">12</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="测试Kafka"><strong>测试Kafka</strong></h4><ul>
<li><p>生产消息</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/kafka/bin/kafka-console-producer.sh --broker-list <span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">9092</span>,<span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">9092</span> --topic <span class="built_in">test</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>消费消息</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/kafka/bin/kafka-console-consumer.sh --zookeeper  <span class="number">10.201</span>.<span class="number">3.30</span>:<span class="number">2181</span>,<span class="number">10.201</span>.<span class="number">3.33</span>:<span class="number">2181</span> --topic <span class="built_in">test</span> --from-beginning</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Elasticsearch"><strong>Elasticsearch</strong></h2><h3 id="安装-1"><strong>安装</strong></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf elasticsearch-<span class="number">2.4</span><span class="number">.4</span>.tar.gz</span><br><span class="line">mv elasticsearch-<span class="number">2.4</span><span class="number">.4</span> <span class="regexp">/usr/</span>local/elasticsearch</span><br><span class="line">mkdir <span class="regexp">/usr/</span>local<span class="regexp">/elasticsearch/</span>&#123;logs,plugins&#125; /data</span><br><span class="line">chown -R <span class="string">osadmin:</span>osadmin <span class="regexp">/usr/</span>local<span class="regexp">/elasticsearch/</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-1"><strong>配置</strong></h3><h4 id="文件打开数配置"><strong>文件打开数配置</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n <span class="number">655350</span></span><br></pre></td></tr></table></figure>
<p>&emsp;<strong>/etc/security/limits.conf</strong><br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>soft nofile 655350</span><br><span class="line"><span class="bullet">* </span>hard nofile 655350</span><br><span class="line">osadmin soft memlock unlimited</span><br><span class="line">osadmin hard memlock unlimited</span><br></pre></td></tr></table></figure></p>
<h4 id="ES集群配置"><strong>ES集群配置</strong></h4><p>&emsp;<strong>/usr/local/elasticsearch/config/elasticsearch.yml</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">path.data: /data</span><br><span class="line">path.logs: /usr/<span class="built_in">local</span>/elasticsearch/logs</span><br><span class="line">path.plugins: /usr/<span class="built_in">local</span>/elasticsearch/plugins</span><br><span class="line">network.host: <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">http.port: <span class="number">9200</span></span><br><span class="line">bootstrap.mlockall: <span class="literal">true</span></span><br><span class="line">indices.fielddata.cache.size: <span class="number">75</span>%</span><br><span class="line">indices.breaker.fielddata.limit: <span class="number">85</span>%</span><br><span class="line">threadpool.search.queue_size: <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Cluster</span></span><br><span class="line">cluster.name: elk-cluster</span><br><span class="line">node.name: <span class="string">"10.201.3.49"</span></span><br><span class="line">node.master: <span class="literal">true</span></span><br><span class="line">node.data: <span class="literal">true</span></span><br><span class="line">discovery.zen.ping.multicast.enabled: <span class="literal">true</span></span><br><span class="line">discovery.zen.ping.unicast.hosts: [<span class="string">"10.201.3.49"</span>, <span class="string">"10.201.3.33"</span>, <span class="string">"10.201.3.30"</span>]</span><br><span class="line"><span class="comment">#cluster.routing.allocation.disk.threshold_enabled: false</span></span><br><span class="line"><span class="comment">#cluster.routing.allocation.disk.watermark.low: 90%</span></span><br><span class="line"><span class="comment">#cluster.routing.allocation.disk.watermark.high: 95%</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>path.data</code>：索引数据的存储路径</li>
<li><code>path.logs</code>：日志文件的存储路径</li>
<li><code>path.plugins</code>：插件安装路径</li>
<li><code>network.host</code>：监听IP</li>
<li><code>http.port</code>：监听端口</li>
<li><code>bootstrap.mlockall</code>：锁内存，使ES不使用swap</li>
<li><code>indices.fielddata.cache.size</code>：节点用于 fielddata 的最大内存(达到阀值旧数据将被交换出内存)</li>
<li><code>indices.breaker.fielddata.limit</code>：JVM 堆内存大小(确保 indices.breaker.fielddata.limit 的值大于 indices.fielddata.cache.size 的值)</li>
<li><p><code>threadpool.search.queue_size</code>：ES搜索队列大小(kibana查询量大时需要增大此值)</p>
</li>
<li><p><code>cluster.name</code>：集群名称(<code>cluster.name</code>相同的节点将自动组成一个集群)</p>
</li>
<li><code>node.name</code>：集群节点名称</li>
<li><code>node.master</code>：允许节点成为主节点</li>
<li><code>node.data</code>：允许节点存储数据</li>
<li><code>discovery.zen.ping.multicast.enabled</code>：允许组播发现节点</li>
<li><code>discovery.zen.ping.unicast.hosts</code>：集群初始节点列表(加速发现节点)</li>
</ul>
<h4 id="ES内存设置"><strong>ES内存设置</strong></h4><p><strong>/usr/local/elasticsearch/bin/elasticsearch.in.sh</strong><br>&emsp;内存充足情况尽量分配多内存给Elasticsearch，一般认为64bit机器最大分配内存不超过<strong>32G</strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">ES_MIN_MEM=<span class="value"><span class="number">10</span>g</span></span></span><br><span class="line"><span class="setting">ES_MAX_MEM=<span class="value"><span class="number">10</span>g</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="Elasticsearch插件安装"><strong>Elasticsearch插件安装</strong></h3><ul>
<li><p><strong>head</strong></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local/elasticsearch</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/elasticsearch/</span>bin<span class="regexp">/plugin install mobz/</span>elasticsearch-head</span><br><span class="line"></span><br><span class="line">#访问head插件</span><br><span class="line"><span class="string">http:</span><span class="comment">//10.201.3.49:9200/_plugin/head</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>kopf</strong></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/usr/</span>local/elasticsearch</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/elasticsearch/</span>bin<span class="regexp">/plugin install lmenezes/</span>elasticsearch-kopf/<span class="number">2.1</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">#访问kopf插件</span><br><span class="line"><span class="string">http:</span><span class="comment">//10.201.3.49:9200/_plugin/kopf</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>curator</strong><br>  &emsp;&emsp;<strong>curator</strong>用于管理Elasticsearch索引</p>
<ul>
<li><p>安装</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install elasticsearch-curator==<span class="number">3.5</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看索引</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看前缀sd-3-centos33-nginx且旧于30天的索引</span></span><br><span class="line">curator --timeout <span class="number">36000</span> --host localhost show indices --older-than <span class="number">30</span> --time-unit days --timestring <span class="string">'%Y.%m.%d'</span> --prefix sd-<span class="number">3</span>-centos33-nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭索引</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭前缀sd-3-centos33-nginx且旧于30天的索引</span></span><br><span class="line">curator --timeout <span class="number">36000</span> --host localhost close indices --older-than <span class="number">30</span> --time-unit days --timestring <span class="string">'%Y.%m.%d'</span> --prefix sd-<span class="number">3</span>-centos33-nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除索引</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除前缀sd-3-centos33-nginx-的所有索引</span></span><br><span class="line">curator --timeout <span class="number">36000</span> --host localhost delete indices --time-unit days --timestring %Y.%m.%d --prefix sd-<span class="number">3</span>-centos33-nginx-</span><br></pre></td></tr></table></figure>
</li>
<li><p>配合search-guard执行方式<br>  &emsp;使用search-guard后所有对Elasticsearch的连接都强制使用HTTPS方式</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curator --http_auth &lt;user&gt;:&lt;password&gt; --use_ssl --timeout <span class="number">36000</span> --ssl-no-validate --host localhost show indices --time-unit days --timestring <span class="string">'%Y.%m.%d'</span> --prefix <span class="built_in">test</span>-nginx</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Search-Guard"><strong>Search-Guard</strong></h2><p>&emsp;&emsp;Elasticsearch自身并没有认证和权限控制功能，导致安全性问题十分严重。Elasticsearch2.x的shield插件、Elasticsearch5.x的x-pack插件弥补了这个安全问题，但这两个插件都是需要付费才能长期使用的，<strong>search-guard</strong>是开源免费并能提供权限控制的插件。使用search-guard最好JDK的版本在<strong><code>1.8</code></strong>以上。</p>
<ul>
<li><a href="https://github.com/floragunncom/search-guard" target="_blank" rel="external">search-guard项目地址</a></li>
<li><a href="https://github.com/floragunncom/search-guard-docs" target="_blank" rel="external">search-guard官方文档</a></li>
</ul>
<h3 id="search-guard-ssl"><strong>search-guard-ssl</strong></h3><p>&emsp;&emsp;search-guard2.x版本需要依赖search-guard-ssl，search-guard-ssl需要使用<strong><code>openssl 1.0.1k</code></strong>以上版本。</p>
<h4 id="更新openssl"><strong>更新openssl</strong></h4><p>&emsp;&emsp;只需要要在使用search-guard-ssl生成证书的机器上更新openssl即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">wget http://www.openssl.org/<span class="built_in">source</span>/openssl-<span class="number">1.0</span>.<span class="number">1</span>k.tar.gz</span><br><span class="line">tar -zxf openssl-<span class="number">1.0</span>.<span class="number">1</span>k.tar.gz &amp;&amp; <span class="built_in">cd</span> openssl-<span class="number">1.0</span>.<span class="number">1</span>k</span><br><span class="line">./config shared zlib</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">mv /usr/bin/openssl /usr/bin/openssl.old &amp;&amp; mv /usr/include/openssl /usr/include/openssl.old</span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/ssl/bin/openssl /usr/bin/openssl</span><br><span class="line">ln <span class="operator">-s</span> /usr/<span class="built_in">local</span>/ssl/include/openssl /usr/include/openssl</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/usr/local/ssl/lib"</span> &gt;&gt; /etc/ld.so.conf</span><br><span class="line">ldconfig -v</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看openssl版本</span></span><br><span class="line">openssl version</span><br></pre></td></tr></table></figure></p>
<h4 id="安装search-guard-ssl"><strong>安装search-guard-ssl</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch</span><br><span class="line">bin/plugin install -b com.floragunn/search-guard-ssl/<span class="number">2.4</span>.<span class="number">4.19</span></span><br></pre></td></tr></table></figure>
<h4 id="制作HTTPS证书"><strong>制作HTTPS证书</strong></h4><p>&emsp;&emsp;search-guard强制只能使用HTTPS方式访问Elasticsearch，所以需要使用search-guard-ssl制作HTTPS的相关证书。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/floragunncom/search-guard-ssl.git</span><br><span class="line"><span class="built_in">cd</span> search-guard-ssl/example-pki-scripts/</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>制作HTTPS证书脚本<br>  &emsp;&emsp;search-guard-ssl提供制作证书相关的脚本</p>
<ul>
<li>gen_client_node_cert.sh<br>  制作客户端证书</li>
<li>gen_node_cert.sh<br>  创建节点证书</li>
<li>gen_root_ca.sh<br>  创建根证书</li>
</ul>
</li>
<li><p>修改证书信息<br>  &emsp;&emsp;根据自身情况修改<code>gen_client_node_cert.sh</code>、<code>gen_node_cert.sh</code>证书相关的<strong>dname</strong>信息(不修改<code>dname</code>相关信息也无碍)</p>
<ul>
<li><strong><code>CN</code></strong>: 公用名称</li>
<li><strong><code>OU</code></strong>: 组织单位名称</li>
<li><strong><code>O</code></strong>: 组织名称</li>
<li><strong><code>L</code></strong>: 城市名称</li>
<li><strong><code>S</code></strong>: 省份名称</li>
<li><p><strong><code>C</code></strong>: 国家名称</p>
</li>
<li><p>gen_client_node_cert.sh</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-dname <span class="string">"CN=<span class="variable">$CLIENT_NAME</span>, OU=client, O=client, L=SZ, C=CN"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>gen_node_cert.sh</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-dname <span class="string">"CN=<span class="variable">$NODE_NAME</span>, OU=test, O=test, L=SZ, C=CN"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>修改example.sh脚本相关密码<br>  &emsp;&emsp;<code>example.sh</code>是search-guard-ssl提供的样例脚本，把<strong><code>CA</code></strong>、<strong><code>TrustStore</code></strong>和<strong><code>KeyStore</code></strong>改成自己设置的密码</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> <span class="operator">-e</span></span><br><span class="line">./clean.sh</span><br><span class="line">./gen_root_ca.sh &lt;your_CA_password&gt; &lt;your_TrustStore_password&gt;</span><br><span class="line">./gen_node_cert.sh &lt;your_node_name&gt; &lt;your_KeyStore_password&gt; &lt;your_CA_password&gt;</span><br><span class="line">./gen_client_node_cert.sh admin &lt;your_KeyStore_password&gt; &lt;your_CA_password&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>拷贝证书<br>  &emsp;&emsp;将生成的证书拷贝到<strong>所有</strong>节点相应的目录下。search-guard官方推荐每个ES节点的节点证书不同，这里所有节点都是使用的同一个节点证书。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp truststore.jks node-&lt;your_node_name&gt;-keystore.jks /usr/<span class="built_in">local</span>/elasticsearch/config/</span><br><span class="line">cp truststore.jks admin-keystore.jks /usr/<span class="built_in">local</span>/elasticsearch/plugins/search-guard-<span class="number">2</span>/sgconfig/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="安装search-guard"><strong>安装search-guard</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch</span><br><span class="line">bin/plugin install -b com.floragunn/search-guard-<span class="number">2</span>/<span class="number">2.4</span>.<span class="number">4.10</span></span><br></pre></td></tr></table></figure>
<h3 id="配置search-guard"><strong>配置search-guard</strong></h3><p>&emsp;&emsp;search-guard需要在Elasticsearch配置文件<strong>/usr/local/elasticsearch/config/elasticsearch.yml</strong>中新增配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#search-guard</span></span><br><span class="line">searchguard.authcz.admin_dn:</span><br><span class="line">  - CN=admin,OU=client, O=client, L=SZ, C=CN</span><br><span class="line"></span><br><span class="line"><span class="comment">#search-guard ssl</span></span><br><span class="line">searchguard.ssl.transport.keystore_filepath: node-&lt;your_node_name&gt;-keystore.jks</span><br><span class="line">searchguard.ssl.transport.keystore_password: your_KeyStore_password</span><br><span class="line">searchguard.ssl.transport.truststore_filepath: truststore.jks</span><br><span class="line">searchguard.ssl.transport.truststore_password: your_TrustStore_password</span><br><span class="line">searchguard.ssl.transport.enforce_hostname_verification: <span class="literal">false</span></span><br><span class="line"><span class="comment">#search-guard https</span></span><br><span class="line">searchguard.ssl.http.enabled: <span class="literal">true</span></span><br><span class="line">searchguard.ssl.http.keystore_filepath: node-&lt;your_node_name&gt;-keystore.jks</span><br><span class="line">searchguard.ssl.http.keystore_password: your_KeyStore_password</span><br><span class="line">searchguard.ssl.http.truststore_filepath: truststore.jks</span><br><span class="line">searchguard.ssl.http.truststore_password: your_TrustStore_password</span><br></pre></td></tr></table></figure></p>
<h3 id="search-guard权限设置"><strong>search-guard权限设置</strong></h3><p>&emsp;&emsp;search-guard的权限配置文件都在<strong><code>/usr/local/elasticsearch/plugins/search-guard-2/sgconfig</code></strong>目录下</p>
<ul>
<li><strong>sg_config.yml</strong><br>  主配置文件，定义认证类型等。一般不需要改动</li>
<li><strong>sg_internal_users.yml</strong><br>  本地用户文件，定义用户密码以及对应的权限(密码生成脚本：plugins/search-guard-2/tools/hash.sh)</li>
<li><strong>sg_roles_mapping.yml</strong><br>  定义角色(<code>sg_roles.yml</code>)和用户(<code>sg_internal_users.yml</code>)的映射关系</li>
<li><strong>sg_roles.yml</strong><br>  角色权限配置文件</li>
<li><strong>sg_action_groups.yml</strong><br>  定义权限别名，把多个单独的权限整合并配置别名，简化配置</li>
</ul>
<h4 id="创建用户及设置密码——sg_internal_users-yml"><strong>创建用户及设置密码——sg_internal_users.yml</strong></h4><p>&emsp;&emsp;创建具体的用户和密码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#管理员权限帐号</span></span><br><span class="line">admin:</span><br><span class="line">  <span class="built_in">hash</span>: <span class="variable">$2a</span><span class="variable">$12</span><span class="variable">$rVW6Elg3PUBTJIAXRZ881</span>.kWfG4OL/vTwX0ksJ8uUUGEC763J08SK</span><br><span class="line"></span><br><span class="line"><span class="comment">#kibana server帐号</span></span><br><span class="line"><span class="comment">#用于在kibana.yml中配置，该帐号用于创建和管理.kibana索引</span></span><br><span class="line">kibana_server:</span><br><span class="line">  <span class="built_in">hash</span>: <span class="variable">$2a</span><span class="variable">$12</span><span class="variable">$QrVeCyf7JFwq</span>/<span class="number">2.2</span>BjLP0O0g8C1hlHunoyxWFe57nlbJGHI/A/Wda</span><br><span class="line"></span><br><span class="line"><span class="comment">#kibana 登录帐号</span></span><br><span class="line">kibana_admin:</span><br><span class="line">  <span class="built_in">hash</span>: <span class="variable">$2a</span><span class="variable">$12</span>$.vAGeZm8FdFMIeDz8DlWqeWCO/Uiy12v6xJEbpGnhahSfSuPwbYOy</span><br><span class="line"></span><br><span class="line"><span class="comment">#logstash帐号</span></span><br><span class="line"><span class="comment">#用于在logstash中配置，允许logstash往Elasticsearch中写入数据</span></span><br><span class="line">logstash:</span><br><span class="line">  <span class="built_in">hash</span>: <span class="variable">$2a</span><span class="variable">$12</span><span class="variable">$zbVAUMH5thQvnCDKNfMLv</span>.QDsdFYdoiK3V70.tkC8tMVF8EvP0nf2</span><br></pre></td></tr></table></figure></p>
<h4 id="定义角色与用户映射关系——sg_roles_mapping-yml"><strong>定义角色与用户映射关系——sg_roles_mapping.yml</strong></h4><p>&emsp;&emsp;search-guard中的角色其实相当于用户组的概念，对角色(用户组)进行权限控制，用户加入角色(用户组)中，以此来管理权限。<br>&emsp;&emsp;用<code>sg_admin</code>角色(用户组)为例，<code>sg_admin</code>为管理员角色(用户组)，该角色(用户组)下有名为<code>admin</code>的用户。所以<code>admin</code>用户就拥有了管理员角色(组)的权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#管理员角色</span></span><br><span class="line">sg_admin:</span><br><span class="line">  users:</span><br><span class="line">    - admin</span><br><span class="line"></span><br><span class="line"><span class="comment">#kibana server帐号</span></span><br><span class="line">sg_kibana_server:</span><br><span class="line">  users:</span><br><span class="line">    - kibana_server</span><br><span class="line"></span><br><span class="line"><span class="comment">#kibana 登录帐号</span></span><br><span class="line">sg_kibana_admin:</span><br><span class="line">  users:</span><br><span class="line">    - kibana_admin</span><br><span class="line"></span><br><span class="line"><span class="comment">#logstash帐号</span></span><br><span class="line">sg_logstash:</span><br><span class="line">  users:</span><br><span class="line">    - logstash</span><br></pre></td></tr></table></figure></p>
<h4 id="定义角色(用户组)权限——sg_roles-yml"><strong>定义角色(用户组)权限——sg_roles.yml</strong></h4><p>&emsp;&emsp;定义不同角色(用户组)的角色有不同的权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#管理员角色</span></span><br><span class="line"><span class="comment">#拥有所有权限</span></span><br><span class="line">sg_admin:</span><br><span class="line">  cluster:</span><br><span class="line">    - <span class="string">'*'</span></span><br><span class="line">  indices:</span><br><span class="line">    <span class="string">'*'</span>:</span><br><span class="line">      <span class="string">'*'</span>:</span><br><span class="line">        - <span class="string">'*'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#kibana server角色</span></span><br><span class="line"><span class="comment">#对.kibana索引有所有权限，并且对集群有获取节点信息和健康状态的权限</span></span><br><span class="line">sg_kibana_server:</span><br><span class="line">  cluster:</span><br><span class="line">    - cluster:monitor/nodes/info</span><br><span class="line">    - cluster:monitor/health</span><br><span class="line">  indices:</span><br><span class="line">    <span class="string">'?kibana'</span>:</span><br><span class="line">      <span class="string">'*'</span>:</span><br><span class="line">        - ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">#kibana登录角色</span></span><br><span class="line">sg_kibana_admin:</span><br><span class="line">  indices:</span><br><span class="line">    <span class="string">'_all'</span>:</span><br><span class="line">      <span class="string">'*'</span>:</span><br><span class="line">        - indices:data/<span class="built_in">read</span>/mget*</span><br><span class="line">        - indices:data/<span class="built_in">read</span>/get*</span><br><span class="line">        - indices:data/<span class="built_in">read</span>/search*</span><br><span class="line">        - indices:data/<span class="built_in">read</span>/msearch*</span><br><span class="line">    <span class="string">'logstash-*'</span>:</span><br><span class="line">      <span class="string">'*'</span>:</span><br><span class="line">        - ALL</span><br><span class="line">    <span class="string">'?kibana'</span>:</span><br><span class="line">      <span class="string">'*'</span>:</span><br><span class="line">        - ALL</span><br><span class="line"></span><br><span class="line"><span class="comment">#logstash角色</span></span><br><span class="line"><span class="comment">#对Elasticsearch有创建索引和写入的权限</span></span><br><span class="line">sg_logstash:</span><br><span class="line">  cluster:</span><br><span class="line">    - indices:admin/template/get</span><br><span class="line">    - indices:admin/template/put</span><br><span class="line">  indices:</span><br><span class="line">    <span class="string">'*'</span>:</span><br><span class="line">      <span class="string">'*'</span>:</span><br><span class="line">        - WRITE</span><br><span class="line">        - CREATE_INDEX</span><br><span class="line">        - indices:data/<span class="built_in">read</span>/search</span><br><span class="line">        - indices:data/<span class="built_in">read</span>/scroll</span><br></pre></td></tr></table></figure></p>
<h4 id="定制权限别名——sg_action_groups-yml"><strong>定制权限别名——sg_action_groups.yml</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ALL:</span><br><span class="line">  - <span class="string">"indices:*"</span></span><br><span class="line">CREATE_INDEX:</span><br><span class="line">  - <span class="string">"indices:admin/create"</span></span><br><span class="line">WRITE:</span><br><span class="line">  - <span class="string">"indices:data/write*"</span></span><br><span class="line">READ:</span><br><span class="line">  - <span class="string">"indices:data/read*"</span></span><br><span class="line">DELETE:</span><br><span class="line">  - <span class="string">"indices:data/write/delete*"</span></span><br><span class="line">CRUD:</span><br><span class="line">  - READ</span><br><span class="line">  - WRITE</span><br></pre></td></tr></table></figure>
<h3 id="启动Elasticsearch集群"><strong>启动Elasticsearch集群</strong></h3><p>&emsp;&emsp;将证书都拷贝到集群所有节点，ES配置文件都新增相关配置后就可启动集群<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch/bin/elasticsearch <span class="operator">-d</span></span><br></pre></td></tr></table></figure></p>
<h3 id="search-guard初始化"><strong>search-guard初始化</strong></h3><p>&emsp;&emsp;Elasticsearch所有节点启动完成后需要对search-guard进行初始化，生成<code>searchguard</code>索引。search-guard根据权限配置文件将数据写入到<code>searchguard</code>索引中，当权限设置变更时，只需要重新初始化<code>searchguard</code>索引即可，不需要重启集群。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch/</span><br><span class="line">plugins/search-guard-<span class="number">2</span>/tools/sgadmin.sh -cd plugins/search-guard-<span class="number">2</span>/sgconfig/ -ks plugins/search-guard-<span class="number">2</span>/sgconfig/admin-keystore.jks -ts plugins/search-guard-<span class="number">2</span>/sgconfig/truststore.jks -tspass &lt;your_TrustStore_password&gt; -kspass &lt;your_KeyStore_password&gt; -icl -nhnv</span><br></pre></td></tr></table></figure></p>
<h4 id="设置searchguard索引自动分片"><strong>设置searchguard索引自动分片</strong></h4><p>&emsp;&emsp;初始化后生成的<code>searchguard</code>索引是不会随着集群节点增加而自动增加分片的，需要设置<code>searchguard</code>索引成自动分片。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elasticsearch/</span><br><span class="line">plugins/search-guard-<span class="number">2</span>/tools/sgadmin.sh -cd plugins/search-guard-<span class="number">2</span>/sgconfig/ -ks plugins/search-guard-<span class="number">2</span>/sgconfig/admin-keystore.jks -ts plugins/search-guard-<span class="number">2</span>/sgconfig/truststore.jks -tspass &lt;your_TrustStore_password&gt; -kspass &lt;your_KeyStore_password&gt; -icl -era</span><br></pre></td></tr></table></figure></p>
<h2 id="Kibana"><strong>Kibana</strong></h2><h3 id="安装-2"><strong>安装</strong></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf kibana-<span class="number">4.6</span><span class="number">.4</span>-linux-x86_64.tar.gz</span><br><span class="line">mv kibana-<span class="number">4.6</span><span class="number">.4</span>-linux-x86_64 <span class="regexp">/usr/</span>local/kibana</span><br><span class="line">useradd kibana</span><br><span class="line">chown -R <span class="string">kibana:</span>kibana <span class="regexp">/usr/</span>local<span class="regexp">/kibana/</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-2"><strong>配置</strong></h3><p><strong>/usr/local/kibana/config/kibana.yml</strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server<span class="class">.port</span>: <span class="number">5601</span></span><br><span class="line">server<span class="class">.host</span>: <span class="string">"0.0.0.0"</span></span><br><span class="line">elasticsearch<span class="class">.url</span>: <span class="string">"https://localhost:9200"</span></span><br><span class="line">kibana<span class="class">.index</span>: <span class="string">".kibana"</span></span><br><span class="line">elasticsearch<span class="class">.username</span>: <span class="string">"kibana_server"</span></span><br><span class="line">elasticsearch<span class="class">.password</span>: <span class="string">"kibana"</span></span><br><span class="line">elasticsearch<span class="class">.ssl</span><span class="class">.ca</span>: /usr/local/kibana/root-ca.pem</span><br></pre></td></tr></table></figure></p>
<h3 id="访问"><strong>访问</strong></h3><p><a href="http://kibana_server_ip:5601" target="_blank" rel="external">http://kibana_server_ip:5601</a><br>输入不同用户及密码会根据用户做权限的控制</p>
<h2 id="Logstash"><strong>Logstash</strong></h2><h3 id="安装-3"><strong>安装</strong></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf logstash-<span class="number">2.4</span><span class="number">.1</span>.tar.gz</span><br><span class="line">mv logstash-<span class="number">2.4</span><span class="number">.1</span> <span class="regexp">/usr/</span>local/logstash</span><br><span class="line">chown -R <span class="string">osadmin:</span>osadmin <span class="regexp">/usr/</span>local<span class="regexp">/logstash/</span></span><br><span class="line">mkdir <span class="regexp">/usr/</span>local<span class="regexp">/logstash/</span>config</span><br></pre></td></tr></table></figure>
<h3 id="配置-3"><strong>配置</strong></h3><p>Logstash使用<strong>grok正则表达式</strong>对日志进行匹配并json化后存入Elasticsearch<br><a href="https://grokdebug.herokuapp.com/" target="_blank" rel="external">grok正则在线测试</a></p>
<h4 id="Logstash采集Nginx"><strong>Logstash采集Nginx</strong></h4><ul>
<li><p>客户端配置<br>  &emsp;采集的客户端用的是<strong>filebeat</strong>，直接通过rpm安装。<br>  &emsp;/etc/filebeat/filebeat.yml</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">filebeat.prospectors:</span><br><span class="line">- input_<span class="built_in">type</span>: <span class="built_in">log</span></span><br><span class="line">  paths:</span><br><span class="line">    - /usr/<span class="built_in">local</span>/nginx/logs/access.log</span><br><span class="line">  <span class="comment">#multiline:</span></span><br><span class="line">  <span class="comment">#  pattern: '^(20[0-9]&#123;2&#125;(-[0-9]&#123;2&#125;)&#123;2&#125; [0-9]&#123;2&#125;(:[0-9]&#123;2&#125;)&#123;2&#125;)'</span></span><br><span class="line">  <span class="comment">#  negate: true</span></span><br><span class="line">  <span class="comment">#  match: after</span></span><br><span class="line"></span><br><span class="line">output.kafka:</span><br><span class="line">  hosts: [<span class="string">"10.201.5.30:9092"</span>, <span class="string">"10.201.5.31:9092"</span>]</span><br><span class="line">  topic: <span class="string">'nginx'</span></span><br><span class="line">  partition.round_robin:</span><br><span class="line">    reachable_only: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  required_acks: <span class="number">1</span></span><br><span class="line">  compression: gzip</span><br><span class="line">  max_message_bytes: <span class="number">1000000</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>服务端配置<br>  /usr/local/logstash/config/logstash.conf<br>  <code>root-ca.pem</code>是使用search-guard-ssl生成的证书原路径——<code>search-guard-ssl/example-pki-scripts/ca/root-ca.pem</code></p>
  <figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">	kafka &#123;</span><br><span class="line">		zk_connect =&gt; <span class="string">"10.201.3.33:2181,10.201.3.30:2181"</span></span><br><span class="line">		topic_id =&gt; <span class="string">"nginx"</span></span><br><span class="line">		codec =&gt; json</span><br><span class="line">		reset_beginning =&gt; <span class="literal">false</span></span><br><span class="line">		consumer_threads =&gt; <span class="number">5</span></span><br><span class="line">		decorate_events =&gt; <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">	grok &#123;</span><br><span class="line">		patterns_dir =&gt; [<span class="string">"/usr/local/logstash/patterns"</span>]</span><br><span class="line">		<span class="keyword">match</span> =&gt; [<span class="string">"message"</span>, <span class="string">"%&#123;NGINXACCESS&#125;"</span>]</span><br><span class="line">		overwrite =&gt; [<span class="string">"message"</span>]</span><br><span class="line">	&#125;</span><br><span class="line">	geoip &#123;</span><br><span class="line">		source =&gt; <span class="string">"xforward"</span></span><br><span class="line">		target =&gt; <span class="string">"geoip"</span></span><br><span class="line">		database =&gt; <span class="string">"/usr/local/logstash/maps/GeoLiteCity.dat"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   output &#123;</span><br><span class="line">      elasticsearch &#123;</span><br><span class="line">         user =&gt; logstash</span><br><span class="line">         password =&gt; logstash</span><br><span class="line">         ssl =&gt; <span class="literal">true</span></span><br><span class="line">         ssl_certificate_verification =&gt; <span class="literal">false</span></span><br><span class="line">         cacert =&gt; <span class="string">"/usr/local/logstash/config/root-ca.pem"</span></span><br><span class="line">         hosts =&gt; [<span class="string">"10.201.3.49:9200"</span>,<span class="string">"10.201.3.33:9200"</span>,<span class="string">"10.201.3.30:9200"</span>]</span><br><span class="line">         index =&gt; <span class="string">"nginx-%&#123;+YYYY.MM.dd&#125;"</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>grok正则<br>  /usr/local/logstash/patterns/nginx</p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NGINXACCESS %&#123;<span class="string">IP:</span>ip&#125; \- \- \[%&#123;<span class="string">HTTPDATE:</span>timestamp&#125;\] <span class="string">"%&#123;WORD:method&#125; %&#123;URIPATHPARAM:uri&#125; HTTP/%&#123;NUMBER:httpversion&#125;"</span> %&#123;<span class="string">NUMBER:</span>status&#125; %&#123;<span class="string">NUMBER:</span>bytes&#125; %&#123;<span class="string">QS:</span>referer&#125; %&#123;<span class="string">QS:</span>agent&#125; \<span class="string">"(?:-|%&#123;IP:xforward&#125;[%&#123;IP&#125;\, ]*)\" "</span>%&#123;<span class="string">NUMBER:</span><span class="string">request_time:</span><span class="typename">float</span>&#125; %&#123;<span class="string">NUMBER:</span>request_length&#125; %&#123;<span class="string">NUMBER:</span>connection_requests&#125;<span class="string">" %&#123;QS:other&#125;</span></span><br></pre></td></tr></table></figure>
<p>  Nginx日志格式</p>
  <figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log_format  main  '<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] <span class="string">"<span class="variable">$request</span>"</span> '</span><br><span class="line">                     '<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> <span class="string">"<span class="variable">$http_referer</span>"</span> '</span><br><span class="line">                     '<span class="string">"<span class="variable">$http_user_agent</span>"</span> <span class="string">"<span class="variable">$http_x_forwarded_for</span>"</span> <span class="string">"<span class="variable">$request_time</span> <span class="variable">$request_length</span> <span class="variable">$connection_requests</span>"</span> <span class="string">"<span class="variable">$http_syncsession</span>| <span class="variable">$http_sessionkey</span>| <span class="variable">$http_cookie</span>| <span class="variable">$http_accept</span>| <span class="variable">$http_content_length</span>| <span class="variable">$http_x_forwarded_proto</span>"</span>'<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="启动"><strong>启动</strong></h4><p>测试Logstash配置文件是否正确<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/logstash/</span>bin<span class="regexp">/logstash -f /u</span>sr<span class="regexp">/local/</span>logstash<span class="regexp">/config/</span>logstash.conf --configtest --verbose</span><br></pre></td></tr></table></figure></p>
<p>启动Logstash(尽量使用Supervisord管理)<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/logstash/</span>bin<span class="regexp">/logstash -f /u</span>sr<span class="regexp">/local/</span>logstash<span class="regexp">/config/</span>logstash.conf</span><br></pre></td></tr></table></figure></p>
<h2 id="Sentinl"><strong>Sentinl</strong></h2><p>&emsp;&emsp;Sentinl是一个开源的Kibana插件，用于监控报警和报告，可弥补ELK缺乏报警的功能。<a href="https://github.com/sirensolutions/sentinl" target="_blank" rel="external">Sentinl项目地址</a></p>
<h3 id="安装-4"><strong>安装</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/kibana/</span><br><span class="line">bin/kibana plugin --install sentinl -u https://github.com/sirensolutions/sentinl/releases/download/snapshot/sentinl-latest.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="search-guard权限设置-1"><strong>search-guard权限设置</strong></h3><p>&emsp;&emsp;Sentinl需要查询Elasticsearch的数据，所以需要给<code>kibana.yml</code>中的用户相应的权限<br>&emsp;&emsp;<strong>sg_roles.yml</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sg_kibana_server:</span><br><span class="line">  cluster:</span><br><span class="line">    - cluster:monitor/nodes/info</span><br><span class="line">    - cluster:monitor/health</span><br><span class="line">  indices:</span><br><span class="line">    <span class="string">'?kibana'</span>:</span><br><span class="line">      <span class="string">'*'</span>:</span><br><span class="line">        - ALL</span><br><span class="line">    <span class="string">'watcher*'</span>:</span><br><span class="line">      <span class="string">'*'</span>:</span><br><span class="line">        - ALL</span><br><span class="line">    <span class="string">'*'</span>:</span><br><span class="line">      <span class="string">'*'</span>:</span><br><span class="line">        - indices:data/<span class="built_in">read</span>/search*</span><br></pre></td></tr></table></figure></p>
<h3 id="kibana设置"><strong>kibana设置</strong></h3><p>&emsp;&emsp;需要在<code>kibana.yml</code>中设置发邮帐号和监控相对应的Elasticsearch索引。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sentinl:</span><br><span class="line"> es:</span><br><span class="line">   timefield: <span class="string">'@timestamp'</span></span><br><span class="line">   default_index: watcher</span><br><span class="line">   <span class="built_in">type</span>: watch</span><br><span class="line">   alarm_index: watcher_alarms</span><br><span class="line"> sentinl:</span><br><span class="line">   <span class="built_in">history</span>: <span class="number">20</span></span><br><span class="line">   results: <span class="number">50</span></span><br><span class="line"> settings:</span><br><span class="line">   email:</span><br><span class="line">     active: <span class="literal">true</span></span><br><span class="line">     user: <span class="built_in">test</span>@<span class="number">163</span>.com</span><br><span class="line">     password: &lt;password&gt;</span><br><span class="line">     host: smtp.<span class="number">163</span>.com</span><br><span class="line">     ssl: <span class="literal">true</span></span><br><span class="line">   report:</span><br><span class="line">     active: <span class="literal">true</span></span><br><span class="line">     tmp_path: /tmp/</span><br></pre></td></tr></table></figure></p>
<h3 id="配置Watch监控"><strong>配置Watch监控</strong></h3><p>&emsp;&emsp;登录Kibana后进入Sentinl点击Watch创建监控规则。规则中的<code>email from</code>需要和<code>kibana.yml</code>中邮箱的<code>user</code>一致。<br>&emsp;&emsp;下面这个示例是5分钟内<code>nginx-</code>索引日志中<code>status</code>http状态码为<code>502</code>的记录出现超过<code>3</code>次则报警<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span>: <span class="string">"watcher"</span>,</span><br><span class="line">  <span class="string">"_type"</span>: <span class="string">"watch"</span>,</span><br><span class="line">  <span class="string">"_id"</span>: <span class="string">"ops_1"</span>,</span><br><span class="line">  <span class="string">"_score"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"_source"</span>: &#123;</span><br><span class="line">    <span class="string">"disable"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"uuid"</span>: <span class="string">"ops_1"</span>,</span><br><span class="line">    <span class="string">"trigger"</span>: &#123;</span><br><span class="line">      <span class="string">"schedule"</span>: &#123;</span><br><span class="line">        <span class="string">"later"</span>: <span class="string">"every 5 minutes"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"input"</span>: &#123;</span><br><span class="line">      <span class="string">"search"</span>: &#123;</span><br><span class="line">        <span class="string">"request"</span>: &#123;</span><br><span class="line">          <span class="string">"index"</span>: [</span><br><span class="line">            <span class="string">"&lt;nginx-&#123;now/d&#125;&gt;"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"body"</span>: &#123;</span><br><span class="line">            <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">"query"</span>: &#123;</span><br><span class="line">              <span class="string">"bool"</span>: &#123;</span><br><span class="line">                <span class="string">"must"</span>: &#123;</span><br><span class="line">                  <span class="string">"match"</span>: &#123;</span><br><span class="line">                    <span class="string">"status"</span>: <span class="string">"502"</span></span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"filter"</span>: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="string">"range"</span>: &#123;</span><br><span class="line">                      <span class="string">"@timestamp"</span>: &#123;</span><br><span class="line">                        <span class="string">"gt"</span>: <span class="string">"now-5m"</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"condition"</span>: &#123;</span><br><span class="line">      <span class="string">"script"</span>: &#123;</span><br><span class="line">        <span class="string">"script"</span>: <span class="string">"payload.hits.total &gt; 3"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"transform"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"actions"</span>: &#123;</span><br><span class="line">      <span class="string">"email_admin"</span>: &#123;</span><br><span class="line">        <span class="string">"throttle_period"</span>: <span class="string">"5m"</span>,</span><br><span class="line">        <span class="string">"email"</span>: &#123;</span><br><span class="line">          <span class="string">"to"</span>: <span class="string">"admin@gmail.com"</span>,</span><br><span class="line">          <span class="string">"from"</span>: <span class="string">"test@163.com"</span>,</span><br><span class="line">          <span class="string">"subject"</span>: <span class="string">"Sentinl Alarm"</span>,</span><br><span class="line">          <span class="string">"priority"</span>: <span class="string">"high"</span>,</span><br><span class="line">          <span class="string">"body"</span>: <span class="string">"Found &#123;&#123;payload.hits.total&#125;&#125; 502 Events"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Supervisord"><strong>Supervisord</strong></h2><p>&emsp;&emsp;使用Supervisord来管理Logstash、Zookeeper和Kafka的启动/停止</p>
<h3 id="安装-5"><strong>安装</strong></h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> -U setuptools</span><br><span class="line">pip <span class="keyword">install</span> supervisor</span><br></pre></td></tr></table></figure>
<h3 id="配置-4"><strong>配置</strong></h3><p>生成模板配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>_supervisord_conf &gt; /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p>
<h3 id="启动-1"><strong>启动</strong></h3><ul>
<li><p>启动Supervisor</p>
  <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisord</span><br></pre></td></tr></table></figure>
</li>
<li><p>supervisorctl<br>  通过supervisorctl控制程序的启动，也可以通过Web界面管理<strong><a href="http://supervisor_server_ip:9001" target="_blank" rel="external">http://supervisor_server_ip:9001</a></strong></p>
  <figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl  [<span class="literal">start</span>|<span class="literal">stop</span>|<span class="literal">restart</span>|reread|update] program_name</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;&emsp;ELK(Elasticsearch/Logstash/Kibana)是目前对日志采集分析比较适合的解决方案；Kafka是一个分布式高可用高吞吐的消息队列软件，在日志量大及对数据可靠性要求高的场景使用；Search-Guard是一款开源的、对Elast]]>
    </summary>
    
      <category term="ELK" scheme="http://yoursite.com/tags/ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[《深入理解Linux内核》读书笔记]]></title>
    <link href="http://yoursite.com/2017/02/02/linux-kernel-note/"/>
    <id>http://yoursite.com/2017/02/02/linux-kernel-note/</id>
    <published>2017-02-02T04:42:40.000Z</published>
    <updated>2017-02-23T14:59:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="目录"><strong>目录</strong></h2><ul>
<li><a href="#introduction">绪论</a></li>
<li><a href="#memory_addressing">内存寻址</a></li>
<li><a href="#memory_management">内存管理</a></li>
</ul>
<p><span id="introduction"></span></p>
<h2 id="绪论"><strong>绪论</strong></h2><h3 id="Unix文件系统概述"><strong>Unix文件系统概述</strong></h3><h4 id="文件"><strong>文件</strong></h4><p>&emsp;&emsp;Unix文件是以字节序列组成的信息载体，文件被组织在一个<strong>树结构</strong>的命名空间中。除叶节点外，树的所有节点表示目录名。<strong>目录节点包含其下的文件及目录的所有信息。</strong><br>&emsp;&emsp;Unix的进程都有一个当前目录，当前目录属于进程<strong>执行上下文(execution context)</strong>，标识进程所在的当前目录。进程使用<strong>路径名(pathname)</strong>标识某个特定文件，路径名由斜杠及一系列指向文件的目录名交替组成。若路径名的第一个字符为’/‘，则此路径为<strong>绝对路径</strong>；若第一项为目录名或文件名，则此路径为<strong>相对路径</strong>，<strong><code>.</code></strong>标识当前目录、<strong><code>..</code></strong>标识父目录。</p>
<h4 id="软链接_&amp;_硬链接"><strong>软链接 &amp; 硬链接</strong></h4><p>&emsp;&emsp;使用<strong><code>ln</code></strong>命令为由路径<code>P1</code>标识的文件创建一个名为<code>P2</code>的硬链接<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; ln P1 P2</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;硬链接有2个限制：</p>
<ol>
<li>不能为目录创建硬链接</li>
<li>只能在同一文件系统中创建硬链接</li>
</ol>
<p>&emsp;&emsp;软链接又可称之为符号链接。路径名可指向位于任意文件系统的任意文件或目录，甚至<strong>可指向一个不存在的文件</strong>(硬链接只能对已存在的文件进行创建)。同样使用<strong><code>ln</code></strong>命令创建软链接<br>&emsp;&emsp;创建一个名为<code>P2</code>的软链接并指向路径名<code>P1</code>，任何对<code>P2</code>的操作都会自动转换到<code>P1</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; ln <span class="operator">-s</span> P1 P2</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;硬链接是有着与原文件<strong>相同inode号</strong>仅文件名不同的文件，而软链接是拥有属于自己的inode号的，软链接的数据块内容存放着指向原文件的路径。</p>
<h4 id="文件类型"><strong>文件类型</strong></h4><p>&emsp;&emsp;Unix文件类型包括如下：</p>
<ul>
<li>普通文件</li>
<li>目录</li>
<li>软链接(符号链接)</li>
<li>块设备文件</li>
<li>字符设备文件</li>
<li>管道、命名管道</li>
<li>套接字(socket)</li>
</ul>
<h4 id="文件描述符(fd)_&amp;_索引节点(inode)"><strong>文件描述符(fd) &amp; 索引节点(inode)</strong></h4><p>&emsp;&emsp;除设备文件和特殊文件系统文件外，Unix文件都由字符序列组成。Unix对文件的内容和描述文件的信息加以区分，文件内容不包含控制信息(文件长度、文件结束符等)。<br>&emsp;&emsp;文件系统处理文件所需的控制信息都包含在<strong>索引节点</strong>(<strong>inode</strong>)中。每个文件都有自己的索引节点，文件系统用索引节点标识文件。<br>&emsp;&emsp;索引节点(inode)包含如下属性：</p>
<ul>
<li>文件类型</li>
<li>与文件相关的硬链接个数</li>
<li>以字节为单位的文件长度</li>
<li>设备标识符</li>
<li>文件系统中标识文件的索引节点号</li>
<li>文件拥有者ID</li>
<li>文件的组ID</li>
<li>时间戳(改变时间、最后访问时间、最后修改时间)</li>
<li>访问权限及文件模式</li>
</ul>
<h4 id="访问权限"><strong>访问权限</strong></h4><p>&emsp;&emsp;文件的潜在用户分三类：</p>
<ul>
<li>文件拥有者(<strong><code>u</code></strong>ser)</li>
<li>同组用户，不包括拥有者(<strong><code>g</code></strong>roup)</li>
<li>所有剩下的用户(<strong><code>o</code></strong>ther)</li>
</ul>
<p>&emsp;&emsp;访问权限有三种：读、写和可执行。因此文件访问权限的组合有九种不同的二进制标记。除此之外，还有三种附加标记——<strong><code>suid</code></strong>、<strong><code>sgid</code></strong>和<strong><code>sticky</code></strong>用于定义文件模式。</p>
<ul>
<li><code>suid</code>：进程执行文件时保持文件拥有者的UID。</li>
<li><code>sgid</code>：进程执行文件时保持用户组的GID。</li>
<li><code>sticky</code>：向内核发出请求，当程序结束后依然将其保存在内存中(此标志已过时)。</li>
</ul>
<h3 id="Unix内核概述"><strong>Unix内核概述</strong></h3><h4 id="进程/内核模式"><strong>进程/内核模式</strong></h4><p>&emsp;&emsp;CPU可运行在用户态下，也可运行在内核态下。尽管CPU会拥有不同的执行状态，但标准的Unix内核仅用到<strong>用户态</strong>和<strong>内核态</strong>。<br>&emsp;&emsp;一个程序在执行时，大部分时间处于用户态下，只有需要内核所提供的服务时才切换到内核态，程序在用户态下不能直接访问内核数据结构和内核程序。当内核满足用户程序请求后，内核会让程序重新回到用户态。<br>&emsp;&emsp;请求内核服务的进程使用<strong>系统调用(system call)</strong>的特殊编程机制完成从用户态到内核态的转换(系统调用只是其中的一种方式)。每个系统调用都设置一组识别进程请求的参数，进程调用后执行与硬件相关的CPU指令。<br>&emsp;&emsp;除用户进程外，Unix系统还有几个<strong>内核线程(kernel thread)</strong>的<strong>特权进程</strong>，特权进程有如下特点：</p>
<ul>
<li>以内核态运行在内核地址空间中</li>
<li>不与用户直接交互、不需要终端设备</li>
<li>在系统启动时创建，一直处于活跃状态直到系统关闭</li>
</ul>
<h4 id="进程实现"><strong>进程实现</strong></h4><p>&emsp;&emsp;为了内核能管理进程，每个进程由<strong>进程描述符(process descriptor)</strong>表示，进程描述符包含有关进程当前状态的信息。<br>&emsp;&emsp;当内核需要暂停一个正在执行中的进程时，会把相关处理器寄存器的内容保存到进程描述符中，这些寄存器包括：</p>
<ul>
<li>程序计数器(PC)和栈指针(SP)寄存器</li>
<li>通用寄存器</li>
<li>浮点寄存器</li>
<li>包含CPU状态信息的处理器控制寄存器</li>
<li>用来跟踪进程对RAM访问的内存管理寄存器</li>
</ul>
<p>&emsp;&emsp;当内核需要恢复一个进程时，会用进程描述符中合适的字段来装载寄存器。<br>&emsp;&emsp;当进程不在CPU上执行时，那正在等待事件。内核可区分多种等待状态，这些等待状态由进程描述符队列实现，每个队列对应一组正在等待某事件的进程。</p>
<h4 id="可重入内核"><strong>可重入内核</strong></h4><p>&emsp;&emsp;所有Unix内核都是<strong>可重入的(reentrant)</strong>，可重入意味着多个进程可同时在内核态下执行。<br>&emsp;&emsp;提供可重入的其中一种方式是编写可重入函数，可重入函数只能修改局部变量而不能修改全局变量。对于非重入函数，可利用锁机制保证一次只有一个进程执行一个非重入函数。<br>&emsp;&emsp;进程即使处于内核态，当一个硬件中断产生时，可重入内核也能将正在执行的进程挂起。产生硬件中断的设备控制器能快速的收到内核的应答，设备控制器在CPU处理中断时能执行其他任务，这样能提高设备控制器的吞吐量。<br>&emsp;&emsp;为了说明可重入性对内核组织的影响。引入<strong>内核控制路径(kernel control path)</strong>概念，内核控制路径表示内核处理系统调用、异常或中断所执行的指令序列。<br>&emsp;&emsp;最简单的情况下，CPU从第一条指令到最后一条指令顺序执行内核控制路径。但当以下事件之一发生时，CPU交错执行内核控制路径：</p>
<ul>
<li>用户态下的进程调用一个系统调用，相应的内核控制路径确定这个请求无法立即满足。于是，内核控制路径调用调度程序选择一个新的进程执行。因此发生进程切换。第一个内核控制路径没完成，CPU便开始执行其他的内核控制路径。此情况下，两条控制路径代表两个不同的进程在执行。</li>
<li>当正在执行一个内核控制路径时，CPU检测到一个异常，第一个控制路径被挂起而CPU开始执行合适的过程。</li>
<li>当CPU正在运行一个启用了中断的内核控制路径时，一个硬件中断产生。第一个内核控制路径还未执行完，CPU开始执行另一个内核控制路径来处理中断，中断处理完后第一个内核控制路径恢复。</li>
<li>在支持抢占式调度的内核中，若一个更高优先级的进程进入调度队列，则CPU会中断第一个执行控制路径，优先响应更高优先级的进程。</li>
</ul>
<h4 id="进程地址空间"><strong>进程地址空间</strong></h4><p>&emsp;&emsp;每个进程都运行在属于自己的私有地址空间中，地址空间的最大长度和物理内存无关，所以称之为<strong>虚拟地址空间</strong>。Linux将地址空间根据用户态和内核态不同分为<strong>用户空间</strong>和<strong>内核空间</strong>。用户态下进程的地址空间在用户空间中，涉及<strong>私有栈</strong>、<strong>数据区</strong>和<strong>代码区</strong>，但进入内核态则使用内核空间的数据区和代码区。<br>&emsp;&emsp;虽说进程访问的是私有地址空间，但进程间也能共享部分地址空间，比如在实现进程间通信时，其中一种方式称为<strong>共享内存</strong>，是通过共享部分地址空间从而实现进程间通信的。<br>&emsp;&emsp;Linux的<strong><code>mmap()</code></strong>系统调用允许<strong>块设备</strong>的文件映射到进程的地址空间中，若一个文件由多个进程共享，那么这些进程的地址空间都包含该文件的内存映射。</p>
<h4 id="进程间通信"><strong>进程间通信</strong></h4><p>&emsp;&emsp;目前Linux系统中进程间通信主要的方式有以下几种：</p>
<ul>
<li>管道(pipe)和命名管道(FIFO)</li>
<li>信号(signal)</li>
<li>消息队列</li>
<li>共享内存</li>
<li>套接字(socket)</li>
</ul>
<h4 id="进程管理"><strong>进程管理</strong></h4><p>&emsp;&emsp;Linux系统是通过调用<strong><code>fork()</code></strong>创建新进程的。<strong><code>fork()</code></strong>会创建一个与父进程<strong>完全相同</strong>的子进程，子进程被创建后继续执行<code>fork()</code>后面的代码。为了效率考虑Linux系统使用<strong>Copy-On-Write</strong>机制，简单的说就是<code>fork()</code>后的父子进程都使用相同的物理内存区域，子进程的代码区、数据区和堆栈区等都指向父进程(父子进程的虚拟地址空间是不同的)，只有当父或子进程需要进行写入时才为子进程分配数据区、堆栈区(代码区(<code>exec()</code>))并复制父进程的内容给子进程。</p>
<ul>
<li><strong>僵尸进程(zombie process)</strong><br>  &emsp;&emsp;Linux中是通过父进程调用<code>fork()</code>创建出新的子进程，当子进程执行完毕调用<code>exit()</code>结束自己释放绝大多数资源后，子进程并非立即就在系统中消失而是会留下部分信息(<code>PID</code>、<code>退出状态</code>、<code>CPU使用时间</code>等)并在进程列表中保留位置(即占用一个PID)，直到父进程调用<code>wait()/waitpid()</code>收集完子进程残留的信息后才会使子进程彻底从系统中消失。子进程调用<code>exit()</code>到父进程调用<code>wait()/waitpid()</code>之间所处于的状态称其为<strong>僵尸进程</strong>。<br>  &emsp;&emsp;僵尸进程是不能通过<code>kill</code>命令让其消失的，因为僵尸进程已经<code>exit()</code>退出了只是还残留信息等待被父进程收集而已。假若父进程中没有写<code>wait()/waitpid()</code>操作或父进程忙于执行其他任务无法执行<code>wait()/waitpid()</code>，那么系统中可能会出现很多僵尸进程(僵尸进程占用PID，系统PID资源也是有限的)。其中一个办法是之间杀死父进程，让子进程变成<strong>孤儿进程</strong>由<strong><code>init进程</code></strong>接管并收集残留信息使僵尸进程消失。</li>
<li><strong>进程组(process group) &amp; 登录会话(login session)</strong><ul>
<li><strong>进程组(process group)</strong><br>  &emsp;&emsp;Linux操作系统引入<strong>进程组(process group)</strong>是为了能对更方便的管理多个进程，若将信号(signal)发送给一个进程组则<strong>该进程组的所有进程都会收到该信号</strong>。<br>  &emsp;&emsp;每个进程组会有一个<strong>进程组组长(process group leader)</strong>，<strong>组长进程(group leader)的<code>PID</code>会成为进程组ID(process group ID, <code>PGID</code>)</strong>。新创建的进程会被加入到其父进程的进程组中。<br>  &emsp;&emsp;<strong>进程组(process group)的存在和组长进程(group leader)是否存在无关</strong>，只要进程组(process group)中有一个进程存在则进程组(process group)就存在。只有当进程组(process group)内所有进程都退出进程组(process group)才会消失。</li>
<li><strong>登录会话(login session)</strong><br>  &emsp;&emsp;Linux系统也引入了<strong>登录会话(login session)</strong>，一个或多个进程组(process group)组成一个登录会话(login session)。会话由其中的某个进程建立，该进程称为<strong>会话首进程(session leader)</strong>。会话首进程(session leader)的<code>PID</code>成为会话ID<code>session ID, SID</code>。若会话首进程(session leader)退出，内核将发送<code>SIGHUP</code>信号给前台进程组。<br>  &emsp;&emsp;一个登录会话(login session)可让多个进程组(process group)处于活动状态，但只能有<strong>一个</strong>进程组(process group)处于前台(foreground)，其他进程组都是后台(background)。前台进程组可以访问终端，后台进程组试图访问终端时会收到<code>SIGTTIN</code>/<code>SIGTTOUT</code>信号。可使用<code>bg</code>和<code>fg</code>将一个进程组放到后台或前台。</li>
</ul>
</li>
</ul>
<h4 id="内存管理"><strong>内存管理</strong></h4><ul>
<li><p><strong>虚拟内存</strong><br>  &emsp;&emsp;在内存管理上，Linux系统引入<strong>虚拟内存(virtual memory)</strong>这个抽象的逻辑层。虚拟内存(virtual memory)是处于<em>应用程序内存申请</em>和<em>硬件内存管理单元(Memory Management Unit, <code>MMU</code>)</em>之间。<br>  &emsp;&emsp;虚拟内存(virtual memory)的用途和优点：</p>
<ul>
<li>支持多进程并行执行</li>
<li>程序所需内存大于实际物理内存是也可运行(Linux有<code>overcommit</code>机制)</li>
<li>程序只有部分代码载入内存时进程可执行程序</li>
<li>允许每个进程访问可用物理内存的子集</li>
<li>进程可以共享函数库或程序的一个单独内存映象</li>
<li>程序是可重定位的，可以把程序放在物理内存的任何地方</li>
<li>程序员可以编写机器无关代码，无需关系物理内存的组织结构<br>&emsp;&emsp;虚拟内存子系统中最重要的概念是<strong>虚拟地址空间(virtual address space)</strong>，进程所使用的内存地址并非物理内存地址而是<strong>虚拟地址</strong>。虚拟地址由内核和<code>MMU</code>协同定位出其在内存中的物理地址。<br>&emsp;&emsp;现在的CPU有能自动把虚拟地址转换成物理地址的硬件电路，使得可以将<code>RAM</code>划分成长度为<code>4K</code>或<code>8K</code>的<strong>页框(page frame)</strong>并引入一组<strong>页表</strong>来指定虚拟地址和物理地址的关系。</li>
</ul>
</li>
<li><p><strong>随机访问存储器RAM</strong><br>  &emsp;&emsp;<strong>RAM</strong>基本别分为两部分：</p>
<ul>
<li>若干兆节用于存放<strong>内核映象</strong>，主要是<strong>内核代码</strong>和<strong>内核静态数据结构</strong>。</li>
<li>剩余部分全由虚拟内存子系统处理。主要用于三个方面：<ul>
<li>满足内核对缓冲区、描述符及其他动态内核数据结构的请求</li>
<li>满足进程对一般内存区的请求及对文件内存映射的请求</li>
<li>借助于高速缓存从磁盘及其他缓冲设备获得较好的性能<br>&emsp;&emsp;虚拟内存子系统另外一个需要处理的问题是<strong>内存碎片</strong>，因为即使存在可用内存，但如果不能作为一个<strong>连续</strong>的块使用时，申请内存会失败的。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>内核内存分配器KMA</strong><br>  &emsp;&emsp;内核内存分配器(Kernel Memory Allocator，<strong><code>KMA</code></strong>)是一个子系统，用于满足系统所有对内存的请求。KMA需要有如下特点：</p>
<ul>
<li>速度快，性能高</li>
<li>必须把内存的浪费减少到最少</li>
<li>必须努力减轻内存碎片问题</li>
<li>必须能与其他内存管理子系统合作<br>&emsp;&emsp;根据不同的算法有多种不同的KMA，Linux的KMA使用了<strong>Slab分配算法</strong>。</li>
</ul>
</li>
<li><p><strong>进程虚拟地址空间处理</strong><br>  &emsp;&emsp;进程的虚拟地址空间包括进程能使用的所有虚拟内存地址。内核常用一组<em>内存区描述符</em>描述进程虚拟地址空间。<br>  &emsp;&emsp;当进程使用<code>exec()</code>系统调用执行程序时，内核分配给进程的虚拟地址空间由以下<em>内存区</em>组成：</p>
<ul>
<li>程序的可执行代码(代码区)</li>
<li>程序的初始化数据(数据区)</li>
<li>程序的未初始化数据(数据区)</li>
<li>初始程序栈(用户态栈)</li>
<li>所需共享库的可执行代码和数据</li>
<li>堆(由程序动态申请的内存)<br>Linux系统都是采用<strong>请求调页(demand paging)</strong>的内存分配策略。进程可在其所需内存页没加载进内存前开始执行，当进程访问页不存在时，<code>MMU</code>产生一个异常，异常处理程序定位到受影响的内存区，分配空闲页并用适当的数据页进行初始化。有了<strong>请求调页(demand paging)</strong>内存分配策略，当进行使用<code>malloc()</code>系统调用动态申请内存时，内核仅需要修改<em>堆内存区</em>大小即可。</li>
</ul>
</li>
<li><p><strong>高速缓存</strong><br>  &emsp;&emsp;所谓高速缓存，就是将内存作为磁盘或其他设备的缓存。将从磁盘读入的内容缓存在内存中以便再次使用时能快速提供数据，不用重新从磁盘再加载进内存。对于写入磁盘的数据，会先直接在内存中修改，内核会将变更的数据标记为<code>dirty</code>并周期性地将这些<code>dirty</code>数据写回磁盘，避免重复低效的I/O操作。</p>
</li>
</ul>
<p><span id="memory_addressing"></span></p>
<h2 id="内存寻址"><strong>内存寻址</strong></h2><p>&emsp;&emsp;《深入理解Linux内核》内存寻址这章节是以<strong><code>80x86</code>微处理器</strong>为主来讲解芯片级别的内存寻址的。</p>
<h3 id="内存地址"><strong>内存地址</strong></h3><p>&emsp;&emsp;<code>80x86</code>微处理器将内存区分为三种不同的地址：</p>
<ul>
<li><strong>逻辑地址(logical address)</strong><ul>
<li>包含在机器语言指令中用来指定一个操作数或一条指令的地址。</li>
<li>每个<strong>逻辑地址(logical address)</strong>由一个<strong>段(segment)</strong>和<strong>偏移量(offset/displacement)</strong>组成。</li>
</ul>
</li>
<li><strong>线性地址(linear address)</strong>/<strong>虚拟地址(virtual address)</strong><ul>
<li><code>32</code>位无符号整数。最大可表达<strong><code>4GB</code></strong>的地址。(32位系统中单进程寻址最大4G的原因)</li>
<li>通常用<strong>十六进制</strong>表示。<strong><code>0x00000000</code></strong> ~ <strong><code>0xffffffff</code></strong></li>
</ul>
</li>
<li><strong>物理地址(physical address)</strong><ul>
<li>用于内存芯片级内存单元寻址。</li>
<li>物理地址(physical address)和从微处理器的地址引脚发送到内存总线上的电信号相对应。</li>
<li>由<strong><code>32</code></strong>或<strong><code>64</code></strong>位无符号整数表示。</li>
</ul>
</li>
</ul>
<p>&emsp;&emsp;<strong>内存控制单元(MMU)</strong>通过<strong>分段单元(segmentation unit)</strong>硬件电路将逻辑地址(logical address)转换成虚拟地址(virtual address)，再通过<strong>分页单元(paging unit)</strong>硬件电路将虚拟地址(virtual address)转换物理地址(physical address)。<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">逻辑地址<span class="comment">(logical address)</span>——&gt;[分段单元<span class="comment">(segmentation unit)</span>]——&gt;虚拟地址<span class="comment">(virtual address)</span>——&gt;[分页单元<span class="comment">(paging unit)</span>]——&gt;物理地址<span class="comment">(physical address)</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="目录"><strong>目录</strong></h2><ul>
<li><a href="#introduction">绪论</a></li>
<li><a href="#memory_addressing">内存寻址</a></li>
<li><a href=]]>
    </summary>
    
      <category term="Linux Kernel" scheme="http://yoursite.com/tags/Linux-Kernel/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux 内存小记]]></title>
    <link href="http://yoursite.com/2016/11/11/linux-memory/"/>
    <id>http://yoursite.com/2016/11/11/linux-memory/</id>
    <published>2016-11-11T10:28:14.000Z</published>
    <updated>2017-02-11T06:36:18.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;最近遇到几个有关Linux内存的问题，于是稍微整理了一下有关Linux内存方面的内容稍作记录。</p>
<h3 id="free_-m"><strong>free -m</strong></h3><p>&emsp;一般看内存最直接就是输入<code>free -m</code>命令查看，显示的结果恐怕也是问得最多的(<code>free</code>命令实际是通过<strong><code>/proc/meminfo</code></strong>获得内存数值的)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; free -m</span><br><span class="line">                   total       used       free     shared    buffers     cached</span><br><span class="line">Mem:          <span class="number">3922</span>      <span class="number">2731</span>      <span class="number">1190</span>        <span class="number">341</span>        <span class="number">166</span>        <span class="number">963</span></span><br><span class="line">-/+ buffers/cache:    <span class="number">1601</span>      <span class="number">2320</span></span><br><span class="line">Swap:         <span class="number">1952</span>          <span class="number">0</span>       <span class="number">1952</span></span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:left">total</th>
<th style="text-align:left">used</th>
<th style="text-align:left">free</th>
<th style="text-align:left">shared</th>
<th style="text-align:left">buffers</th>
<th style="text-align:left">cached</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Mem:</td>
<td style="text-align:left">总内存</td>
<td style="text-align:left">已使用内存<code>use+slab+buffers+cached</code></td>
<td style="text-align:left">完全空闲内存</td>
<td style="text-align:left">进程间共享内存</td>
<td style="text-align:left">buffers(详解见下)</td>
<td style="text-align:left">cached(详解见下)</td>
</tr>
<tr>
<td style="text-align:left">-/+ buffers/cache:</td>
<td style="text-align:left"></td>
<td style="text-align:left">实际使用内存<code>use+slab</code></td>
<td style="text-align:left">空闲内存<code>free+buffers+cached</code></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">Swap:</td>
<td style="text-align:left">总swap</td>
<td style="text-align:left">已使用swap</td>
<td style="text-align:left">空闲swap</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
<ol>
<li><strong>Mem:</strong>中的<strong>used</strong>是包括了<code>各进程使用内存+slab+buffers+cached</code>，即<code>2731 = 1601(use+slab) + 166(buffers) + 963(cached)</code> (由于使用<code>-m</code>以兆单位显示，计算时会有一点点出入。)</li>
<li><strong>Mem:</strong>中的<strong>free</strong>则表示完完全全没有被用于其他用途的内存，换句话说就是”多余”的、”浪费”的内存。</li>
<li><strong>-/+ buffers/cache</strong>中的<strong>used</strong>是系统实际使用的内存(slab的缓存也是包括在此used中的)，不包括<code>buffers</code>和<code>cached</code>，即<code>1601 = 2731(used) - 166(buffers) - 963(cached)</code>。</li>
<li><strong>-/+ buffers/cache</strong>中的<strong>free</strong>表示系统空闲内存，指系统<strong>最多</strong>还可用的内存量。此处的空闲内存是包含了<code>buffers</code>和<code>cached</code>的，即<code>2320 = 1190(free)  + 166(buffers) + 963(cached)</code><br>理论上认为<code>buffers</code>和<code>cached</code>是可释放回收的内存，因为内存的读取速度比硬盘快Linux充分利用内存资源以加快读取速度。但需要注意一点<strong>并非所有的<code>buffers</code>和<code>cached</code>都可被释放回收</strong>。</li>
<li>关于<code>buffers</code>和<code>cached</code>：<ul>
<li><code>cached</code>：是统计所有文件缓存的page总数，即是VFS的<strong>page cache</strong>总数。</li>
<li><code>buffers</code>：是统计所有block device(块设备)的bd_inode的address_space的page总数。<a href="https://www.quora.com/Linux-Kernel/What-is-the-major-difference-between-the-buffer-cache-and-the-page-cache/answer/Robert-Love-1" target="_blank" rel="external">网上资料</a>说对元数据(<code>metadata</code>)的操作也会缓存到<code>buffers</code>中，源码中没找到，此部分待验证。</li>
</ul>
</li>
</ol>
<h3 id="Linux_Cache"><strong>Linux Cache</strong></h3><p>&emsp;为进一步说明<code>cached</code>和<code>buffers</code>，需要先弄清楚Linux的内存Cache机制，为了明白Linux的Cache机制需要去了解源码中有关<strong><code>address_space</code></strong>结构体的具体定义。<br>&emsp;Linux为提高读写数据速度和减少磁盘IO，会最大程度的将用到的数据存储在内存中。Linux内存管理是以页(page)为基本单位，当内核进行读操作时，首先检查数据是否存在于page cache中，存在则直接从内存读取数据，不存在则从磁盘读取并将该数据放入page cache，如果内存足够该数据会在page cache中长时间驻留。当内核进行写操作时，会直接在page cache中进行并将该页(page)标记为<strong>dirty</strong>，内核会周期性将dirty page写回到磁盘并取消ditry标记。<br>&emsp;大部分的file IO都会使用到page cache。但也可以指定不使用page cache，当进程打开文件时使用<strong><code>O_DIRECT</code></strong>标志，不使用page cache而是使用进程用户态地址空间的缓冲区。</p>
<h4 id="page数据产生方式"><strong>page数据产生方式</strong></h4><p>&emsp;内存中的page数据大致有两种产生方式：</p>
<ul>
<li><strong>读取文件(file IO)</strong>：这些page中的数据是通过读取文件产生的，这些page的拥有者是该文件的inode。这种方式是最为常用。</li>
<li><strong>直接读取块设备(block IO)</strong>：这些page中的数据是通过直接操作块设备(<code>如:/dev/sda1</code>)产生的，这些page的拥有者是块设备的主inode(块设备在bdev文件系统中的inode称主inode，在宿主文件系统[如ext4]中的inode称次inode)</li>
</ul>
<h4 id="页面描述符"><strong>页面描述符</strong></h4><p>&emsp;每个page有一个<strong>页面描述符(struct page)</strong>，页面描述符结构中含有<strong><code>mapping</code></strong>和<strong><code>index</code></strong>变量，用于连接page和page cache。</p>
<ul>
<li><strong><code>mapping</code></strong>：指向该page的inode的<strong>address_space</strong>对象。</li>
<li><strong><code>index</code></strong>：该page所有者地址空间中以页(page)为单位的偏移量。</li>
</ul>
<h4 id="address_space结构体"><strong>address_space结构体</strong></h4><p>&emsp;<strong><code>address_space</code></strong>是内存Cache中核心的数据结构，在<a href="https://github.com/torvalds/linux/blob/master/include/linux/fs.h#L431" target="_blank" rel="external">include/linux/fs.h</a>中定义。<br>&emsp;本次主要留意的是<strong><code>host</code></strong>和<strong><code>nrpages</code></strong>字段，<strong><code>host</code></strong>指向拥有该<code>address_space</code>对象的<code>inode</code>/<code>block_device</code>、<strong><code>nrpages</code></strong>表示该<code>inode</code>/<code>block_device</code>的页总数(解释<code>buffers</code>时会用到此字段，详见下)。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> address_space &#123;</span><br><span class="line">    <span class="keyword">struct</span> inode		*host;		<span class="comment">/* owner: inode, block_device */</span></span><br><span class="line">    <span class="keyword">struct</span> radix_tree_root	page_tree;	<span class="comment">/* radix tree of all pages */</span></span><br><span class="line">    spinlock_t		tree_lock;	<span class="comment">/* and lock protecting it */</span></span><br><span class="line">    atomic_t		i_mmap_writable;<span class="comment">/* count VM_SHARED mappings */</span></span><br><span class="line">    <span class="keyword">struct</span> rb_root		i_mmap;		<span class="comment">/* tree of private and shared mappings */</span></span><br><span class="line">    <span class="keyword">struct</span> rw_semaphore	i_mmap_rwsem;	<span class="comment">/* protect tree, count, list */</span></span><br><span class="line">    <span class="comment">/* Protected by tree_lock together with the radix tree */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>		nrpages;	<span class="comment">/* number of total pages */</span></span><br><span class="line">    <span class="comment">/* number of shadow or DAX exceptional entries */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>		nrexceptional;</span><br><span class="line">    pgoff_t			writeback_index;<span class="comment">/* writeback starts here */</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">struct</span> address_space_operations *a_ops;	<span class="comment">/* methods */</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span>		flags;		<span class="comment">/* error bits */</span></span><br><span class="line">    spinlock_t		private_lock;	<span class="comment">/* for use by the address_space */</span></span><br><span class="line">    gfp_t			gfp_mask;	<span class="comment">/* implicit gfp mask for allocations */</span></span><br><span class="line">    <span class="keyword">struct</span> list_head	private_list;	<span class="comment">/* ditto */</span></span><br><span class="line">    <span class="keyword">void</span>			*private_data;	<span class="comment">/* ditto */</span></span><br><span class="line">&#125; __attribute__((aligned(<span class="keyword">sizeof</span>(<span class="keyword">long</span>))));</span><br></pre></td></tr></table></figure></p>
<h4 id="映射关系"><strong>映射关系</strong></h4><p>&emsp;根据page中数据的产生方式不同所映射的关系也有些许差别：</p>
<ol>
<li>若page cache中page的数据来自文件(file IO)，那么该page中数据的拥有者为该文件的inode。VFS的<a href="https://github.com/torvalds/linux/blob/master/include/linux/fs.h#L604" target="_blank" rel="external"><code>inode</code>结构体</a>中有<code>i_data</code>字段而<strong><code>address_space</code></strong>则在该<code>i_data</code>字段中。<code>inode</code>结构体中除了有<code>i_data</code>外还有<code>i_mapping</code>，<strong><code>i_mapping</code></strong>指向该<code>inode</code>对应的<code>address_space</code>。<code>address_space</code>中的<code>host</code>字段指向所属的<code>inode</code>。大致关系如下图所示，<a href="http://blog.chinaunix.net/uid-28977986-id-3777252.html" target="_blank" rel="external">图片来源</a><br><img src="http://blog.chinaunix.net/attachment/201306/26/28977986_1372230654sA21.jpg" alt="page-address_space-inode关系图"></li>
<li>若page cache中page的数据来自块设备(block IO)，那么该page中的数据(<code>块设备的原始数据</code>)拥有者为该块设备的主inode。<code>address_space</code>则在<code>bdev</code>文件系统的inode(主inode)中，<code>i_mapping</code>字段指向<code>主inode</code>中的<code>address_space</code>。<code>address_space</code>中的<code>host</code>指向该<code>主inode</code>。</li>
</ol>
<h4 id="cached_&amp;_buffers"><strong>cached &amp; buffers</strong></h4><p>&emsp;上面说了这么多终于可以来解释<code>free -m</code>中的<code>cached</code>和<code>buffers</code>。</p>
<ul>
<li><strong><code>cached</code></strong>：<code>cached</code>就是进程在读写操作文件(fiel IO)所产生的驻留内存的数据，就是VFS中的<code>page cache</code>。</li>
<li><p><strong><code>buffers</code></strong>：</p>
<ol>
<li>为了更详细的解释<code>buffers</code>，我们直接查看相关源码。<code>free</code>命令是统计<code>/proc/meminfo</code>中的数值，而<code>/proc/meminfo</code>的值是调用<code>sysinfo</code>获得的。</li>
<li><p>在<a href="https://github.com/torvalds/linux/blob/master/fs/proc/meminfo.c#L47" target="_blank" rel="external">linux/fs/proc/meminfo.c</a>中有结构体<code>sysinfo</code>，而<code>sysinfo</code>结构体<a href="https://github.com/torvalds/linux/blob/master/include/uapi/linux/sysinfo.h#L13" target="_blank" rel="external">linux/include/uapi/linux/sysinfo.h</a>中使用了<code>bufferram</code>，而<code>bufferram</code>正是<code>free</code>命令中<code>buffers</code>的数值来源。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> sysinfo &#123;</span><br><span class="line">       __kernel_long_t uptime;		<span class="comment">/* Seconds since boot */</span></span><br><span class="line">       __kernel_ulong_t loads[<span class="number">3</span>];	<span class="comment">/* 1, 5, and 15 minute load averages */</span></span><br><span class="line">       __kernel_ulong_t totalram;	<span class="comment">/* Total usable main memory size */</span></span><br><span class="line">       __kernel_ulong_t freeram;	<span class="comment">/* Available memory size */</span></span><br><span class="line">       __kernel_ulong_t sharedram;	<span class="comment">/* Amount of shared memory */</span></span><br><span class="line">       __kernel_ulong_t bufferram;	<span class="comment">/* Memory used by buffers */</span></span><br><span class="line">       __kernel_ulong_t totalswap;	<span class="comment">/* Total swap space size */</span></span><br><span class="line">       __kernel_ulong_t freeswap;	<span class="comment">/* swap space still available */</span></span><br><span class="line">       __u16 procs;		   	<span class="comment">/* Number of current processes */</span></span><br><span class="line">       __u16 pad;		   	<span class="comment">/* Explicit padding for m68k */</span></span><br><span class="line">       __kernel_ulong_t totalhigh;	<span class="comment">/* Total high memory size */</span></span><br><span class="line">       __kernel_ulong_t freehigh;	<span class="comment">/* Available high memory size */</span></span><br><span class="line">       __u32 mem_unit;			<span class="comment">/* Memory unit size in bytes */</span></span><br><span class="line">       <span class="keyword">char</span> _f[<span class="number">20</span>-<span class="number">2</span>*<span class="keyword">sizeof</span>(__kernel_ulong_t)-<span class="keyword">sizeof</span>(__u32)];	<span class="comment">/* Padding: libc5 uses this.. */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<a href="https://github.com/torvalds/linux/blob/master/mm/page_alloc.c#L4140" target="_blank" rel="external">mm/page_alloc.c</a>中可以看出<code>bufferram</code>的值来至于函数<code>nr_blockdev_pages()</code></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">si_meminfo</span><span class="params">(<span class="keyword">struct</span> sysinfo *val)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">       val-&gt;totalram = totalram_pages;</span><br><span class="line">       val-&gt;sharedram = global_node_page_state(NR_SHMEM);</span><br><span class="line">       val-&gt;freeram = global_page_state(NR_FREE_PAGES);</span><br><span class="line">       val-&gt;bufferram = nr_blockdev_pages();</span><br><span class="line">       val-&gt;totalhigh = totalhigh_pages;</span><br><span class="line">       val-&gt;freehigh = nr_free_highpages();</span><br><span class="line">       val-&gt;mem_unit = PAGE_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在<a href="https://github.com/torvalds/linux/blob/master/fs/block_dev.c#L746" target="_blank" rel="external">fs/block_dev.c</a>中函数<code>nr_blockdev_pages()</code>返回<code>ret</code>。<br>&emsp;可以看到<code>ret</code>是将所有块设备(<code>block device</code>)对应的<code>bd_inode</code>中的<code>i_mapping</code>的<code>nrpages</code>累加。<code>i_mapping</code>是指向<code>address_space</code>的，而<code>nrpages</code>在<code>address_space</code>结构体中的定义是所有者的页的总数。换句话说，<code>free</code>中的<code>buffers</code>是统计所有块设备操作(<code>block IO</code>)产生的page总数。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">nr_blockdev_pages</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">       <span class="keyword">struct</span> block_device *bdev;</span><br><span class="line">       <span class="keyword">long</span> ret = <span class="number">0</span>;</span><br><span class="line">       spin_lock(&amp;bdev_lock);</span><br><span class="line">       list_for_each_entry(bdev, &amp;all_bdevs, bd_list) &#123;</span><br><span class="line">           ret += bdev-&gt;bd_inode-&gt;i_mapping-&gt;nrpages;</span><br><span class="line">       &#125;</span><br><span class="line">       spin_unlock(&amp;bdev_lock);</span><br><span class="line">       <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>若想增加<code>buffers</code>的值，直接对块设备进行操作产生<code>block IO</code>，由此产生的page就会被缓存在<code>buffers</code>中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; cat /dev/sda1 &gt; /dev/null</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h4 id="手动清理缓存"><strong>手动清理缓存</strong></h4><p>&emsp;当缓存占用过多时，可手动对缓存进行清理，主要涉及到<strong><code>/proc/sys/vm/drop_caches</code></strong>值的调整。<br>&emsp;在清理缓存前，最好先同步数据，即将内存中被标记为<code>dirty</code>的数据写入磁盘。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sync</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong><code>/proc/sys/vm/drop_caches</code></strong>默认值为<code>0</code>(不清除缓存)，可选值有<code>1</code>、<code>2</code>和<code>3</code>，不同值所清理的缓存各有不同。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#清理page cache</span></span><br><span class="line">$&gt; <span class="built_in">echo</span> <span class="number">1</span> &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="comment">#清理dentries和inodes缓存</span></span><br><span class="line">$&gt; <span class="built_in">echo</span> <span class="number">2</span> &gt; /proc/sys/vm/drop_caches</span><br><span class="line"><span class="comment">#1&amp;2，清理page cache、dentries和inodes缓存</span></span><br><span class="line">$&gt; <span class="built_in">echo</span> <span class="number">3</span> &gt; /proc/sys/vm/drop_caches</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>page cache</code>前面讲了很多就不再细说。简单说说<code>dentries</code>和<code>inodes</code>。<code>dentry</code>和<code>inode</code>在VFS(Virtual file system)中是比较重要的。</p>
<ul>
<li><strong>inode</strong>：<code>inode</code>是文件对象的元数据，<code>inode</code>包含如下信息(<code>inode</code><strong>不包含</strong>数据和文件名)：<ul>
<li>文件类型</li>
<li>权限<code>rwx</code></li>
<li>属组<code>group id</code></li>
<li>拥有者<code>user id</code></li>
<li>文件字节数<code>size</code></li>
<li>时间戳<code>ctime  mtime atime</code></li>
<li>硬链接数</li>
<li>inode号</li>
<li>设备标识符</li>
</ul>
</li>
<li><strong>dentry</strong>：<code>dentry</code>即目录项，<code>dentry</code>主要作用是<strong>连接文件名和其<code>inode</code></strong>，由于<code>inode</code>中并没有包含文件名及路径信息，因此需要利用<code>dentry</code>构建并维护文件系统的目录树，每个文件的<code>dentry</code>链接到父目录的<code>dentry</code>从而形成了文件系统的结构树。<code>dentry</code>是一个纯粹的<strong>内存结构</strong>，由文件系统在提供文件访问的过程中在<strong>内存中</strong>直接创建。<code>dentry</code>结构体在源码中定义<a href="https://github.com/torvalds/linux/blob/master/include/linux/dcache.h#L83" target="_blank" rel="external">include/linux/dcache.h</a>。 <code>dentry</code>中包含文件名<code>d_name</code>、inode号<code>d_inode</code>、指向父目录的指针<code>d_parent</code>等等信息。<br>&emsp;当需要读取文件<code>/home/mogl/test.txt</code>时，总是从<code>/</code>目录开始查找，每个文件对象对应唯一一个<code>inode</code>，<code>/</code>的<code>inode number == 0</code>。读取<code>/</code>过程中在内存中创建<code>/</code>的<code>dentry</code>并将其缓存(有了缓存访问文件系统时便会非常快捷)。在Linux中目录也是文件，目录文件内容包括<code>目录下的文件名</code>和<code>inode number</code>，根据这些内容找到下级文件和其<code>inode</code></li>
</ul>
<h4 id="调整内核缓存倾向"><strong>调整内核缓存倾向</strong></h4><p>&emsp;可通过调整<strong><code>/proc/sys/vm/vfs_cache_pressure</code></strong>的值来调整内核清理<code>inode</code>和<code>dentry</code>缓存的倾向。<br>&emsp;<code>/proc/sys/vm/vfs_cache_pressure</code>默认值为<code>100</code>，内核根据<code>page cache</code>和<code>swap cache</code>将<code>inode</code>和<code>dentry</code>缓存保持一个合理的比例。</p>
<ul>
<li>降低<code>vfs_cache_pressure</code>(<code>vfs_cache_pressure &lt; 100</code>)会导致内核倾向于<strong>保留</strong>dentry和inode缓存。</li>
<li>增加<code>vfs_cache_pressure</code>(<code>vfs_cache_pressure &gt; 100</code>)，则会导致内核倾向于<strong>清除缓存重新加载</strong>dentries和inodes。</li>
</ul>
<h3 id="/proc/meminfo"><strong>/proc/meminfo</strong></h3><p>&emsp;<strong><code>/proc/meminfo</code></strong>是查看内存使用情况最主要的接口，很多命令诸如<code>free</code>、<code>vmstat</code>等都从这里获取数值的。<code>/proc/meminfo</code>信息很多，看懂其中的信息能让我们对系统内存的使用情况有更清晰的了解。先来看看<code>/proc/meminfo</code>的内容，然后逐个分析说明。<code>/proc/meminfo</code>的内容是通过<a href="https://github.com/torvalds/linux/blob/master/fs/proc/meminfo.c#L45" target="_blank" rel="external">fs/proc/meminfo.c 的 meminfo_proc_show()</a>函数获取的。<br>&emsp;参考文章<a href="https://access.redhat.com/solutions/406773" target="_blank" rel="external">RedHat Knowledgebase</a>、<a href="http://linuxperf.com/?p=142" target="_blank" rel="external">/proc/meminfo之迷</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">MemTotal:        <span class="number">4016668</span> kB</span><br><span class="line">MemFree:         <span class="number">1294904</span> kB</span><br><span class="line">Buffers:           <span class="number">86000</span> kB</span><br><span class="line">Cached:           <span class="number">985016</span> kB</span><br><span class="line">SwapCached:       <span class="number">121488</span> kB</span><br><span class="line">Active:          <span class="number">1580604</span> kB</span><br><span class="line">Inactive:         <span class="number">969872</span> kB</span><br><span class="line">Active(anon):    <span class="number">1234064</span> kB</span><br><span class="line">Inactive(anon):   <span class="number">657144</span> kB</span><br><span class="line">Active(file):     <span class="number">346540</span> kB</span><br><span class="line">Inactive(file):   <span class="number">312728</span> kB</span><br><span class="line">Unevictable:         <span class="number">116</span> kB</span><br><span class="line">Mlocked:             <span class="number">116</span> kB</span><br><span class="line">HighTotal:       <span class="number">3166364</span> kB</span><br><span class="line">HighFree:        <span class="number">1010456</span> kB</span><br><span class="line">LowTotal:         <span class="number">850304</span> kB</span><br><span class="line">LowFree:          <span class="number">284448</span> kB</span><br><span class="line">SwapTotal:       <span class="number">1999868</span> kB</span><br><span class="line">SwapFree:        <span class="number">1745832</span> kB</span><br><span class="line">Dirty:                <span class="number">80</span> kB</span><br><span class="line">Writeback:             <span class="number">0</span> kB</span><br><span class="line">AnonPages:       <span class="number">1392656</span> kB</span><br><span class="line">Mapped:           <span class="number">274004</span> kB</span><br><span class="line">Shmem:            <span class="number">411748</span> kB</span><br><span class="line">Slab:             <span class="number">100572</span> kB</span><br><span class="line">SReclaimable:      <span class="number">74076</span> kB</span><br><span class="line">SUnreclaim:        <span class="number">26496</span> kB</span><br><span class="line">KernelStack:        <span class="number">5824</span> kB</span><br><span class="line">PageTables:        <span class="number">25468</span> kB</span><br><span class="line">NFS_Unstable:          <span class="number">0</span> kB</span><br><span class="line">Bounce:                <span class="number">0</span> kB</span><br><span class="line">WritebackTmp:          <span class="number">0</span> kB</span><br><span class="line">CommitLimit:     <span class="number">4008200</span> kB</span><br><span class="line">Committed_AS:   <span class="number">11152492</span> kB</span><br><span class="line">VmallocTotal:     <span class="number">122880</span> kB</span><br><span class="line">VmallocUsed:       <span class="number">70840</span> kB</span><br><span class="line">VmallocChunk:      <span class="number">25384</span> kB</span><br><span class="line">HardwareCorrupted:     <span class="number">0</span> kB</span><br><span class="line">AnonHugePages:    <span class="number">339968</span> kB</span><br><span class="line">HugePages_Total:       <span class="number">0</span></span><br><span class="line">HugePages_Free:        <span class="number">0</span></span><br><span class="line">HugePages_Rsvd:        <span class="number">0</span></span><br><span class="line">HugePages_Surp:        <span class="number">0</span></span><br><span class="line">Hugepagesize:       <span class="number">2048</span> kB</span><br><span class="line">DirectMap4k:       <span class="number">32760</span> kB</span><br><span class="line">DirectMap2M:      <span class="number">878592</span> kB</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>MemTotal</strong><br>  &emsp;系统内存总量。这里的内存总量并非总的物理内存，而是除去硬件和kernel占用后内核能支配的内存。</li>
<li><strong>MemFree</strong><br>  &emsp;系统完全没有使用的内存。<code>free</code>命令中<code>Mem:</code>行的<code>free</code>(不包含<code>buffers</code>和<code>cached</code>)</li>
<li><strong>Buffers</strong><br>  &emsp;如前面所说<code>buffers</code>是统计所有block device(块设备)的bd_inode的address_space的page总数。即直接操作块设备的<code>block IO</code>会将缓存放到<code>buffers</code>中。</li>
<li><strong>Cached</strong><br>  &emsp;如前面所说<code>cached</code>是<code>VFS</code>的<code>page cache</code>，操作文件的<code>file IO</code>缓存会放到<code>cached</code>中。</li>
<li><strong>SwapCached</strong><br>  &emsp;统计曾经被<code>swap out</code>后现在又被<code>swap in</code>(即同时存在于<code>memory</code>和<code>swapfile</code>中)并且从又被<code>swap in</code>起就一直没有改变(即非<code>dirty</code>)的页(<code>page</code>)。这些页(<code>page</code>)如果需要再次被<code>swap out</code>的话无需进行<code>write</code>操作(回写磁盘)，这样能节省I/O和提升性能。</li>
<li><strong>Active</strong><br>  &emsp;最近经常被使用的内存页，<code>Active</code>的内存页一般不会被<code>swap out</code>或回收。<br>  &emsp;<strong><code>Active</code> = <code>Active(anon) + Active(file)</code></strong></li>
<li><strong>Inactive</strong><br>  &emsp;最近不经常被使用的内存页，<code>Inactive</code>的内存页很可能会被<code>swap out</code>或回收。<br>  &emsp;<strong><code>Inactive</code> = <code>Inactive(anon) + Inactive(file)</code></strong></li>
<li><strong>Active(anon)</strong><br>  &emsp;最近经常被使用的匿名页，<code>Active(anon)</code>的匿名页一般不会被<code>swap out</code>或回收。<br>  &emsp;Linux的内存页大致可分成两种：<ul>
<li><strong>文件页(file pages)</strong>，<code>page cache</code>等文件缓存对于的内存页</li>
<li><strong>匿名页(anonymous pages)</strong>，进程用户模式下的堆栈或使用<code>mmap</code>匿名映射的内存区</li>
</ul>
</li>
<li><strong>Inactive(anon)</strong><br>  &emsp;最近不经常被使用的匿名页。</li>
<li><strong>Active(file)</strong><br>  &emsp;最近经常被使用的文件页。</li>
<li><strong>Inactive(file)</strong><br>  &emsp;最近不经常被使用的文件页。</li>
<li><strong>Unevictable</strong><br>  &emsp;内存中不能被移除的内存页。</li>
<li><strong>Mlocked</strong><br>  &emsp;内存中被<strong><code>mlock()</code></strong>系统调用锁定的内存。<code>Mlocked</code>也是<code>Unevictable</code>的，当<code>Mlocked</code>增加时，<code>Unevictable</code>跟着增加而<code>Active/Inactive</code>则减小。</li>
<li><strong>HighTotal</strong><br>  &emsp;所有可用的高位内存[<code>ZONE_HIGHMEM(896MB~结束)</code>]。在x86结构中，物理内存分三种区域类型：ZONE_DMA(内存开始的16MB)、ZONE_NORMAL(16MB~896MB)、ZONE_HIGHMEM(896MB~结束)。该区域主要用于用户空间的程序或缓存页，该区域不能直接映射到内核空间。<br>  &emsp;<code>HighTotal</code>、<code>HighFree</code>、<code>LowTotal</code>和<code>LowFree</code>这几个参数在CentOS6已经被除去。</li>
<li><strong>SwapTotal</strong><br>  &emsp;总swap空间大小。</li>
<li><strong>SwapFree</strong><br>  &emsp;可用swap空间大小。</li>
<li><strong>Dirty</strong><br>  &emsp;内存中被标记为<code>dirty</code>的数据，这些数据需要被写回到磁盘中。</li>
<li><strong>Writeback</strong><br>  &emsp;正准备回写磁盘的内存缓存页。</li>
<li><strong>AnonPages</strong><br>  &emsp;统计内存中匿名页(anonymous pages)大小。<ul>
<li>VFS的所有page cache都属于文件页(file pages)，都不是匿名页(anonymous pages)。</li>
<li>匿名页(anonymous pages)是和用户进程共生的。一旦进程退出，则匿名页(anonymous pages)也随之释放，并不会像文件页(file pages)那样还缓存在内存中。</li>
</ul>
</li>
<li><strong>Mapped</strong><br>  &emsp;统计被mmaped的内存大小。<br>  &emsp;在内存的<code>file pages</code>和<code>anonymous pages</code>中，<code>page cache</code>属于<code>file pages</code>。<code>page cache</code>中的缓存页可能已经不被进程使用，但仍以缓存被保留在内存中。而另一些<code>page cache</code>的缓存页则正在被进程使用，如libraries或mmap的文件等，这些内存文件页称之为<code>mmaped</code>。<br>  &emsp;因为<code>shared memory</code>和<code>tmpfs</code>属于<code>page cache</code>，故<code>mmaped</code>中包含：<code>share memory(attached)</code>和<code>tmpfs(mapped)</code>。结合下面的<strong><code>Shmem</code></strong>一起看。</li>
<li><strong>Shmem</strong><br>  &emsp;共享内存(<strong><code>shared memory</code></strong>)的内存大小。<code>Shmem</code>统计的是实际分配使用的内存大小，而非申请的内存大小。<br>  &emsp;<code>shared memory</code>的内存页会被统计进<code>Cached(page cache)</code>和<code>Mapped(attached)</code><br>  &emsp;<code>shared memory</code>包括：<ul>
<li>SysV shared memory(<code>shmget</code>)</li>
<li>POSIX shared memory(<code>shm_open</code>)</li>
<li>shared anonymous mmap(<code>mmap</code>)</li>
</ul>
</li>
<li><strong>Slab</strong> 、<strong>SReclaimable</strong> 、<strong>SUnreclaim</strong><br>  &emsp;<strong><code>Slab</code></strong> == <strong><code>SReclaimable</code></strong>a + <strong><code>SUnreclaim</code></strong><br>  &emsp;<strong><code>SReclaimable</code></strong>为在内存有压力时可回收的部分，<strong><code>SUnreclaim</code></strong>为在即使在内存有压力时都不可回收的部分。<br>  &emsp;<strong><code>Slab</code></strong>是统计内核数据结构缓存大小(<code>dentry</code>&amp;<code>inode</code>)，这个和上面说的<code>/proc/sys/vm/vfs_cache_pressure</code>和<code>/proc/sys/vm/drop_caches</code>相关内容联系起来。<br>  &emsp;若想查看slab缓存更详细内容，可使用<strong><code>slabtop</code></strong>命令。</li>
<li><strong>KernelStack</strong><br>  &emsp;KernelStack(内核栈)是进程进入内核态(syscall/trap/exception)后使用的，其与用户栈是分开的，用户态时是无法使用内核栈的。<br>  &emsp;KernelStack(内核栈)的大小是固定的，从<code>2.6.32</code>版本后默认是<strong><code>16K</code></strong>，此前一般为<code>4K</code>或<code>8K</code>。<br>  &emsp;KernelStack(内核栈)是常驻内存且不可被回收的。</li>
<li><strong>PageTables</strong><br>  &emsp;<code>page table</code>用于将内存的虚拟地址映射成物理地址，<code>PageTables</code>统计<code>page table</code>所占内存的大小。<br>  &emsp;内存地址分配越多<code>page table</code>也会随之增大；若多个进程都命中(<code>attached</code>)相同的共享内存段，<code>PageTables</code>的值会变得比较大。</li>
<li><strong>NFS_Unstable</strong><br>  &emsp;<strong><code>NFS_Unstable</code></strong>统计已发给NFS Server但尚未写入磁盘的缓存页的大小。</li>
<li><strong>Bounce</strong><br>  &emsp;<strong><code>Bounce</code></strong>是统计用于块设备<code>bounce buffers</code>的内存大小。<br>  &emsp;某些设备只能访问低端内存，当I/O请求需要访问高端内存时，为了解决不能访问高端内存的问题，内核会在低端内存中分配一个临时buffer用于将高端内存的数据拷贝到此buffer区域中，此成为<code>bounce buffers</code>。</li>
<li><strong>WritebackTmp</strong><br>  &emsp;统计被<strong>FUSE</strong>用作临时回写缓存(<code>temporary writeback buffers</code>)的内存大小。</li>
<li><strong>CommitLimit</strong>、<strong>Committed_AS</strong><ul>
<li><strong>overcommit机制</strong><br>  &emsp;要弄清楚<code>CommitLimit</code>和<code>Committed_AS</code>，需要先解释一下Linux的<strong>overcommit</strong>机制——Linux允许进程申请超过当前实际可用大小的内存空间。但允许申请并不代表就实际分配如此大小的内存给进程，Linux是在进程使用内存时才实际将内存分配给进程。<code>commit</code>对应进程申请内存。对于<code>overcommit</code>在<code>2.6</code>内核版本后的Linux系统可用通过修改<strong><code>/proc/sys/vm/overcommit_memory</code></strong>来调整内存overcommit的行为，<code>/proc/sys/vm/overcommit_memory</code>允许使用<code>0</code>、<code>1</code>和<code>2</code>三个值。<ul>
<li><code>0</code>：<strong>Heuristic overcommit handling</strong>，默认值。允许overcommit，但内存会根据算法预测申请内存的行为是否合理，拒绝掉不合理的overcommit申请。</li>
<li><code>1</code>：<strong>Always overcommit</strong>，允许overcommit，只要进程申请内存就通过申请。</li>
<li><code>2</code>：<strong> Don’t overcommit</strong>，禁止overcommit。</li>
</ul>
</li>
<li><strong>OOM killer机制</strong><br>  &emsp;为了防止内存的overcommit机制导致内存不足，Linux设计了<strong>OOM killer</strong>机制。当Linux系统发现内存不足时，会比较所有进程的<strong><code>oom_score</code></strong><code>(/proc/&lt;pid&gt;/oom_score)</code>，通过杀死<code>oom_score</code>数值大的进程来释放内存。若要手动调整某个进程的<code>oom_score</code>，则需要通过修改<strong><code>oom_score_adj</code></strong>来实现(<code>echo -20 &gt; /proc/&lt;pid&gt;/oom_score_ad</code>)。</li>
<li><strong>CommitLimit</strong><br>  &emsp;<strong><code>CommitLimit</code></strong>是内存overcommit的判断值，申请的内存总大小超过<code>CommitLimit</code>的值即为overcommit。<br>  &emsp;<strong><code>CommitLimit</code></strong>是通过计算得到的，计算公式——<strong><code>CommitLimit = RAM * (overcommit_ratio/100) + swap</code></strong>。<code>overcommit_ratio</code>默认值为<code>50</code>，表示物理内存大小的50%，可通过<code>/proc/sys/vm/overcommit_ratio</code>调整。<br>  &emsp;若使用了<strong>huge pages</strong>(见下一个参数)则需要减去huage pages的大小，即计算公式——<strong><code>CommitLimit = (RAM - huge_pages) * (overcommit/100) + swap</code></strong></li>
<li><strong>Committed_AS</strong><br>  &emsp;表示所有进程已申请的内存总数。若<code>Committed_AS</code>超过<code>CommitLimit</code>则表示overcommit。</li>
</ul>
</li>
<li><strong>VmallocTotal</strong><br>  &emsp;<code>vmalloc</code>是以字节为单位分配虚拟地址连续的内存块。<br>  &emsp;<code>VmallocTotal</code>是表示可以<code>vmalloc</code>的内存大小。</li>
<li><strong>VmallocUsed</strong><br>  &emsp;已被使用的<code>vmalloc</code>虚拟内存大小。</li>
<li><strong>VmallocChunk</strong><br>  &emsp;统计可用的连续虚拟内存大小。</li>
<li><strong>HardwareCorrupted</strong><br>  &emsp;统计物理故障内存大小。当系统检测到内存的物理页面故障时，会将故障的内存页删除并统计到<code>HardwareCorrupted</code>。</li>
<li><strong>AnonHugePages</strong><br>  &emsp;<strong>AnonHugePages</strong>统计的是<strong>THP(Transparent HugePages)透明大页</strong>，<strong>THP(Transparent HugePages)</strong>和接下来的<strong>HugePages</strong>不太一样，先看看<strong>THP(Transparent HugePages)</strong>。<br>  &emsp;<strong>THP(Transparent HugePages)</strong>是使管理HugePage变得自动化而创造的。系统中存在着<strong><code>khugepaged</code></strong>进程，此进程会一直扫描所有进程使用的内存并视情况将<code>4k page</code>变成<code>huge page</code>。<br>  &emsp;<strong>THP(Transparent HugePages)</strong>是在系统运行时<strong>动态</strong>分配内存的，而<strong>HugePage</strong>是在系统启动时<strong>预先</strong>固定分配并在系统运行时不在改变。<br>  &emsp;使用<strong>THP(Transparent HugePages)</strong>可能会到来一些问题，有时候会需要将其关闭(默认开启)，关闭<strong>THP(Transparent HugePages)</strong>：<ul>
<li><code>echo never &gt; /sys/kernel/mm/redhat_transparent_hugepage/enabled</code></li>
<li><code>echo never &gt; /sys/kernel/mm/redhat_transparent_hugepage/defrag</code></li>
</ul>
</li>
<li><strong>HugePages_Total</strong>、<strong>HugePages_Free</strong>、<strong>HugePages_Rsvd</strong>、<strong>HugePages_Surp</strong>、<strong>Hugepagesize</strong><br>  &emsp;<strong>HugePage</strong>称之为大页。Linux内存的标准页大小(page size)为<strong><code>4K</code></strong>而<strong>HugePage</strong>常见大小(page size)为<strong><code>2M</code></strong>。<br>  &emsp;解释<strong>HugePage</strong>前，需要先了解<strong>TLB(Translation Lookaside Buffer)</strong>。Linux系统中进程使用内存地址为<strong>虚拟地址(Virtual Address)</strong>，但数据是要通过内存的<strong>物理地址(Physical Address)</strong>才能访问的。于是这就涉及到<strong>虚拟地址(Virtual Address)</strong>转<strong>物理地址(Physical Address)</strong>，而<strong>page table</strong>是专门用于虚拟地址转物理地址的(使用HugePage可减小<code>PageTables</code>大小)。对于使用大量内存的进程来说，查找<strong>page table</strong>太慢，于是设置了<strong>TLB(Translation Lookaside Buffer)</strong>，用于缓存内存地址映射关系以加快映射。增大<code>page size</code>，使得相同大小的TLB(Translation Lookaside Buffer)能覆盖到更多的内存，从而提高TLB(Translation Lookaside Buffer)的命中率，从而提高内存地址转换的速度，这是<strong>HugePage</strong>的一个主要作用。<br>  &emsp;正如上面所说<strong>HugePage</strong>是在系统启动时就预先固定分配好的，并且<strong>HugePage</strong>会常驻内存中。也就是说如果<code>4G</code>大小的内存的系统设置了<code>1G</code>大小的<strong>HugePage</strong>，那么在系统启动后，系统的可用内存则只有<code>3G</code>。系统启动后可以通过调整<strong><code>/proc/sys/vm/nr_hugepages</code></strong>参数值来调整<strong>HugePage</strong>的大小。<ul>
<li><strong>HugePages_Total</strong>：分配给<strong>huge page</strong>的内存页面数目，<strong><code>HugePageSize = HugePages_Total * Hugepagesize</code></strong></li>
<li><strong>HugePages_Free</strong>：系统中从未被使用的<strong>huge page</strong>内存页面数目。</li>
<li><strong>HugePages_Rsvd</strong>：系统中被分配但仍未被使用的<strong>huge page</strong>内存页面数目。这里需要注意<strong>HugePages_Free</strong>和<strong>HugePages_Rsvd</strong>，当进程申请HugePage时，会预订一块大页内存，此时<strong>HugePages_Rsvd</strong>会增加但<strong>HugePages_Free</strong>不会减少。只有当进行写入数据到预订的大页内存时，<strong>HugePages_Free</strong>才会减少，而此时<strong>HugePages_Rsvd</strong>也会减少。</li>
<li><strong>HugePages_Surp</strong>：超过系统设定的常驻HugePages内存页数目的内存页面数目。</li>
<li><strong>Hugepagesize</strong>：单个huge page的内存页面大小，通常为<code>2048Kb</code></li>
</ul>
</li>
<li><strong>DirectMap4k</strong>、<strong>DirectMap2M</strong><br>  &emsp;<strong>DirectMap4k</strong>表示TLB(Translation Lookaside Buffer)映射为<code>4K</code>的内存数目，<strong>DirectMap2M</strong>表示TLB(Translation Lookaside Buffer)映射为<code>2M</code>的内存数目。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;最近遇到几个有关Linux内存的问题，于是稍微整理了一下有关Linux内存方面的内容稍作记录。</p>
<h3 id="free_-m"><strong>free -m</strong></h3><p>&emsp;一般看内存最直接就是输入<code>free -]]>
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CDH5.7部署及Hadoop生态圈简录]]></title>
    <link href="http://yoursite.com/2016/09/19/cdh-hadoop/"/>
    <id>http://yoursite.com/2016/09/19/cdh-hadoop/</id>
    <published>2016-09-19T12:10:33.000Z</published>
    <updated>2017-03-15T14:29:09.000Z</updated>
    <content type="html"><![CDATA[<h2 id="基础环境_&amp;_软件包"><strong>基础环境 &amp; 软件包</strong></h2><ul>
<li>CentOS6.8 64bit</li>
<li>Cloudera Manager5.7.0</li>
<li>jdk1.7.0_75</li>
<li>MySQL5.6</li>
<li><a href="http://archive.cloudera.com/cm5/cm/5/cloudera-manager-el6-cm5.7.0_x86_64.tar.gz" target="_blank" rel="external">cloudera-manager-el6-cm5.7.0</a></li>
<li><a href="http://archive.cloudera.com/cdh5/parcels/5.7.0/CDH-5.7.0-1.cdh5.7.0.p0.45-el6.parcel" target="_blank" rel="external">CDH-5.7.0-1.cdh5.7.0.p0.45-el6.parcel</a></li>
<li><a href="http://archive.cloudera.com/cdh5/parcels/5.7.0/CDH-5.7.0-1.cdh5.7.0.p0.45-el6.parcel.sha1" target="_blank" rel="external">CDH-5.7.0-1.cdh5.7.0.p0.45-el6.parcel.sha1</a></li>
<li><a href="http://archive.cloudera.com/cdh5/parcels/5.7.0/manifest.json" target="_blank" rel="external">manifest.json</a></li>
<li><a href="http://dev.mysql.com/downloads/connector/j/" target="_blank" rel="external">mysql-connector-java-5.1.38-bin.jar</a></li>
</ul>
<h2 id="系统环境设置"><strong>系统环境设置</strong></h2><h3 id="配置JDK"><strong>配置JDK</strong></h3><p>&emsp;下载jdk，环境变量配置<strong><code>/etc/profile</code></strong>，所有节点均需要配置。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/<span class="tag">dt</span><span class="class">.jar</span>:<span class="variable">$JAVA_HOME</span>/lib/tools<span class="class">.jar</span></span><br><span class="line">export JAVA_HOME</span><br><span class="line">export PATH</span><br><span class="line">export CLASSPATH</span><br></pre></td></tr></table></figure></p>
<h3 id="配置hostname"><strong>配置hostname</strong></h3><ul>
<li><p><strong><code>/etc/sysconfig/network</code></strong></p>
  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">NETWORKING=<span class="value"><span class="keyword">yes</span></span></span></span><br><span class="line"><span class="setting">HOSTNAME=<span class="value">master-node</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>/etc/hosts</code></strong><br>  &emsp;所有节点的IP及hostname</p>
</li>
</ul>
<h3 id="ssh免密"><strong>ssh免密</strong></h3><p>&emsp;主节点ssh免密登录所有节点<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -P <span class="string">''</span> -f ~<span class="regexp">/.ssh/i</span>d_rsa</span><br><span class="line">ssh-<span class="keyword">copy</span>-id all_nodes</span><br></pre></td></tr></table></figure></p>
<h3 id="关闭iptables/selinux"><strong>关闭iptables/selinux</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> /etc/init.d/iptables stop</span><br><span class="line"><span class="variable">$&gt;</span> chkconfig iptables off</span><br><span class="line"><span class="comment">#临时关闭selinux</span></span><br><span class="line"><span class="variable">$&gt;</span> setenforce <span class="number">0</span></span><br><span class="line"><span class="comment">#永久关闭selinux</span></span><br><span class="line"><span class="variable">$&gt;</span> vim /etc/selinux/config</span><br><span class="line"><span class="constant">SELINUX=</span>disabled</span><br></pre></td></tr></table></figure>
<h3 id="NTP配置"><strong>NTP配置</strong></h3><h4 id="主节点"><strong>主节点</strong></h4><ul>
<li><p><code>/etc/ntp.conf</code></p>
  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">driftfile <span class="regexp">/var/</span>lib<span class="regexp">/ntp/</span>drift</span><br><span class="line">restrict <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">restrict -<span class="number">6</span> ::<span class="number">1</span></span><br><span class="line">restrict <span class="keyword">default</span> nomodify notrap</span><br><span class="line">server pool.ntp.org prefer</span><br><span class="line">includefile <span class="regexp">/etc/</span>ntp<span class="regexp">/crypto/</span>pw</span><br><span class="line">keys <span class="regexp">/etc/</span>ntp<span class="regexp">/keys</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动NTP</p>
  <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; /etc/init.d/ntpd start</span><br><span class="line">$&gt; chkconfig ntpd <span class="function_start"><span class="keyword">on</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="从节点"><strong>从节点</strong></h4><ul>
<li><p><code>/etc/ntp.conf</code></p>
  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">driftfile <span class="regexp">/var/</span>lib<span class="regexp">/ntp/</span>drift</span><br><span class="line">restrict <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line">restrict -<span class="number">6</span> ::<span class="number">1</span></span><br><span class="line">restrict <span class="keyword">default</span> kod nomodify notrap nopeer noquery</span><br><span class="line">restrict -<span class="number">6</span> <span class="keyword">default</span> kod nomodify notrapnopeer noquery</span><br><span class="line">server master-node</span><br><span class="line">includefile <span class="regexp">/etc/</span>ntp<span class="regexp">/crypto/</span>pw</span><br><span class="line">keys <span class="regexp">/etc/</span>ntp<span class="regexp">/keys</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动NTP &amp; 同步时间</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> ntpdate -u master-node</span><br><span class="line"><span class="variable">$&gt;</span> /etc/init.d/ntpd start</span><br><span class="line"><span class="variable">$&gt;</span> chkconfig ntpd on</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="优化项"><strong>优化项</strong></h3><p>&emsp;安装集群时会检测基础环境，需要对以下两项进行优化设置并添加到开机启动<code>/etc/rc.local</code><br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; echo <span class="number">1</span> &gt; /<span class="keyword">proc</span>/sys/vm/swappiness</span><br><span class="line">$&gt; echo never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br></pre></td></tr></table></figure></p>
<h2 id="主节点安装配置MySQL"><strong>主节点安装配置MySQL</strong></h2><p>&emsp;MySQL只需要在主节点(cloudera-scm-server)上安装即可</p>
<h3 id="安装MySQL"><strong>安装MySQL</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> wget <span class="symbol">http:</span>/<span class="regexp">/repo.mysql.com/mysql</span>-community-release-el6-<span class="number">5</span>.noarch.rpm</span><br><span class="line"><span class="variable">$&gt;</span> rpm -ivh mysql-community-release-el6-<span class="number">5</span>.noarch.rpm</span><br><span class="line"><span class="variable">$&gt;</span> yum install mysql-server</span><br></pre></td></tr></table></figure>
<h3 id="配置MySQL"><strong>配置MySQL</strong></h3><ul>
<li><p><code>/etc/my.cnf</code><br>  &emsp;由于要将数据全部都存放在大容量的/data分区下，所以需要对MySQL做些简单配置</p>
  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[mysqld]</span></span><br><span class="line"><span class="setting">datadir=<span class="value">/data/mysql</span></span></span><br><span class="line"><span class="setting">socket=<span class="value">/var/lib/mysql/mysql.sock</span></span></span><br><span class="line"><span class="setting">character-set-server=<span class="value">utf8</span></span></span><br><span class="line"><span class="setting">log-error=<span class="value">/data/log/mysql/mysqld.log</span></span></span><br><span class="line"><span class="setting">pid-file=<span class="value">/var/run/mysqld/mysqld.pid</span></span></span><br><span class="line"><span class="setting">symbolic-links=<span class="value"><span class="number">0</span></span></span></span><br><span class="line"><span class="setting">sql_mode=<span class="value">NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span></span></span><br><span class="line"><span class="title">[mysqld_safe]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>启动</p>
  <figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> chkconfig mysqld on</span><br><span class="line"><span class="variable">$&gt;</span> mkdir -p /data/<span class="keyword">log</span>/mysql</span><br><span class="line"><span class="variable">$&gt;</span> /etc/init.d/mysqld start</span><br><span class="line"><span class="variable">$&gt;</span> mysqladmin -u root password <span class="string">'your_root_password'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>建表及授权</p>
  <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mysql -uroot -p</span><br><span class="line">mysql&gt; <span class="keyword">create</span> database hive <span class="keyword">DEFAULT</span> CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">mysql&gt; <span class="keyword">create</span> database amon <span class="keyword">DEFAULT</span> CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">mysql&gt; <span class="keyword">create</span> database oozie <span class="keyword">DEFAULT</span> CHARSET utf8 COLLATE utf8_general_ci;</span><br><span class="line">mysql&gt; grant all privileges <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'master-node'</span> identified <span class="keyword">by</span> <span class="string">'your_root_password'</span> <span class="keyword">with</span> grant option;</span><br><span class="line">mysql&gt; flush privileges;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装Cloudera_Manager_Server"><strong>安装Cloudera Manager Server</strong></h2><p>&emsp;在主节点上安装Cloudera Manager Server</p>
<ul>
<li><p>创建cloudera-scm用户</p>
  <figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd --<span class="literal">system</span> --<span class="literal">home</span>=/opt/cm-<span class="number">5.7</span>.<span class="number">0</span>/run/cloudera-scm-server/ --no-create-<span class="literal">home</span> --<span class="literal">shell</span>=/bin/<span class="keyword">false</span> --comment <span class="string">"Cloudera SCM User"</span> cloudera-scm</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装配置Cloudera Manager Server<br>  &emsp;由于要将数据都放到/data分区，所以才需要创建软连接，否则不需要。</p>
  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; tar -zxf cloudera-manager-el6-cm5.<span class="number">7.0</span>_x86_64.tar.gz</span><br><span class="line">$&gt; <span class="keyword">cp</span> -<span class="keyword">a</span> <span class="keyword">cm</span>-<span class="number">5.7</span>.<span class="number">0</span>/ /data</span><br><span class="line">$&gt; <span class="keyword">cp</span> -<span class="keyword">a</span> cloudera /data</span><br><span class="line">$&gt; <span class="keyword">ln</span> -<span class="keyword">s</span> /data/<span class="keyword">cm</span>-<span class="number">5.7</span>.<span class="number">0</span> /<span class="keyword">opt</span>/<span class="keyword">cm</span>-<span class="number">5.7</span>.<span class="number">0</span></span><br><span class="line">$&gt; <span class="keyword">ln</span> -<span class="keyword">s</span> /data/cloudera /<span class="keyword">opt</span>/cloudera</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化Cloudera Manager Server数据库</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; cp mysql-connector-java-<span class="number">5.1</span>.<span class="number">38</span>-bin<span class="class">.jar</span> /opt/cm-<span class="number">5.7</span>.<span class="number">0</span>/share/cmf/lib/mysql-connector-java<span class="class">.jar</span></span><br><span class="line">$&gt; mkdir -<span class="tag">p</span> /usr/share/java/ &amp;&amp; cp mysql-connector-java-<span class="number">5.1</span>.<span class="number">38</span>-bin<span class="class">.jar</span>  /usr/share/java/</span><br><span class="line">$&gt; /opt/cm-<span class="number">5.7</span>.<span class="number">0</span>/share/cmf/schema/scm_prepare_database<span class="class">.sh</span> mysql cm -hmaster-node -uroot -<span class="tag">p</span> --scm-host master-node scm scm scm</span><br></pre></td></tr></table></figure>
</li>
<li><p>离线Parcels<br>  &emsp;在集群安装过程中需要下载parcels，由于国内网络原因需要先离线下载文件，再将以下文件放到<strong><code>/opt/cloudera/parcel-repo/</code></strong></p>
<ul>
<li>CDH-5.7.0-1.cdh5.7.0.p0.45-el6.parcel</li>
<li>CDH-5.7.0-1.cdh5.7.0.p0.45-el6.parcel.sha1    (必须将下载的原文件<code>CDH-5.7.0-1.cdh5.7.0.p0.45-el6.parcel.sha1</code>重命名成<code>CDH-5.7.0-1.cdh5.7.0.p0.45-el6.parcel.sha</code>，否则会重新下载)</li>
<li>manifest.json</li>
</ul>
</li>
<li><p>启动Cloudera Manager Server</p>
  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="regexp">/opt/</span>cm-<span class="number">5.7</span>.<span class="number">0</span><span class="regexp">/etc/i</span>nit.d<span class="regexp">/cloudera-scm-server start</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装Cloudera_Manager_Agent"><strong>安装Cloudera Manager Agent</strong></h2><p>&emsp;Cloudera Manager Agent在所有节点都需要安装，包括主节点。</p>
<ul>
<li><p>创建cloudera-scm用户</p>
  <figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; useradd --<span class="literal">system</span> --<span class="literal">home</span>=/opt/cm-<span class="number">5.7</span>.<span class="number">0</span>/run/cloudera-scm-server/ --no-create-<span class="literal">home</span> --<span class="literal">shell</span>=/bin/<span class="keyword">false</span> --comment <span class="string">"Cloudera SCM User"</span> cloudera-scm</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置cloudera-scm-agent<br>  &emsp;修改cm-5.7.0目录下文件<strong><code>cm-5.7.0/etc/cloudera-scm-agent/config.ini</code></strong>，将server_host修改成cloudera manager server地址<br>  &emsp;可自定义<code>log_file</code>路径</p>
  <figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server_host<span class="subst">=</span>master<span class="attribute">-node</span></span><br><span class="line">log_file<span class="subst">=</span>/<span class="built_in">data</span>/cm<span class="subst">-</span><span class="number">5.7</span><span class="number">.0</span>/<span class="keyword">log</span>/cloudera<span class="attribute">-scm</span><span class="attribute">-agent</span>/cloudera<span class="attribute">-scm</span><span class="attribute">-agent</span><span class="built_in">.</span><span class="keyword">log</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同步cloudera-scm-agent<br>  &emsp;将修改好配置的<strong><code>cm-5.7.0</code></strong>文件夹同步到剩余所有节点。<br>  &emsp;这里需要特别注意一点：<strong>绝对不能先启动cloudera-scm-agent再同步文件夹</strong>。因为<code>cloudera-scm-agent</code>启动后会在<code>/opt/cm-5.7.0/lib/cloudera-scm-agent/</code>目录下生成<code>uuid</code>，如果启动agent后再同步文件夹则会使得集群所有agent的<code>uuid</code>都相同，而<code>uuid</code>是用来标识集群中的每个节点的，必须唯一。假若先启动后同步的话，想要修复问题则需要删除<code>/opt/cm-5.7.0/lib/cloudera-scm-agent/</code>目录下所有文件，若问题仍旧没有修复则需要清空主节点Cloudera Manager的数据库。</p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; scp -r <span class="regexp">/opt/</span>cm-<span class="number">5.7</span><span class="number">.0</span> root<span class="annotation">@bj</span>1-<span class="number">200</span>-<span class="string">centos12:</span><span class="regexp">/data/</span></span><br><span class="line">$&gt; ln -s <span class="regexp">/data/</span>cm-<span class="number">5.7</span><span class="number">.0</span> <span class="regexp">/opt/</span>cm-<span class="number">5.7</span><span class="number">.0</span></span><br><span class="line">$&gt; ln -s <span class="regexp">/data/</span>cloudera <span class="regexp">/opt/</span>cloudera</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动cloudera-scm-agent<br>  &emsp;cloudera-scm-agent有个bug，pid会放在<code>/opt/cm-5.7.0/run/cloudera-scm-agent/</code>目录下，但这个目录不会自动创建，于是启动时会报错，故需要手动创建该目录。</p>
  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="built_in">mkdir</span> -<span class="keyword">p</span> /<span class="keyword">opt</span>/<span class="keyword">cm</span>-<span class="number">5.7</span>.<span class="number">0</span>/run/cloudera-scm-agent/</span><br><span class="line">$&gt; /<span class="keyword">opt</span>/<span class="keyword">cm</span>-<span class="number">5.7</span>.<span class="number">0</span>/etc/init.<span class="keyword">d</span>/cloudera-scm-agent start</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="安装CDH5-7"><strong>安装CDH5.7</strong></h2><p>&emsp;当<code>cloudera-scm-server</code>和<code>cloudera-scm-agent</code>都成功启动后就可以通过Cloudera Manager的Web界面安装CDH5.7及相关服务。直接访问<strong><code>http://master-node:7180/cmf/login</code></strong>，默认初始用户及密码是：<code>admin/admin</code>。由于安装过程截图太多懒得一张张放上来了，只要安装提示一步步安装。<br>&emsp;选择安装其他服务时，若服务需要连接MySQL则可能需要将JDBC驱动文件放到相应服务的目录下。比如安装Hive，如果日志中提示连接MySQL错误则JDBC驱动文件放到<code>/opt/cloudera/parcels/CDH-5.7.0-1.cdh5.7.0.p0.45/lib/hive/lib/</code>目录下。<br>&emsp;如果安装Impala的话，需要在daemon节点安装perl：<code>yum install -y perl</code><br>&emsp;如果安装Hue的话，需要安装<code>python-lxml</code>：<code>yum install -y python-lxml</code><br>&emsp;如果启动某些服务提示<code>libxslt.so.1</code>错误，需要安装<code>yum install -y libxml2 libxslt</code><br>&emsp;在安装不同服务时可能会遇到各种各样的问题，需要到<code>/var/log/&lt;server_name&gt;</code>下查看日志逐个排查。</p>
<h2 id="Hadoop生态圈简介"><strong>Hadoop生态圈简介</strong></h2><p>&emsp;&emsp;围绕Hadoop有一系列的服务和组件简单记录一下它们的用途。我所使用的是Cloudera的CDH集群，基本都是Cloudera的生态，故Ambari涉及的都没怎么了解。</p>
<ul>
<li><p><strong>Hadoop</strong><br>  &emsp;Hadoop是Apache开发的一套分布式软件框架，目前是<code>2.x</code>版本，主要有以下三部分构成：</p>
<ul>
<li><strong>HDFS</strong><br>  &emsp;HDFS(Hadoop分布式文件系统)是Hadoop的分布式存储系统，HDFS主要又由以下三个部分组成：<ul>
<li><em>NameNode</em><br> &emsp;管理文件系统的元数据(metadata)，元数据(metadata)包括命名空间(namespace)、块信息等。</li>
<li><em>Secondary NameNode</em><br> &emsp;<strong>Secondary NameNode不是NameNode的备份</strong>。需要弄明白Secondary NameNode的作用先了解NameNode是如何保存元数据(metadata)的。<br> &emsp;NameNode会维护<strong>fsimage</strong>和<strong>edits</strong>两个文件，fsimage是NameNode启动时对整个文件系统的快照，edits是NameNode启动后文件系统改动的记录(类似MySQL的binlog)。当NameNode重启时才将edits里的内容合并到fsimage中得到整个文件系统最新的快照。这样就会有个问题，当NameNode长时间没有重启时，edits文件会变得非常大，要将edits中的内容合并到fsimage将会耗费很多时间。于是有了Secondary NameNode来解决此类问题。<br> &emsp;Secondary NameNode定期向NameNode获取edits文件的内容并更新到自己维护的fsimage中，合并完后再将最新的fsimage复制给NameNode。这样NameNode重启是用的fsimage就会是最新的。</li>
<li><em>DataNode</em><br>  &emsp;存储数据</li>
</ul>
</li>
<li><strong>MapReduce</strong><br>  &emsp;分布式计算框架</li>
<li><strong>Yarn</strong><br>  &emsp;新一代Hadoop引入的资源管理器，新一代的MapReduce(MRv2)。主要解决上一代Hadoop扩展性问题。</li>
</ul>
</li>
<li><p><strong>Spark</strong><br>  &emsp;Spark是另一个分布式计算框架，基于内存计算所以能提供更快的数据处理速度，由Scala语言编写提供更通用的API。其实Spark与MapReduce对应，都是计算框架。此外还有Flink和流计算框架Storm等等。不同的计算框架各有优缺点，根据不同场景选择不同的计算框架。</p>
</li>
<li><p><strong>Hive</strong><br>  &emsp;Hive是Hadoop的数据仓库系统。使用HQL(HiveQL，类似SQL)的查询语言，将SQL转化为MapReduce任务在Hadoop上执行。其实就是MapReduce程序写起来麻烦，于是为了简化和方便查询开发出能使用类似SQL进行查询的组件，这就是Hive。</p>
</li>
<li><p><strong>Pig</strong><br>  &emsp;Pig是基于Hadoop的数据分析平台。如果说Hive是SQL在Hadoop上的实现，那么Pig就是脚本方式的实现。Pig定义一种数据流语言——Pig Latin，将脚本语言转化为MapReduce任务在Hadoop上执行。</p>
</li>
<li><p><strong>Hbase</strong><br>  &emsp;分布式、可伸缩的面向列的数据库，支持随机、实时读写访问，来源与Google的BigTable。个人感觉如果应要和MySQL数据库对应的话，Hbase算是类似于NoSQL的KV数据库吧。Hbase提供Web UI：<code>http://Hbase_master:60010</code></p>
</li>
<li><p><strong>Phoenix</strong><br>  &emsp;Phoenix简单说就是SQL On Hbase，使SQL查询转换成Hbase的查询。</p>
</li>
<li><p><strong>Impala</strong><br>  &emsp;Impala是Cloudera公司开放，提供批量和实时查询的工具。Impala不需要使用到MapReduce计算模型，依赖Hive并可直接对HDFS和Hbase中的数据进行SQL(HiveSQL)查询，查询是速度是Hive的数倍。之所以会有Impala是因为Hive这种需要将SQL转成MapReduce的方式查询速度实在太慢，改用直接使用SQL(HiveSQL)在HDFS/Hbase中进行查询以提高速度。</p>
</li>
<li><p><strong>Oozie</strong><br>  &emsp;Oozie是一个工作流调度管理工具，协调数据接收、存储、转换和分析等工作。当需要将多个MapReduce任务连接在一起完成整个工作时，就需要使用到Oozie来协调多个MapReduce任务。</p>
</li>
<li><p><strong>Hue</strong><br>  &emsp;Hue是Cloudera开发的Web UI工具，用Pyhton的Django框架编写的。<code>Hue UI</code>、<code>Hue Server</code>和<code>Hue DB</code>三部分组成，<code>http://Hue_Server:8000</code></p>
</li>
<li><p><strong>Solr</strong><br>  &emsp;Solr是个企业级搜索引擎。</p>
</li>
<li><p><strong>Sqoop</strong><br>  &emsp;Sqoop是数据迁移工具，全称是Sql-To-Hadoop，主要用于传统关系型数据库(MySQL/Oracle/Postgres)和Hadoop之间的数据转换。</p>
</li>
<li><p><strong>Mahout</strong><br>  &emsp;Hadoop的机器学习库。</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="基础环境_&amp;_软件包"><strong>基础环境 &amp; 软件包</strong></h2><ul>
<li>CentOS6.8 64bit</li>
<li>Cloudera Manager5.7.0</li>
<li>jdk1.7.0_75</li]]>
    </summary>
    
      <category term="CDH" scheme="http://yoursite.com/tags/CDH/"/>
    
      <category term="Bigdata" scheme="http://yoursite.com/categories/Bigdata/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python库札记]]></title>
    <link href="http://yoursite.com/2016/09/11/python-library-module/"/>
    <id>http://yoursite.com/2016/09/11/python-library-module/</id>
    <published>2016-09-11T10:28:14.000Z</published>
    <updated>2016-11-02T14:09:43.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;Python库非常多，为方便快速查询，将自己之前用到的库做个简单汇总记录，不定期持续更新。</p>
<h3 id="目录"><strong>目录</strong></h3><ul>
<li><a href="#shutil">shutil</a></li>
<li><a href="#glob">glob</a></li>
<li><a href="#shlex">shlex</a></li>
<li><a href="#argparse">argparse</a></li>
<li><a href="#re">re</a></li>
<li><a href="#os">os</a></li>
<li><a href="#sys">sys</a></li>
<li><a href="#time">time</a></li>
<li><a href="#datetime">datetime</a></li>
<li><a href="#paramiko">paramiko</a></li>
<li><a href="#subprocess">subprocess</a></li>
<li><a href="#functools">functools</a></li>
<li><a href="#smtplib">smtplib</a></li>
<li><a href="#requests">requests</a></li>
<li><a href="#hashlib">hashlib</a></li>
<li><a href="#multiprocessing">multiprocessing</a></li>
<li><a href="#MySQLdb">MySQLdb</a></li>
<li><a href="#ConfigParser">ConfigParser</a></li>
<li><a href="#lxml">lxml</a></li>
<li><a href="#BeautifulSoup">BeautifulSoup</a></li>
</ul>
<p><span id="shutil"></span></p>
<h3 id="shutil"><strong>shutil</strong></h3><p>&emsp;<strong><a href="http://python.usyiyi.cn/python_278/library/shutil.html" target="_blank" rel="external">shutil</a></strong>模块提供目录和文件的高级操作</p>
<ul>
<li><p>复制操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="comment">#将文件src复制到文件或目录dest，保留文件权限</span></span><br><span class="line">shutil.copy(src, dest)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在shutil.copy的基础上加上copystat()，即将文件的访问/修改时间等信息也复制</span></span><br><span class="line">shutil.copy2(src, dest)</span><br><span class="line"></span><br><span class="line"><span class="comment">#复制文件src的内容（不包含元数据）到文件dest(不支持目录复制，dest中必须包含文件名)</span></span><br><span class="line">shutil.copyfile(src, dest)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将类文件对象src.log的内容复制到类文件对象dest.log</span></span><br><span class="line">shutil.copyfileobj(open(<span class="string">'src.log'</span>,<span class="string">'r'</span>), open(<span class="string">'dest.log'</span>, <span class="string">'w'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#递归拷贝src。symlinks=True则软链接文件也会被复制</span></span><br><span class="line">shutil.copytree(src, dest, symlinks=<span class="keyword">True</span>, ignore=shutil.ignore_patterns(<span class="string">'*.pyc'</span>, <span class="string">'*.swap'</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>移动&amp;删除操作</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#递归方式移动文件或目录</span></span><br><span class="line">shutil.move(src, dest)</span><br><span class="line"></span><br><span class="line"><span class="comment">#递归删除文件</span></span><br><span class="line">shutil.rmtree(folder1, folder2)</span><br></pre></td></tr></table></figure>
</li>
<li><p>压缩文件<br>&emsp;压缩文件。将目录”/usr/local/project”压缩到”/home/mogl/test.tar.gz”<br>&emsp;压缩包支持类型：zip/tar/gztar/bztar</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutil.make_archive(<span class="string">"/home/mogl/test"</span>, <span class="string">'gztar'</span>, root_dir=<span class="string">"/usr/local/project"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><span id="glob"></span></p>
<h3 id="glob"><strong>glob</strong></h3><p>&emsp;<strong><a href="http://python.usyiyi.cn/python_278/library/glob.html" target="_blank" rel="external">glob</a></strong>模块提供Unix Shell规则的文件匹配功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line">glob.glob(<span class="string">'*.png'</span>)</span><br><span class="line">glob.glob(<span class="string">'[0-9].*'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回迭代器</span></span><br><span class="line">files = glob.iglob(<span class="string">'*.log'</span>)</span><br><span class="line"><span class="keyword">for</span> each_file <span class="keyword">in</span> files:</span><br><span class="line">    <span class="keyword">print</span> each_file</span><br></pre></td></tr></table></figure></p>
<p><span id="shlex"></span></p>
<h3 id="shlex"><strong>shlex</strong></h3><p>&emsp;<a href="https://docs.python.org/2/library/shlex.html" target="_blank" rel="external">shlex</a>模块提供简单的Unix Shell命令参数词法分析功能，可结合<a href="#subprocess">subprocess</a>使用。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shlex</span><br><span class="line"></span><br><span class="line">shlex.split(<span class="string">"ls -lht /tmp"</span>)</span><br><span class="line"><span class="comment">#['ls', '-lht', '/tmp']</span></span><br></pre></td></tr></table></figure></p>
<p><span id="argparse"></span></p>
<h3 id="argparse"><strong>argparse</strong></h3><p>&emsp;<strong><a href="http://python.usyiyi.cn/python_278/library/argparse.html" target="_blank" rel="external">argparse</a></strong>是用于命令行参数解析的模块，功能非常强大，目前所用到的只是简单功能，直接上实例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'descritption'</span>, epilog=<span class="string">"author:mogl"</span>)</span><br><span class="line"></span><br><span class="line">parser.add_argument(<span class="string">'-d'</span>, <span class="string">'--directory'</span>, action=<span class="string">'store_true'</span>, help=<span class="string">'Only search directory'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-i'</span>, <span class="string">'--ignore-case'</span>, action=<span class="string">'store_true'</span>, help=<span class="string">'Ignore case search'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-S'</span>, <span class="string">'--srcport'</span>, help=<span class="string">'sorce port'</span>, type=int, required=<span class="keyword">True</span>)</span><br><span class="line">parser.add_argument(<span class="string">'-D'</span>, <span class="string">'--destport'</span>, help=<span class="string">'dest port'</span>, type=int, default=<span class="number">80</span>)</span><br><span class="line">parser.add_argument(<span class="string">'file_name'</span>, nargs=<span class="string">'+'</span>, help=<span class="string">'The file name'</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取参数值</span></span><br><span class="line"><span class="keyword">print</span> args.ignore_case</span><br><span class="line"><span class="keyword">print</span> args.srcport</span><br><span class="line"><span class="keyword">print</span> args.destport</span><br><span class="line"></span><br><span class="line"><span class="comment">#python test.py -S 124 test mogl</span></span><br><span class="line"><span class="comment">#False</span></span><br><span class="line"><span class="comment">#124</span></span><br><span class="line"><span class="comment">#80</span></span><br><span class="line"><span class="comment">#['test', 'mogl']</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p><strong>参数</strong><br>  参数可分为两种：</p>
<ul>
<li>选项参数(optional)<br>  <code>parser.add_argument(&#39;-i&#39;, &#39;--ignore-case&#39;, action=&#39;store_true&#39;, help=&#39;Ignore case search&#39;)</code><br>  选项参数默认使用<code>-</code>做前缀标识</li>
<li>位置参数(positional)<br>  <code>parser.add_argument(&#39;file_name&#39;, nargs=&#39;+&#39;, help=&#39;The file name&#39;)</code></li>
</ul>
</li>
<li><p><strong>选项参数解析</strong><br>   &emsp;选项参数默认返回<strong><code>None</code></strong>，可用<code>default</code>参数指定默认值。如果该参数是必须的则使用<code>required=True</code><br>  <code>parser.add_argument(&#39;-i&#39;, &#39;--ignore-case&#39;, action=&#39;store_true&#39;, help=&#39;Ignore case search&#39;)</code><br>  <code>parser.add_argument(&#39;-S&#39;, &#39;--srcport&#39;, help=&#39;sorce port&#39;, type=int, required=True)</code></p>
<ul>
<li><code>&#39;-i&#39;, &#39;--ignore-case&#39;</code><br>  参数长短语法</li>
<li><code>action=&#39;store_true&#39;</code><br>  表明该参数不接受参数传递，即不接收诸如<code>-i test</code>、<code>--ignore-case=true</code></li>
<li><code>type=int</code><br>  若不使用<code>action=&#39;store_true&#39;</code>则可表明接受参数传递，使用<code>type</code>指定传入类型(<code>type=int|str|complax</code>)</li>
<li><code>help=&#39;sorce port&#39;</code><br>  该参数的说明</li>
</ul>
</li>
<li><p><strong>位置参数</strong><br>  &emsp;若指定了位置参数，则运行程序时必须传入该参数才能运行<br>  <code>parser.add_argument(&#39;file_name&#39;, nargs=&#39;+&#39;, help=&#39;The file name&#39;)</code></p>
<ul>
<li><code>nargs</code><br>  将多个参数关联在一起。<code>+</code>将多个参数存到一个列表里,至少要有一个参数否则报错</li>
</ul>
</li>
<li><p><strong>action</strong><br>  &emsp;argparse默认设置6个action：</p>
<ul>
<li>store<br>  保存参数值，可能会先将参数值转换成另一个数据类型。若没有显式指定动作，则默认为该动作。</li>
<li>store_const<br>  保存一个被定义为参数规格一部分的值，而不是一个来自参数解析而来的值。这通常用于实现非布尔值的命令行标记。</li>
<li>store_ture/store_false<br>  保存相应的布尔值。这两个动作被用于实现布尔开关。</li>
<li>append<br>  将值保存到一个列表中。若参数重复出现，则保存多个值。</li>
<li>append_const<br>  将一个定义在参数规格中的值保存到一个列表中。</li>
<li>version<br>  打印关于程序的版本信息，然后退出</li>
</ul>
</li>
</ul>
<p><span id="re"></span></p>
<h3 id="re"><strong>re</strong></h3><p>&emsp;<strong><a href="http://python.usyiyi.cn/python_278/library/re.html" target="_blank" rel="external">re</a></strong>提供正则表达式匹配操作，是处理字符串最常用的库。</p>
<h4 id="正则表达式语法"><strong>正则表达式语法</strong></h4><p>&emsp;使用re库前，先大致了解正则表达式的基本语法，正好顺便总结一下有关正则表达式的内容。</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th></th>
<th></th>
<th></th>
<th style="text-align:left">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>基本关键字</strong></td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">常规模式下匹配除<code>\n</code>外的所有字符，DOTALL模式下<code>\n</code>也匹配</td>
</tr>
<tr>
<td style="text-align:center">^</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">常规模式下匹配字符串开头，MULTILINE模式下匹配每行开头</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">常规模式下匹配字符串结尾，MULTILINE模式下匹配行尾</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配*前面内容零次或多次，贪婪匹配</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配+前面内容零次或多次，贪婪匹配</td>
</tr>
<tr>
<td style="text-align:center">?</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配?前面内容零次或1次</td>
</tr>
<tr>
<td style="text-align:center">{m}</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配{m}前面内容m次</td>
</tr>
<tr>
<td style="text-align:center">{m,n}</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配{m,n}前面内容m~n次</td>
</tr>
<tr>
<td style="text-align:center">*? +? ?? {m,n}?</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">* + ? {m,n}都是贪婪匹配，后面加上?后为非贪婪匹配</td>
</tr>
<tr>
<td style="text-align:center">[]</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配[]内字符集的任一字符，<code>^</code>表示不匹配，<code>-</code>并用给出一段范围字符</td>
</tr>
<tr>
<td style="text-align:center">单竖线</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">或，只匹配其中一个</td>
</tr>
<tr>
<td style="text-align:center"><strong>分组关键字</strong></td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">(…)</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配括号内任意正则表达式并形成一个分组</td>
</tr>
<tr>
<td style="text-align:center">(?P<code>&lt;name&gt;</code>…)</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">为符合匹配的分组命名</td>
</tr>
<tr>
<td style="text-align:center">(?#…)</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">注释，(?#..)里的内容会被忽略</td>
</tr>
<tr>
<td style="text-align:center">(?=…)</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配结果后面的字符串需要满足表达式<code>...</code>。<strong>python_re_test</strong>——<code>.*(?=_test)</code>则匹配到字符串<strong>python_re</strong></td>
</tr>
<tr>
<td style="text-align:center">(?!…)</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配结果后面的字符串必须不满足表达式<code>...</code></td>
</tr>
<tr>
<td style="text-align:center">(?&lt;=…)</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配结果前面的字符串需要满足表达式<code>...</code>。<strong>python_re_test</strong>——<code>(?&lt;=python_).*</code>则匹配字符串<strong>re_test</strong></td>
</tr>
<tr>
<td style="text-align:center">(?&lt;!…)</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配结果前面的字符串必须不满足表达式<code>...</code></td>
</tr>
<tr>
<td style="text-align:center"><strong>特殊关键字</strong></td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:center">\d</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配数字，相当于[0-9]</td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配非数字，相当于[^0-9]</td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配空白字符，相当于[\t\r\n\f\v]</td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配非空白字符，相当于[^\t\r\n\f\v]</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配字母或数字，相当于[0-9a-zA-Z]</td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配非字母或数字，相当于[^0-9a-zA-Z]</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配字符串边界</td>
</tr>
<tr>
<td style="text-align:center">\B</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配非字符串边界</td>
</tr>
<tr>
<td style="text-align:center">\A</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配字符串开头</td>
</tr>
<tr>
<td style="text-align:center">\Z</td>
<td></td>
<td></td>
<td></td>
<td style="text-align:left">匹配字符串结尾</td>
</tr>
</tbody>
</table>
<h4 id="re库flags参数"><strong>re库flags参数</strong></h4><p>&emsp;Python的re库API中可指定<strong>flags</strong>参数，通过这些flags参数指定正则表达式选项通常使用类似<code>re.I</code>这样的简写，比如<code>re.compile(pattern, [flags])</code>函数——<code>re.compile(pattern, re.I)</code>。</p>
<table>
<thead>
<tr>
<th style="text-align:center">符号</th>
<th></th>
<th></th>
<th></th>
<th style="text-align:left">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">re.A</td>
<td></td>
<td>ASCII</td>
<td></td>
<td style="text-align:left">使\w\W\b\B\d\D匹配ASCII字符</td>
</tr>
<tr>
<td style="text-align:center">re.I</td>
<td></td>
<td>IGNORECASE</td>
<td></td>
<td style="text-align:left">忽略大小写</td>
</tr>
<tr>
<td style="text-align:center">re.L</td>
<td></td>
<td>LOCALE</td>
<td></td>
<td style="text-align:left">使\w\W\b\B匹配本地字符集</td>
</tr>
<tr>
<td style="text-align:center">re.M</td>
<td></td>
<td>MULTILINE</td>
<td></td>
<td style="text-align:left">多行模式，<code>^</code> 匹配每行开头，<code>$</code>匹配每行结尾</td>
</tr>
<tr>
<td style="text-align:center">re.X</td>
<td></td>
<td>VERBOSE</td>
<td></td>
<td style="text-align:left">详细模式，忽略空格和<code>#</code>后面的注释</td>
</tr>
<tr>
<td style="text-align:center">re.U</td>
<td></td>
<td>UNICODE</td>
<td></td>
<td style="text-align:left">使\w\W\b\B\d\D匹配unicode字符集</td>
</tr>
</tbody>
</table>
<h4 id="re库正则函数"><strong>re库正则函数</strong></h4><ul>
<li><p>re.compile(pattern[, flags])<br>  &emsp;将模式和标识编译成正则表达式对象，方便给<code>search()</code>、<code>match()</code>和<code>findall()</code>等函数使用。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">r'[0-9]+'</span>)</span><br><span class="line"><span class="keyword">print</span> pattern.findall(<span class="string">'abc123d'</span>)</span><br><span class="line"><span class="comment">#123</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>re.search(pattern, string[, flags])<br>  &emsp;在字符串<code>string</code>中查找匹配<code>pattern</code>表达式的串，成功则返回<strong>MatchObject</strong>对象，失败则返回<strong>None</strong></p>
<ul>
<li><p>re.search (string[, pos[, endpos]])<br>  &emsp;对于已编译的正则表达式对象，<code>search()</code>函数可指定搜索的起始结束位置</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用compile()</span></span><br><span class="line">pattern = re.compile(<span class="string">"a+"</span>)</span><br><span class="line"><span class="keyword">print</span> pattern.search(<span class="string">"aabcde"</span>).group(<span class="number">0</span>)		<span class="comment">#=&gt;aa</span></span><br><span class="line"><span class="keyword">print</span> pattern.search(<span class="string">"aabcde"</span>, <span class="number">1</span>).group(<span class="number">0</span>) 	<span class="comment">#=&gt;a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#不使用compile()</span></span><br><span class="line">regx = re.search(<span class="string">r'a+'</span>, <span class="string">'aabcde'</span>)</span><br><span class="line"><span class="keyword">print</span> regx.group(<span class="number">0</span>)		<span class="comment">#=&gt;aa</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>re.match(pattern, string[, flags])<br>  &emsp;在字符串<code>string</code><strong>开头位置</strong>查找匹配<code>pattern</code>表达式的串(必须是<strong>开头位置</strong>)</p>
<ul>
<li>re.match(string[, pos[, endpos]])<br>  &emsp;同样对于已编译的正则对象可指定位置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">"a+"</span>)</span><br><span class="line"><span class="keyword">print</span> pattern.match(<span class="string">'aabcde'</span>).group(<span class="number">0</span>) 	<span class="comment">#=&gt;aa</span></span><br><span class="line"><span class="keyword">print</span> pattern.match(<span class="string">'xaabcde'</span>)			<span class="comment">#=&gt;None</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>re.findall(pattern, string[, flags])<br>  &emsp;在字符串<code>string</code>中查找<strong>所有</strong>匹配<code>pattern</code>的串，成功则返回列表，失败则返回空列表。<br>  &emsp;<code>re.search()</code>和<code>re.match()</code><strong>仅匹配一次</strong>。</p>
<ul>
<li>re.findall(string[, pos[, endpos]])<br>  &emsp;同样对于已编译的正则对象可指定位置<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">"\d+"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> pattern.search(<span class="string">'ab12cd34'</span>).group(<span class="number">0</span>)		<span class="comment">#=&gt;12</span></span><br><span class="line"><span class="keyword">print</span> pattern.match(<span class="string">'ab12cd34'</span>)				<span class="comment">#=&gt;None</span></span><br><span class="line"><span class="keyword">print</span> pattern.findall(<span class="string">'ab12cd34'</span>)				<span class="comment">#=&gt;['12', '34']</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>re.finditer(pattern, string[, flags])<br>  &emsp;<code>re.finditer()</code>和<code>re.findall()</code>类似，只是<code>re.finditer()</code>返回一个迭代器对象。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">"\d+"</span>)</span><br><span class="line"><span class="keyword">for</span> each_iter <span class="keyword">in</span> piter:</span><br><span class="line">   	<span class="keyword">print</span> each_iter.group(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#=&gt;12</span></span><br><span class="line"><span class="comment">#=&gt;34</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>re.sub(pattern, rep_string, string[, count, flags])</p>
</li>
<li>re.subn(pattern, rep_string, string[, count, flags])<br>  &emsp;在字符串<code>string</code>中查找匹配<code>pattern</code>的字符串并用<code>rep_string</code>替换。<code>rep_string</code>可以是一个<strong>函数</strong>，成功则返回替换后的字符串，否则返回原字符串。<br>  &emsp;<code>re.subn()</code>和<code>re.sub()</code>类似，只是<code>re.subn()</code>返回替换后的字符串和<strong>替换次数</strong>。  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">r'(name|full_name)'</span>)</span><br><span class="line">pattern.sub(<span class="string">'mogl'</span>, <span class="string">'name test python re full_name'</span>)</span><br><span class="line"><span class="comment">#=&gt;'mogl test python re mogl'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="MatchObject对象"><strong>MatchObject对象</strong></h4><p>&emsp;<code>re.match()</code>、<code>re.search()</code>和<code>re.finditer()</code>若成功匹配的话都是返回一个<strong>MatchObject</strong>对象。(<code>re.findall()</code>返回列表)<br>&emsp;MatchObject对象可调用几个函数：</p>
<ul>
<li><code>group()</code>：返回匹配的完整字符串</li>
<li><code>groups()</code>：返回分组信息</li>
<li><code>groupdict()</code>：返回所有命名分组字典</li>
<li><code>start()</code>：返回匹配字符串的起始位置</li>
<li><code>end()</code>：返回匹配字符串的结束位置</li>
<li><code>span()</code>：返回起始位置和结束位置的元组</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">mystr = <span class="string">'12ab34cd'</span></span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">r'(\d+)(?P&lt;letter&gt;[a-zA-Z]+)'</span>)</span><br><span class="line"></span><br><span class="line">m = pattern.search(mystr)</span><br><span class="line"></span><br><span class="line">m.group()	<span class="comment">#=&gt;'12ab'</span></span><br><span class="line"></span><br><span class="line">m.start()	<span class="comment">#=&gt;0</span></span><br><span class="line"></span><br><span class="line">m.end()		<span class="comment">#=&gt;4</span></span><br><span class="line"></span><br><span class="line">m.span()	<span class="comment">#=&gt;(0, 4)</span></span><br><span class="line"></span><br><span class="line">m.groups()	<span class="comment">#=&gt;('12', 'ab')</span></span><br><span class="line"></span><br><span class="line">m.groupdict()	<span class="comment">#=&gt;&#123;'letter': 'ab'&#125;</span></span><br><span class="line"></span><br><span class="line">m.group(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)	<span class="comment">#=&gt;('12ab', '12', 'ab')</span></span><br></pre></td></tr></table></figure>
<p><span id="os"></span></p>
<h3 id="os"><strong>os</strong></h3><p>&emsp;<a href="http://python.usyiyi.cn/translate/python_278/library/os.html" target="_blank" rel="external">os</a>模块提供统一的操作系统功能。</p>
<ul>
<li><p><strong>os.getcwd()</strong><br>  获取当前工作目录</p>
</li>
<li><p><strong>os.chdir(path)</strong><br>  修改工作目录</p>
</li>
<li><p><strong>os.listdir(path)</strong><br>  列出path下所有文件/目录，不支持递归和通配符</p>
</li>
<li><p><strong>os.walk(path)</strong><br>  深度遍历path下所有文件/目录</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">'/tmp'</span>):</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"root=%s, dirs=%s, files=%s"</span> % (root, dirs, files)**</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>os.mkdir(path)</strong><br>  创建目录，若path已存在则抛出异常</p>
</li>
<li><p><strong>os.makedirs(‘/path/subpath’)</strong><br>  递归创建多级目录，相当于Linux命令<code>mkdir -p</code></p>
</li>
<li><p><strong>os.rmdir(path)</strong><br>  删除空目录</p>
</li>
<li><p><strong>os.removedirs(path)</strong><br>  递归删除path下的子目录，目录非空则异常</p>
</li>
<li><p><strong>os.remove(file)</strong><br>  删除文件，若file为目录则抛出异常</p>
</li>
<li><p><strong>os.rename(path1, path2)</strong><br>  重命名</p>
</li>
<li><p><strong>os.renames(path1, path2)</strong><br>  重命名，会创建path2目标路径</p>
</li>
<li><p><strong>os.chmod(path, mode)</strong><br>  修改权限</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">os.chmod(<span class="string">'/tmp/test'</span>, <span class="number">0777</span>)**</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>os.chown(path, uid, gid)</strong><br>  修改拥有者</p>
</li>
<li><p><strong>os.access(path, mode)</strong><br>  权限测试</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.access(<span class="string">'/tmp/test.txt'</span>, os.W_OK)**</span><br><span class="line">os.access(<span class="string">'/tmp/test.txt'</span>, os.R_OK)**</span><br><span class="line">os.access(<span class="string">'/tmp/test.txt'</span>, os.X_OK)**</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="os-path"><strong>os.path</strong></h4><p>&emsp;<a href="http://python.usyiyi.cn/translate/python_278/library/os.path.html" target="_blank" rel="external">os.path</a>提供操作路径的函数。</p>
<ul>
<li><p><strong>os.path.abspath(path)</strong><br>  获取绝对路径</p>
</li>
<li><p><strong>os.path.realpath(path)</strong><br>  软连接的真实路径</p>
</li>
<li><p><strong>os.path.basename(path)</strong><br>  获取文件名，以<code>/</code>结尾的路径返回空</p>
</li>
<li><p><strong>os.path.dirname(path)</strong><br>  获取目录名</p>
</li>
<li><p><strong>os.path.exists(path)</strong><br>  判断<code>path</code>路径是否存在</p>
</li>
<li><p><strong>os.path.isfile(path) / os.path.isdir(path) / os.path.islink(path) / os.path.ismount(path)</strong><br>  判断<code>path</code>是否为文件/目录/软连接/挂载点</p>
</li>
<li><p><strong>os.path.split(path)</strong><br>  将<code>path</code>切分为<code>(目录, 文件名)</code></p>
</li>
<li><p><strong>os.path.splitext(path)</strong><br>  将<code>path</code>切分为<code>(目录/主文件名, 后缀名)</code></p>
</li>
<li><p><strong>os.path.join(path1, path2)</strong><br>  拼接路径</p>
</li>
</ul>
<p><span id="sys"></span></p>
<h3 id="sys"><strong>sys</strong></h3><p>&emsp;<a href="http://python.usyiyi.cn/translate/python_278/library/sys.html" target="_blank" rel="external">sys</a>模块，主要处理Python环境的变量使得程序与系统环境有交互。</p>
<ul>
<li><strong>sys.argv[x]</strong><br>  获取命令行参数列表。<code>0</code>表示程序名，<code>1</code>表示第一个命令行第一个参数，以此类推。</li>
<li><strong>sys.exit(num)</strong><br>  程序退出状态码，<code>sys.exit(0)</code>表示正常退出。</li>
<li><strong>sys.path</strong><br>  返回模块的搜索路径。</li>
<li><strong>sys.stdout / sys.stdin / sys.stderr</strong><br>  标准输出/输入/错误输出</li>
</ul>
<p><span id="time"></span></p>
<h3 id="time"><strong>time</strong></h3><p>&emsp;<a href="http://python.usyiyi.cn/translate/python_278/library/time.html" target="_blank" rel="external">time</a>模块主要提供和时间相关的函数。</p>
<ul>
<li><strong>time.time()</strong><br>  返回距离纪元(1970-01-01 00:00:00)开始的秒数，返回值为浮点数。</li>
<li><strong>time.ctime()</strong><br>  返回字符串型易读的时间，诸如：<code>Wed Oct  1 20:18:59 2016</code></li>
<li><strong>time.clock()</strong><br>  返回当前进程消耗的CPU时间(秒)</li>
<li><p><strong>time.gmtime() / time.localtime()</strong><br>  <code>time.gmtime()</code>和<code>time.localtime()</code>的结果都是使用<strong>struct_time</strong>格式显示，可使用<strong><code>time.asctime()</code></strong>转变成<code>time.ctime()</code>的字符串格式显示。<br>  <code>time.gmtime()</code>获取的是UTC时间，<code>time.localtime()</code>获取的是当前时区的时间。在中国：<code>time.gmtime() = time.localtime() + 8hour</code></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">time.gmtime()</span><br><span class="line"><span class="comment">#time.struct_time(tm_year=2016, tm_mon=10, tm_mday=5, tm_hour=15, tm_min=29, tm_sec=14, tm_wday=2, tm_yday=279, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line">time.localtime()</span><br><span class="line"><span class="comment">#time.struct_time(tm_year=2016, tm_mon=10, tm_mday=5, tm_hour=23, tm_min=30, tm_sec=4, tm_wday=2, tm_yday=279, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line">time.asctime(time.localtime())</span><br><span class="line"><span class="comment">#'Wed Oct  5 23:30:35 2016'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>time.strptime()</strong><br>  将字符串格式时间转成struct_time格式时间</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time.strptime(time.ctime())</span><br><span class="line"><span class="comment">#time.struct_time(tm_year=2016, tm_mon=10, tm_mday=5, tm_hour=23, tm_min=37, tm_sec=17, tm_wday=2, tm_yday=279, tm_isdst=-1)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>time.strftime()</strong><br>  将时间格式化输出</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime())</span><br><span class="line"><span class="comment">#'2016-10-05 23:39:23'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>time.sleep(num)</strong><br>  进程sleep时间</p>
</li>
</ul>
<p><span id="datetime"></span></p>
<h3 id="datetime"><strong>datetime</strong></h3><p>&emsp;<a href="http://python.usyiyi.cn/documents/python_278/library/datetime.html" target="_blank" rel="external">datetime</a>模块提供操作日期和时间函数。<br>&emsp;<a href="http://python.usyiyi.cn/documents/python_278/library/datetime.html" target="_blank" rel="external">datetime</a>模块常用的有四个类别，这些对象都是<strong>不可变</strong>对象：</p>
<ul>
<li><code>datetime.date</code>：用于操作日期</li>
<li><code>datetime.time</code>：用于操作时分秒</li>
<li><code>datetime.datetime</code>：用于操作日期和时分秒</li>
<li><code>datetime.timedelta</code>：用于操作时间间隔</li>
</ul>
<h4 id="datetime-date"><strong>datetime.date</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> date.today()</span><br><span class="line"><span class="comment">#2016-10-05</span></span><br><span class="line"></span><br><span class="line">now = date.today()</span><br><span class="line"><span class="comment">#2016-10-05</span></span><br><span class="line">tomorrow = now.replace(day=<span class="number">06</span>)</span><br><span class="line"><span class="comment">#2016-10-06</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#date.weekday()，星期一返回0，以此类推</span></span><br><span class="line">now.weekday()</span><br><span class="line"><span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#date.isoformat()，返回`YYYY-MM-DD`</span></span><br><span class="line">now.isoformat()</span><br><span class="line"><span class="comment">#'2016-10-06'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#date.strftime(format)，格式化时间输出</span></span><br><span class="line">now.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line"><span class="string">'2016-10-06 00:00:00'</span></span><br></pre></td></tr></table></figure>
<h4 id="datetime-time"><strong>datetime.time</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">mytime = datetime.time(<span class="number">23</span>, <span class="number">59</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> mytime</span><br><span class="line"><span class="comment">#23:59:10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"hour: %s, minute: %s, second: %s"</span> % (mytime.hour, mytime.minute, mytime.second)</span><br><span class="line"><span class="comment">#hour: 23, minute: 59, second: 10</span></span><br><span class="line"></span><br><span class="line">mytime2 = mytime.replace(hour=<span class="number">22</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> mytime2</span><br><span class="line"><span class="comment">#22:59:10</span></span><br></pre></td></tr></table></figure>
<h4 id="datetime-datetime"><strong>datetime.datetime</strong></h4><p><code>datetime.datetime</code>和<code>datetime.time</code>差不多<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">start = datetime.datetime.now()</span><br><span class="line"><span class="comment">#2016-10-06 23:47:29.105713</span></span><br><span class="line"></span><br><span class="line">end = datetime.datetime.now()</span><br><span class="line"><span class="comment">#2016-10-06 23:47:45.449751</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (end - start).seconds</span><br><span class="line"><span class="comment">#16</span></span><br></pre></td></tr></table></figure></p>
<h4 id="datetime-timedelta"><strong>datetime.timedelta</strong></h4><p>&emsp;主要用于做时间的加减操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">today = datetime.datetime.today()</span><br><span class="line"><span class="comment">#2016-10-06 23:41:46.170686</span></span><br><span class="line"></span><br><span class="line">delta = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">yesterday = today - delta</span><br><span class="line"><span class="comment">#2016-10-05 23:41:46.170686</span></span><br></pre></td></tr></table></figure></p>
<p><span id="paramiko"></span></p>
<h3 id="paramiko"><strong>paramiko</strong></h3><p>&emsp;<a href="http://www.paramiko.org/" target="_blank" rel="external">paramiko</a>模块提供ssh远程登录等相关功能。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ssh_command</span><span class="params">(ip, username, passwd, cmd, port=<span class="number">22</span>)</span>:</span></span><br><span class="line">    <span class="string">"""paramiko demo"""</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    	ssh = paramiko.SSHClient()</span><br><span class="line">    	<span class="comment">#允许连接不在know_hosts文件中的主机</span></span><br><span class="line">    	ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">    	ssh.connect(ip, port, username, passwd, timeout=<span class="number">30</span>)</span><br><span class="line">    	stdin, stdout, stderr = ssh.exec_command(cmd)</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">    	<span class="keyword">raise</span> <span class="string">"%s ssh connect error: %s"</span> % (ip, e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">    	ssh.close()</span><br><span class="line">    std_result = &#123;<span class="string">'stdout'</span>: stdout.readlines(),</span><br><span class="line">    			<span class="string">'stderr'</span>: stderr.readlines()</span><br><span class="line">    			&#125;</span><br><span class="line">    <span class="keyword">return</span> std_result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#paramiko模块还支持sftp传输功能</span></span><br><span class="line"></span><br><span class="line">scp=paramiko.Transport((host_ip, ssh_port))</span><br><span class="line">scp.connect(username=ssh_username, password=ssh_passowrd)</span><br><span class="line">sftp=paramiko.SFTPClient.from_transport(scp)</span><br><span class="line"><span class="comment">#如果之前已有一个建立连接的ssh对象，则可直接复用该ssh连接对象</span></span><br><span class="line"><span class="comment">#sftp = paramiko.SFTPClient.from_transport(ssh.get_transport())</span></span><br><span class="line"><span class="comment">#sftp = ssh.open_sftp()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下载文件</span></span><br><span class="line">sftp.get(<span class="string">'/tmp/remote_file'</span>,<span class="string">'/tmp/local_file'</span>)</span><br><span class="line"><span class="comment">#上传文件</span></span><br><span class="line">sftp.put(<span class="string">'/home/local_file'</span>,<span class="string">'/tmp/remote_file'</span>)</span><br><span class="line">scp.close()</span><br></pre></td></tr></table></figure></p>
<p><span id="subprocess"></span></p>
<h3 id="subprocess"><strong>subprocess</strong></h3><p>&emsp;<a href="http://python.usyiyi.cn/python_278/library/subprocess.html" target="_blank" rel="external">subprocess</a>模块允许创建新进程并获取返回值/输出信息，常用来调用系统命令。<br>&emsp;常用已封装好的函数有三个：</p>
<ul>
<li><strong>subprocess.call()</strong><br>  返回<strong>exit code</strong>。不管<code>exit code</code>是什么都不会抛出异常。</li>
<li><strong>subprocess.check_call()</strong><br>  返回<strong>exit code</strong>并检查<strong>exit code</strong>。<code>exit code</code>为<code>0</code>则成功，否则抛出<code>subprocess.CalledProcessError</code>异常。</li>
<li><strong>subprocess.check_output()</strong><br>  返回输出信息且检查<strong>exit code</strong>。<code>exit code</code>不为0则抛出<code>subprocess.CalledProcessError</code>异常。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果相同，返回的是exit code</span></span><br><span class="line">subprocess.call([<span class="string">'echo'</span>, <span class="string">'test'</span>])</span><br><span class="line">subprocess.call(<span class="string">"echo test"</span>, shell=<span class="keyword">True</span>)</span><br><span class="line">subprocess.check_call([<span class="string">'echo'</span>, <span class="string">'test'</span>])</span><br><span class="line"><span class="comment">#test</span></span><br><span class="line"><span class="comment">#0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回的是输出信息</span></span><br><span class="line">subprocess.check_output([<span class="string">'echo'</span>, <span class="string">'test'</span>])</span><br><span class="line"><span class="comment">#'test\n'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可用shlex模块解析参数而不使用`shell=True`</span></span><br><span class="line">subprocess.call(shlex.split(<span class="string">"echo test"</span>))</span><br><span class="line"><span class="comment">#test</span></span><br><span class="line"><span class="comment">#0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#忽略输出，只获取exit code</span></span><br><span class="line"><span class="keyword">with</span> open(os.devnull, <span class="string">'w'</span>) <span class="keyword">as</span> devnull:</span><br><span class="line">    exit_code = subprocess.call([<span class="string">"echo"</span>, <span class="string">"test"</span>], stdout=devnull, stderr=devnull, shell=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="subprocess-Popen()"><strong>subprocess.Popen()</strong></h4><p>&emsp;<code>subprocess.call</code>、<code>subprocess.check_call</code>和<code>subprocess.check_output</code>都是基于<code>subprocess.Popen()</code>的封装。在创建了<code>Popen</code>对象后，父进程不会主动等待子进程需要调用<code>wait()</code>方法使其等待。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">subprocess.Popen(<span class="string">'ps aux|grep ipython'</span>, shell=<span class="keyword">True</span>).wait()</span><br><span class="line"><span class="comment">#命令输出</span></span><br><span class="line"><span class="comment">#=&gt;mogl     28580  0.0  0.3  32568 15332 pts/26   Sl+  16:35   0:01 /usr/bin/python /usr/local/bin/ipython</span></span><br><span class="line"><span class="comment">#返回值</span></span><br><span class="line"><span class="comment">#=&gt;0</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;可使用<strong><code>subprocess.PIPE</code></strong>改变输入输出对象并获取子进程的更详细信息<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">child = subprocess.Popen(<span class="string">'ps aux|grep ipython'</span>, shell=<span class="keyword">True</span>, stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line">child.pid</span><br><span class="line"><span class="comment">#25556</span></span><br><span class="line"></span><br><span class="line">child.stdout.readlines()</span><br><span class="line"><span class="comment">#mogl     28580  0.0  0.3  32568 15332 pts/26   Sl+  16:35   0:01 /usr/bin/python /usr/local/bin/ipython</span></span><br><span class="line"></span><br><span class="line">child.poll</span><br><span class="line"><span class="comment">#检查子进程是否已终止。没终止返回空，终止返回exit code</span></span><br><span class="line"></span><br><span class="line">child.wait()</span><br><span class="line"><span class="comment">#0</span></span><br><span class="line"></span><br><span class="line">child.returncode</span><br><span class="line"><span class="comment">#0</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong><code>subprocess.PIPE</code></strong>还可以将多个子进程的输入输出连接<br>&emsp;<code>communicate()</code>是Popen对象的方法，该方法会阻塞父进程，直到子进程完成。<code>child2</code>的输出也在PIPE中，需要调用<code>child2.communicate()</code>读取。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">child1 = subprocess.Popen([<span class="string">"ls"</span>,<span class="string">"-l"</span>], stdout=subprocess.PIPE)</span><br><span class="line">child2 = subprocess.Popen([<span class="string">"wc"</span>], stdin=child1.stdout,stdout=subprocess.PIPE)</span><br><span class="line">out = child2.communicate()</span><br></pre></td></tr></table></figure></p>
<p><span id="functools"></span></p>
<h3 id="functools"><strong>functools</strong></h3><p>&emsp;<a href="http://python.usyiyi.cn/python_278/library/functools.html" target="_blank" rel="external">functools</a>提供高阶函数功能。主要包含<code>cmp_to_key</code>、<code>partial</code>、<code>reduce</code>、<code>total_ordering</code>、<code>update_wrapper</code>和<code>wraps</code>这几个函数。</p>
<ul>
<li><p><strong>functools.cmp_to_key(func)</strong><br>  <code>functools.cmp_to_key()</code>是Python2.7新增的函数，用于将比较函数转成key函数，需要在接受key函数作为参数的函数中才使用。其实是为了兼容Python3，拿<code>sorted()</code>函数为例：Python2版本的<code>sorted()</code>函数支持<code>cmp</code>参数来处理用户自定义的排序函数，但Python3后将<code>cmp</code>参数移除了，所以需要使用到<code>cmp_to_key</code>将自定义的排序函数转成key函数</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Python2</span></span><br><span class="line">sorted([<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], cmp=<span class="keyword">lambda</span> x, y: y-x)</span><br><span class="line"><span class="comment">#=&gt;[5, 4, 3, 2, 1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Python3</span></span><br><span class="line">sorted([<span class="number">5</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">3</span>], key=cmp_to_key(<span class="keyword">lambda</span> x, y: y-x))</span><br><span class="line"><span class="comment">#=&gt;[5, 4, 3, 2, 1]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>functools.total_ordering(cls)</strong><br>  <code>functools.total_ordering()</code>也是Python2.7新增的函数，主要用于简化比较函数的写法。当某个类定义了<strong><code>__eq__()</code></strong>方法，并且定义了<strong><code>__lt__()</code></strong>、<strong><code>__le__()</code></strong>、<strong><code>__gt__()</code></strong>或<strong><code>__ge__()</code></strong>方法中的<strong>其中一个</strong>，若使用<strong><code>@total_ordering()</code></strong>装饰器，则该类会自动生成其他的比较方法。<br>  官方例子：</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> total_ordering</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@total_ordering</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> ((self.lastname.lower(), self.firstname.lower()) ==</span><br><span class="line">				(other.lastname.lower(), other.firstname.lower()))</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> ((self.lastname.lower(), self.firstname.lower()) &lt;</span><br><span class="line">				(other.lastname.lower(), other.firstname.lower()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> dir(Student)</span><br><span class="line"><span class="comment">#=&gt;['__doc__', '__eq__', '__ge__', '__gt__', '__le__', '__lt__', '__module__']</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>functools.reduce(function, iterable)</strong><br>  <code>functools.reduce()</code>和内置的<code>reduce()</code>功能一样，使用<code>functools.reduce()</code>也是为了兼容Python3。</p>
</li>
<li><p><strong>functools.partial(func[,*args][, </strong>keywords])**<br>  <code>functools.partial()</code>简单的说就是实现<a href="https://zh.wikipedia.org/wiki/%E6%9F%AF%E9%87%8C%E5%8C%96" target="_blank" rel="external">柯里化</a>的。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line">add_y = partial(add, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> add_y(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#=&gt;2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>functools.wraps(wrapped[, assigned][, updated])</strong><br>  <code>functools.wraps()</code>主要的作用是消除Python中装饰器带来的一些副作用。Python中使用装饰器，被装饰函数的<code>__name__</code>属性会被改变，需要用<code>functools.wraps()</code>进行修正。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">	<span class="comment">#@wraps(func)</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"In decorator wrapper func."</span></span><br><span class="line">		<span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="decorator">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">"In test func."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> test.__name__</span><br><span class="line"><span class="comment">#=&gt;wrapper</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>functools.update_wrapper(wrapper, wrapped[, assigned][, updated])</strong><br>  <code>functools.wraps()</code>是<code>functools.update_wrapper()</code>的简化版本，<code>functools.update_wrapper()</code>功能更强大，默认会将被装饰函数的<code>functools.WRAPPER_ASSIGNMENTS</code>(<code>__module__</code>、<code>__name__</code>、<code>__doc__</code>)和<code>functools.WRAPPER_UPDATES</code>(<code>__dict__</code>)都复制给装饰函数。<br>  实际上面的装饰器代码可用<code>update_wrapper()</code>写：</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> update_wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">"In decorator wrapper func."</span></span><br><span class="line">       <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> update_wrapper(wrapper, func)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><span id="smtplib"></span></p>
<h3 id="smtplib"><strong>smtplib</strong></h3><p>&emsp;<a href="http://python.usyiyi.cn/python_278/library/smtplib.html" target="_blank" rel="external">smtplib</a>模块用于发送邮件。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(send_list, subject, content)</span>:</span></span><br><span class="line">	<span class="string">"""html/text邮件"""</span></span><br><span class="line">	mail_host = <span class="string">"your_smtp_server_address"</span></span><br><span class="line">	mail_user = <span class="string">'your_email_user(xxx@gmail.com)'</span></span><br><span class="line">	mail_passwd = <span class="string">'your_email_password'</span></span><br><span class="line">	mail_port = <span class="number">25</span></span><br><span class="line">	send_from = <span class="string">"your_send_from"</span> + <span class="string">"&lt;"</span> + mail_user + <span class="string">"&gt;"</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">##TEXT邮件</span></span><br><span class="line">	<span class="comment">#msg = MIMEText(content, _subtype='plain', _charset='utf-8')</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">##HTML邮件</span></span><br><span class="line">	<span class="comment">#msg = MIMEText(content, _subtype='html', _charset='utf-8')</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">##带附件邮件</span></span><br><span class="line">    msg = MIMEMultipart()</span><br><span class="line">    <span class="comment">#邮件正文</span></span><br><span class="line">    msg.attach(MIMEText(content, _charset=<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="comment">#附件一</span></span><br><span class="line">    att_1 = MIMEText(open(<span class="string">'/tmp/attachment1.txt'</span>, <span class="string">'rb'</span>).read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    att_1[<span class="string">'Content-Type'</span>] = <span class="string">'application/octet-stream'</span></span><br><span class="line">    <span class="comment">#邮件中附件显示的文件名字</span></span><br><span class="line">    att_1[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=%s'</span> % <span class="string">"附件1"</span></span><br><span class="line">    msg.attach(att_1)</span><br><span class="line"></span><br><span class="line">	msg[<span class="string">'From'</span>] = send_from</span><br><span class="line">	msg[<span class="string">'Subject'</span>] = subject</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span>:</span><br><span class="line">		mail_server = smtplib.SMTP()</span><br><span class="line">		mail_server.connect(mail_host, mail_port)</span><br><span class="line">		mail_server.login(mail_user, mail_passwd)</span><br><span class="line">		mail_server.sendmail(msg[<span class="string">'From'</span>], send_list, msg.as_string())</span><br><span class="line">		mail_server.close()</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">	<span class="keyword">except</span> Exception, e:</span><br><span class="line">		<span class="keyword">print</span> str(e)</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure></p>
<p><span id="requests"></span></p>
<h3 id="requests"><strong>requests</strong></h3><p>&emsp;<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="external">requests</a>是第三方模块，相比Python内置的<code>urlib2</code>更人性化。<br>&emsp;由于<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="external">requests</a>是第三方模块，需要使用<code>pip</code>进行安装，在一些版本中可能会在使用中出现<code>SNIMissingWarning</code>和<code>InsecurePlatformWarning</code>警告，可按以下方法安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install -y openssl-devel python-devel libffi-devel</span><br><span class="line">pip install <span class="string">'requests[security]'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#若在使用中出现SNIMissingWarning和InsecurePlatformWarning警告可</span></span><br><span class="line">pip install pyopenssl ndg-httpsclient pyasn1</span><br><span class="line"></span><br><span class="line"><span class="comment">#若不想额外安装包可手动忽略警告</span></span><br><span class="line"><span class="comment">#关闭requests的https警告</span></span><br><span class="line">try:</span><br><span class="line">    from requests.packages.urllib3.exceptions import (</span><br><span class="line">        SNIMissingWarning,</span><br><span class="line">        InsecureRequestWarning,</span><br><span class="line">        InsecurePlatformWarning</span><br><span class="line">    )</span><br><span class="line">    requests.packages.urllib3.disable_warnings(SNIMissingWarning)</span><br><span class="line">    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)</span><br><span class="line">    requests.packages.urllib3.disable_warnings(InsecurePlatformWarning)</span><br><span class="line">except ImportError:</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html" target="_blank" rel="external">requests</a>常用方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://github.com/timeline.json'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#GET请求(10s超时)</span></span><br><span class="line">r = requests.get(url, timeout=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#文本方式显示</span></span><br><span class="line"><span class="keyword">print</span> r.text</span><br><span class="line"><span class="comment">#字节方式显示，中文显示为字符</span></span><br><span class="line"><span class="keyword">print</span> r.content</span><br><span class="line"><span class="comment">#显示编码 &amp; 设置编码</span></span><br><span class="line"><span class="keyword">print</span> r.encoding</span><br><span class="line">r.encoding = <span class="string">'utf-8'</span></span><br><span class="line"><span class="comment">#响应状态码</span></span><br><span class="line">r.status_code</span><br><span class="line"><span class="comment">#HTTP header</span></span><br><span class="line">r.headers</span><br><span class="line">r.headers[<span class="string">'Content-Type'</span>]</span><br><span class="line"><span class="comment">#JSON化，失败会抛出异常</span></span><br><span class="line">r.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#POST请求</span></span><br><span class="line">headers = &#123;</span><br><span class="line">	<span class="string">'content-type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">	<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">	<span class="string">"mobile"</span>: mobile,</span><br><span class="line">	<span class="string">"templateId"</span>: template_id,</span><br><span class="line">	<span class="string">"templateVariable"</span>: &#123;</span><br><span class="line">		self.mobile: &#123;</span><br><span class="line">			<span class="string">"secode"</span>: vcode</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">"userName"</span>: user_name,</span><br><span class="line">	<span class="string">"randomKey"</span>: random_key,</span><br><span class="line">	<span class="string">"fingerprint"</span>: fingerprint</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	r = requests.post(url, data=json.dumps(data), headers=headers)</span><br><span class="line">	result = r.json()</span><br><span class="line">	<span class="comment">#result = json.loads(r.content)</span></span><br><span class="line"><span class="keyword">except</span> Exception, err:</span><br><span class="line">	<span class="keyword">raise</span> err</span><br></pre></td></tr></table></figure></p>
<p><span id="hashlib"></span></p>
<h3 id="hashlib"><strong>hashlib</strong></h3><p>&emsp;<a href="http://python.usyiyi.cn/python_278/library/hashlib.html" target="_blank" rel="external">hashlib</a>模块实现各种hash算法。<a href="http://python.usyiyi.cn/python_278/library/hashlib.html" target="_blank" rel="external">hashlib</a>基于OpenSSL，支持<code>md5</code>、<code>sha1</code>、<code>sha224</code>、<code>sha256</code>、<code>sha384</code>和<code>sha512</code>等算法。<br>&emsp;基本用法。<code>update()</code>可多次调用，每次都会根据新增文本更新结果。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">mystr = <span class="string">'mogl'</span></span><br><span class="line"></span><br><span class="line">mymd5 = hashlib.md5()</span><br><span class="line">mymd5.update(mystr)</span><br><span class="line"><span class="keyword">print</span> mymd5.hexdigest()</span><br><span class="line"><span class="comment">#=&gt;d2624edb33f3be2c461b1e95740b6b5c</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;用<code>new()</code>方法通过字符串形式指定算法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">hash_name = sys.argv[<span class="number">1</span>]</span><br><span class="line">myhash = hashlib.new(hash_name)</span><br><span class="line">myhash.update(mystr)</span><br><span class="line"><span class="keyword">print</span> myhash.hexdigest()</span><br></pre></td></tr></table></figure></p>
<p><span id="multiprocessing"></span></p>
<h3 id="multiprocessing"><strong>multiprocessing</strong></h3><p>&emsp;<a href="http://python.usyiyi.cn/python_278/library/multiprocessing.html" target="_blank" rel="external">multiprocessing</a>模块提供多进程编程。</p>
<ul>
<li><p><strong>multiprocessing.Process</strong><br>  &emsp;<code>Process</code>类的原型<code>multiprocessing.Process(group=None, target=None, name=None, args=(), kwargs={})</code>。每个<code>Process</code>类会生成一个<code>process</code>对象并在新的进程中运行。<br>  &emsp;每个<code>process</code>对象<strong>最多只能调用一次<code>start()</code>方法</strong>，<code>join([timeout])</code>方法会阻塞调用<code>process</code>对象的进程等待子进程执行完毕。</p>
<ul>
<li><code>group</code>：仅为兼容<code>threading.Thread</code>，通常为<code>None</code></li>
<li><code>target</code>：子进程要执行的函数</li>
<li><code>name</code>：进程名，默认为<code>Process-1</code>、<code>Process-2...</code></li>
<li><code>args</code>：<code>target</code>函数调用的参数</li>
<li><p><code>kwargs</code>：<code>target</code>函数调用的字典参数</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">child_run</span><span class="params">(name)</span>:</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">"Run in child process name: %s, pid: %s"</span> % (name, os.getpid())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"Parent process pid: %s"</span> % os.getpid()</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"Creating child process..."</span></span><br><span class="line">       <span class="comment">#注意args参数中必须有,</span></span><br><span class="line">       multi_proc = Process(target=child_run, args=(<span class="string">'child_test'</span>,))</span><br><span class="line">	<span class="comment">#设置daemon属性</span></span><br><span class="line">	<span class="comment">#multi_proc.daemon = True</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">"Starting child process..."</span></span><br><span class="line">       multi_proc.start()</span><br><span class="line">       multi_proc.join()</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"Process end."</span></span><br><span class="line"><span class="comment">#Parent process pid: 12198</span></span><br><span class="line"><span class="comment">#Creating child process...</span></span><br><span class="line"><span class="comment">#Starting child process...</span></span><br><span class="line"><span class="comment">#Run in child process name: child_test, pid: 12199</span></span><br><span class="line"><span class="comment">#Process end.</span></span><br></pre></td></tr></table></figure>
<p>&emsp;多进程并行运行。每个子进程都是先<code>start()</code>，最后在一起<code>join()</code>。若对每个<code>process</code>对象都一起执行<code>start()</code>和<code>join()</code>则变成顺序执行而非并发执行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line">   <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">child_run</span><span class="params">(name)</span>:</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">"Run in child process name: %s, pid: %s"</span> % (name, os.getpid())</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       names = [<span class="string">'mo'</span>, <span class="string">'guo'</span>, <span class="string">'liang'</span>, <span class="string">'mogl'</span>]</span><br><span class="line">       proc_list = []</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"Parent process pid: %s"</span> % os.getpid()</span><br><span class="line">       <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">           multi_proc = Process(target=child_run, args=(name,))</span><br><span class="line">           proc_list.append(multi_proc)</span><br><span class="line">           multi_proc.start()</span><br><span class="line">       <span class="keyword">for</span> each_child_proc <span class="keyword">in</span> proc_list:</span><br><span class="line">           each_child_proc.join()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Parent process pid: 14516</span></span><br><span class="line"><span class="comment">#Run in child process name: mo, pid: 14517</span></span><br><span class="line"><span class="comment">#Run in child process name: guo, pid: 14518</span></span><br><span class="line"><span class="comment">#Run in child process name: liang, pid: 14519</span></span><br><span class="line"><span class="comment">#Run in child process name: mogl, pid: 14520</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>multiprocessing.Lock</strong><br>  &emsp;<code>multiprocessing.Lock</code>提供锁功能，当多进程需要访问共享资源时，可用锁来避免冲突。使用锁的话多进程并行则会受到锁的限制。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Lock</span><br><span class="line">   <span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">printer</span><span class="params">(string)</span>:</span></span><br><span class="line">       <span class="keyword">print</span> <span class="string">"In printer, string: %s, pid: %s"</span> % (string, os.getpid())</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">printer_lock</span><span class="params">(string, lock)</span>:</span></span><br><span class="line">       lock.acquire()</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"In printer, string: %s, pid: %s"</span> % (string, os.getpid())</span><br><span class="line">       lock.release()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">       proc_list = []</span><br><span class="line">       names = [<span class="string">'mo'</span>, <span class="string">'guo'</span>, <span class="string">'liang'</span>, <span class="string">'mogl'</span>]</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"Parent pid: %s"</span> % os.getpid()</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> each_name <span class="keyword">in</span> names:</span><br><span class="line">           multi_proc = Process(target=printer, args=(each_name,))</span><br><span class="line">           proc_list.append(multi_proc)</span><br><span class="line">           multi_proc.start()</span><br><span class="line"></span><br><span class="line">       lock = Lock()</span><br><span class="line">       <span class="keyword">for</span> each_name <span class="keyword">in</span> names:</span><br><span class="line">           multi_proc_lock = Process(target=printer_lock, args=(each_name, lock))</span><br><span class="line">           proc_list.append(multi_proc_lock)</span><br><span class="line">           multi_proc_lock.start()</span><br><span class="line">   </span><br><span class="line">       <span class="keyword">for</span> each_proc <span class="keyword">in</span> proc_list:</span><br><span class="line">           each_proc.join()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Parent pid: 9313</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#In printer, string: mo, pid: 9314</span></span><br><span class="line"><span class="comment">#In printer, string: liang, pid: 9316</span></span><br><span class="line"><span class="comment">#In printer, string: guo, pid: 9315</span></span><br><span class="line"><span class="comment">#In printer, string: mogl, pid: 9317</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#In printer, string: mo, pid: 9318</span></span><br><span class="line"><span class="comment">#In printer, string: guo, pid: 9319</span></span><br><span class="line"><span class="comment">#In printer, string: liang, pid: 9320</span></span><br><span class="line"><span class="comment">#In printer, string: mogl, pid: 9321</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>multiprocessing.Queue &amp; multiprocessing.Pipe</strong><br>  &emsp;<code>multiprocessing</code>支持两种进程间通信方式：<strong><code>Queue</code></strong>、<strong><code>PIPE</code></strong>，<code>Queue</code>是进程安全的。</p>
<ul>
<li><p><strong>multiprocessing.Queue</strong><br>  &emsp;使用<code>Queue</code>实现进程间通信，进程A使用<code>put()</code>方法将数据存入<code>Queue</code>，进程B使用<code>get()</code>方法从<code>Queue</code>中读取数据。<br>  &emsp;<code>put()</code>、<code>get()</code>方法都有两个参数：<strong><code>block</code></strong>、<strong><code>timeout</code></strong>，若<code>block=False</code>，Queue为<code>full</code>/<code>empty</code>则抛出异常，若设置了<code>timeout</code>则阻塞等待再一次<code>put</code>/<code>get</code>。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line">      <span class="keyword">import</span> os</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">write_queue</span><span class="params">(queue)</span>:</span></span><br><span class="line">          <span class="keyword">print</span> <span class="string">"In write_queue pid: %s"</span> % os.getpid()</span><br><span class="line">          queue.put([<span class="string">'mogl'</span>], block=<span class="keyword">False</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">read_queue</span><span class="params">(queue)</span>:</span></span><br><span class="line">          <span class="keyword">print</span> <span class="string">"In read_queue pid: %s"</span> % os.getpid()</span><br><span class="line">          <span class="keyword">print</span> queue.get(block=<span class="keyword">False</span>)</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">          <span class="keyword">print</span> <span class="string">"Parent pid: %s"</span> % os.getpid()</span><br><span class="line">          queue = Queue()</span><br><span class="line"></span><br><span class="line">          write_proc = Process(target=write_queue, args=(queue,))</span><br><span class="line">          write_proc.start()</span><br><span class="line"></span><br><span class="line">          read_proc = Process(target=read_queue, args=(queue,))</span><br><span class="line">          read_proc.start()</span><br><span class="line">      </span><br><span class="line">          write_proc.join()</span><br><span class="line">          read_proc.join()</span><br><span class="line"></span><br><span class="line"><span class="comment">#Parent pid: 18383</span></span><br><span class="line"><span class="comment">#In write_queue pid: 18384</span></span><br><span class="line"><span class="comment">#In read_queue pid: 18385</span></span><br><span class="line"><span class="comment">#['mogl']</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>multiprocessing.Pipe</strong><br>  &emsp;<code>Pipe()</code>方法会返回<code>(c1, c2)</code>代表一个管道的两端，默认<code>Pipe()</code>的<code>duplex=True</code>表示全双工管道，即管道的任意一端都可发送和接收信息。若<code>duplex=False</code>则<code>c1</code>只负责接收，<code>c2</code>只负责发送。当调用<code>recv()</code>方法从管道读取消息时候，若管道一端无消息，<code>recv()</code>则会<strong>一直阻塞</strong>。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line">      <span class="keyword">import</span> os</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">process_one</span><span class="params">(pipe)</span>:</span></span><br><span class="line">          pipe.send(<span class="string">'hello, process_one send message.'</span>)</span><br><span class="line">          <span class="keyword">print</span> <span class="string">'process_one receive message:'</span>, pipe.recv()</span><br><span class="line">          <span class="keyword">print</span> <span class="string">"process_one pid:"</span>, os.getpid()</span><br><span class="line">      </span><br><span class="line">      <span class="function"><span class="keyword">def</span> <span class="title">process_two</span><span class="params">(pipe)</span>:</span></span><br><span class="line">          <span class="keyword">print</span> <span class="string">'process_two receive message:'</span>, pipe.recv()</span><br><span class="line">          pipe.send(<span class="string">'hello, process_two send message.'</span>)</span><br><span class="line">          <span class="keyword">print</span> <span class="string">"process_two pid:"</span>, os.getpid()</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">          pipe = Pipe()</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">print</span> <span class="string">"main pid:"</span>, os.getpid()</span><br><span class="line">          pro1 = Process(target=process_one, args=(pipe[<span class="number">0</span>],))</span><br><span class="line">          pro2 = Process(target=process_two, args=(pipe[<span class="number">1</span>],))</span><br><span class="line">          </span><br><span class="line">          pro1.start()</span><br><span class="line">          pro2.start()</span><br><span class="line">          pro1.join()</span><br><span class="line">          pro2.join()</span><br><span class="line"></span><br><span class="line"><span class="comment">#process_one发送消息后recv，由于管道一端无消息而阻塞，故先打印process_two的内容</span></span><br><span class="line"><span class="comment">#main pid: 14215</span></span><br><span class="line"><span class="comment">#process_two receive message: hello, process_one send message.</span></span><br><span class="line"><span class="comment">#process_two pid: 14217</span></span><br><span class="line"><span class="comment">#process_one receive message: hello, process_two send message.</span></span><br><span class="line"><span class="comment">#process_one pid: 14216</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>multiprocessing.Pool</strong><br>  &emsp;Python多进程支持进程池，使用<code>multiprocessing.Pool</code>能创建一个进程池可指定进程数量，当请求提交给pool后，若pool没满则可创建新进程处理该请求，若已满则等待空闲后再处理。<br>  &emsp;进程池中进程的创建可通过<code>apply_async(func[, args[, kwds[, callback]]])</code>或<code>apply(func[, args[, kwds]])</code>方法。<code>apply_async()</code>是<strong>非阻塞</strong>，<code>apply()</code>是<strong>阻塞</strong>(进程池中一个进程执行完才会执行下一个)。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool</span><br><span class="line">  <span class="keyword">import</span> os</span><br><span class="line">  <span class="keyword">import</span> time</span><br><span class="line">  <span class="keyword">import</span> random</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">child_process_task</span><span class="params">(name)</span>:</span></span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Running task %s, pid %s"</span> % (name, os.getpid())</span><br><span class="line">      start_time = time.time()</span><br><span class="line">      time.sleep(random.random() * <span class="number">3</span>)</span><br><span class="line">      end_time = time.time()</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Task %s is over and runs %0.2f seconds."</span> % (name, (end_time - start_time))</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Parrent process pid %s"</span> % os.getpid()</span><br><span class="line">      <span class="comment">#创建进场池。限制并发数量：child_pool = Pool(processes=4)</span></span><br><span class="line">      child_pool = Pool()</span><br><span class="line">      <span class="keyword">for</span> eachpid <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">          <span class="comment">#批量创建子进场(指定执行函数及其参数)</span></span><br><span class="line">          child_pool.apply_async(child_process_task, args=(eachpid,))</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"Waitting for all child process done..."</span></span><br><span class="line"><span class="comment">#调用join()前必须先调用close()。close()关闭pool不在接受新请求。join()等待所有子进程结束</span></span><br><span class="line">      child_pool.close()</span><br><span class="line">      child_pool.join()</span><br><span class="line">      <span class="keyword">print</span> <span class="string">"All process is done."</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><span id="MySQLdb"></span></p>
<h3 id="MySQLdb"><strong>MySQLdb</strong></h3><p>&emsp;<a href="http://mysql-python.sourceforge.net/MySQLdb.html" target="_blank" rel="external">MySQLdb</a>是第三方模块，用于连接及操作MySQL。<br>&emsp;一般先使用<code>MySQLdb.connect()</code>方法创建连接对象，该连接对象支持事务操作，即允许<code>commit()</code>和<code>rollback()</code>。然后使用<code>cursor()</code>方法获取游标对象，该对象做两类操作——<strong>执行sql</strong>和<strong>获取查询结果</strong>。最后操作完数据库后需要调用<code>close()</code>方法关闭相关对象。</p>
<h4 id="执行sql"><strong>执行sql</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MySQLdb</span><br><span class="line"></span><br><span class="line">create_sql = <span class="string">"""CREATE TABLE STUDENT (</span><br><span class="line">        NAME  CHAR(20) NOT NULL,</span><br><span class="line">        AGE INT,</span><br><span class="line">        GENDER CHAR(10))"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    db_conn = MySQLdb.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'fate'</span>, db=<span class="string">'test'</span>, port=<span class="number">3306</span>)</span><br><span class="line">    db_cur = db_conn.cursor()</span><br><span class="line">    db_cur.execute(create_sql)</span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line">    <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    db_cur.close()</span><br><span class="line">    db_conn.close()</span><br></pre></td></tr></table></figure>
<p>&emsp;更新(update)、删除(delete)和插入(insert)等支持事务操作。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">insert_sql = <span class="string">'INSERT INTO STUDENT(NAME, AGE, GENDER)\</span><br><span class="line">    VALUES ("%s", "%s", "%s")'</span> % (<span class="string">'mogl'</span>, <span class="number">10</span>, <span class="string">'male'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    db_conn = MySQLdb.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'fate'</span>, db=<span class="string">'test'</span>, port=<span class="number">3306</span>)</span><br><span class="line">    db_cur = db_conn.cursor()</span><br><span class="line">    db_cur.execute(insert_sql)</span><br><span class="line">    db_conn.commit()</span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line">    db_conn.rollback()</span><br><span class="line">    <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    db_cur.close()</span><br><span class="line">    db_conn.close()</span><br></pre></td></tr></table></figure></p>
<h4 id="获取查询结果"><strong>获取查询结果</strong></h4><p>&emsp;使用<code>fetchall()</code>返回<code>select</code>查询的所有结果，默认每行结果以<strong>元组</strong>形式返回，可使用<strong><code>cursorclass=MySQLdb.cursors.DictCursor</code></strong>返回<strong>字典</strong>形式。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select_sql = <span class="string">"select * from STUDENT"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    db_conn = MySQLdb.connect(host=<span class="string">'localhost'</span>, user=<span class="string">'root'</span>, passwd=<span class="string">'fate'</span>, db=<span class="string">'test'</span>, port=<span class="number">3306</span>)</span><br><span class="line">    db_cur = db_conn.cursor(cursorclass=MySQLdb.cursors.DictCursor)</span><br><span class="line">    db_cur.execute(select_sql)</span><br><span class="line">    select_result = db_cur.fetchall()</span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line">    <span class="keyword">raise</span> e</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    db_cur.close()</span><br><span class="line">    db_conn.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> select_result:</span><br><span class="line">    <span class="keyword">print</span> row[<span class="string">'NAME'</span>], row[<span class="string">'AGE'</span>], row[<span class="string">'GENDER'</span>]</span><br></pre></td></tr></table></figure></p>
<p><span id="ConfigParser"></span></p>
<h3 id="ConfigParser"><strong>ConfigParser</strong></h3><p>&emsp;<a href="http://python.usyiyi.cn/python_278/library/configparser.html" target="_blank" rel="external">ConfigParser</a>模块用来解析类似ini格式的配置文件。<br>&emsp;ini格式配置文件大致如下：</p>
<ul>
<li><code>section</code>：<code>[test1]</code>、<code>[test2]</code></li>
<li><code>option</code>：<code>section</code>下所有的键</li>
<li><code>items</code>：<code>section</code>下所有的键值对<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#test.cfg</span></span><br><span class="line"></span><br><span class="line">[test1]</span><br><span class="line">name = mogl</span><br><span class="line">passwd = <span class="number">1234</span></span><br><span class="line"></span><br><span class="line">[test2]</span><br><span class="line">name = moguoliang</span><br><span class="line">passwd = <span class="number">4321</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ConfigParser</span><br><span class="line"></span><br><span class="line">config_file = <span class="string">'test.cfg'</span></span><br><span class="line">parser = ConfigParser.SafeConfigParser()</span><br><span class="line"><span class="comment">#parser.read(config_file)</span></span><br><span class="line"><span class="keyword">with</span> open(config_file, <span class="string">'r'</span>) <span class="keyword">as</span> cfg:</span><br><span class="line">    parser.readfp(cfg)</span><br><span class="line"></span><br><span class="line"><span class="comment">#读操作</span></span><br><span class="line"><span class="keyword">print</span> parser.sections()</span><br><span class="line"><span class="comment">#['test1', 'test2', 'test3']</span></span><br><span class="line"><span class="keyword">print</span> parser.options(<span class="string">'test1'</span>)</span><br><span class="line"><span class="comment">#['name', 'passwd']</span></span><br><span class="line"><span class="keyword">print</span> parser.items(<span class="string">'test1'</span>)</span><br><span class="line"><span class="comment">#[('name', 'mogl'), ('passwd', '1234')]</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> parser.items(<span class="string">'test1'</span>):</span><br><span class="line">    <span class="keyword">print</span> key, value</span><br><span class="line"><span class="keyword">print</span> parser.get(<span class="string">'test1'</span>, <span class="string">'name'</span>)</span><br><span class="line"><span class="comment">#mogl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#写操作</span></span><br><span class="line">parser.set(<span class="string">'test2'</span>, <span class="string">'passwd'</span>, <span class="string">'1234'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">'test3'</span> <span class="keyword">not</span> <span class="keyword">in</span> parser.sections():</span><br><span class="line">    parser.add_section(<span class="string">'test3'</span>)</span><br><span class="line">    parser.set(<span class="string">'test3'</span>, <span class="string">'name'</span>, <span class="string">'mogltest'</span>)</span><br><span class="line"><span class="keyword">with</span> open(config_file, <span class="string">'w'</span>) <span class="keyword">as</span> cfg:</span><br><span class="line">    parser.write(cfg)</span><br></pre></td></tr></table></figure>
<p><span id="lxml"></span></p>
<h3 id="lxml"><strong>lxml</strong></h3><p>&emsp;<a href="">lxml</a>用于解析xml或html，用法比较复杂，这里只记录自己用到的简单功能。</p>
<ul>
<li><p><strong>cssselect()</strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line"><span class="comment">#实例一</span></span><br><span class="line">page = <span class="string">'&lt;img class="BDE_Image" src="http://test.com/test.jpg" width="560" height="323"&gt;'</span></span><br><span class="line">doc = html.fromstring(page)</span><br><span class="line"><span class="keyword">for</span> index, content <span class="keyword">in</span> enumerate(doc.cssselect(<span class="string">'img.BDE_Image'</span>)):</span><br><span class="line">	img_src = content.attrib[<span class="string">'src'</span>]</span><br><span class="line">	<span class="keyword">print</span> index, img_src</span><br><span class="line"><span class="comment">#0 http://test.com/test.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例二</span></span><br><span class="line"></span><br><span class="line">page = <span class="string">"""</span><br><span class="line">	&lt;div class="buyer-name"&gt;mogl&lt;/div&gt;</span><br><span class="line">	&lt;span class="item-price" src='http://test.com/test.html'&gt;$2.9&lt;/span&gt;</span><br><span class="line">	&lt;span class="item-price" src='http://test.com/test2.html'&gt;$3.0&lt;/span&gt;</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line">htmlDoc = html.fromstring(page)</span><br><span class="line"></span><br><span class="line">buyers = htmlDoc.cssselect(<span class="string">'div.buyer-name'</span>)</span><br><span class="line">prices = htmlDoc.cssselect(<span class="string">'span.item-price'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> eachBuyer <span class="keyword">in</span> htmlDoc.cssselect(<span class="string">'div.buyer-name'</span>):</span><br><span class="line">	<span class="keyword">print</span> <span class="string">"buyer:"</span>, eachBuyer.text_content()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> eachPrice <span class="keyword">in</span> htmlDoc.cssselect(<span class="string">'span.item-price'</span>):</span><br><span class="line">	<span class="keyword">print</span> eachPrice.text_content()</span><br><span class="line">	<span class="keyword">print</span> eachPrice.attrib[<span class="string">'src'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#buyer: mogl</span></span><br><span class="line"><span class="comment">#$2.9</span></span><br><span class="line"><span class="comment">#http://test.com/test.html</span></span><br><span class="line"><span class="comment">#$3.0</span></span><br><span class="line"><span class="comment">#http://test.com/test2.html</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>xpath</strong><br>  &emsp;先简单记录<code>xpath</code>的路径表达式：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:center">表达式</th>
<th></th>
<th></th>
<th style="text-align:center">实例</th>
<th style="text-align:left">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">/</td>
<td></td>
<td></td>
<td style="text-align:center">xpath(‘/div’)</td>
<td style="text-align:left">从根节点选取<code>div</code>节点</td>
</tr>
<tr>
<td style="text-align:center">//</td>
<td></td>
<td></td>
<td style="text-align:center">xpath(‘//div’)</td>
<td style="text-align:left">选取所有<code>div</code>节点</td>
</tr>
<tr>
<td style="text-align:center">.</td>
<td></td>
<td></td>
<td style="text-align:center">xpath(‘./div’)</td>
<td style="text-align:left">选取当前节点下的<code>div</code>节点</td>
</tr>
<tr>
<td style="text-align:center">..</td>
<td></td>
<td></td>
<td style="text-align:center">xpath(‘..’)</td>
<td style="text-align:left">选取父节点</td>
</tr>
<tr>
<td style="text-align:center">@</td>
<td></td>
<td></td>
<td style="text-align:center">xpath(‘//@class’)</td>
<td style="text-align:left">选取属性</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> html</span><br><span class="line"></span><br><span class="line">page = <span class="string">"""</span><br><span class="line">    &lt;div title="buyer-name"&gt;mogl&lt;/div&gt;</span><br><span class="line">    &lt;span class="item-price" src='http://test.com/test.html'&gt;$2.9&lt;/span&gt;</span><br><span class="line">    &lt;span class="item-price" src='http://test2.com/test2.html'&gt;$2.7&lt;/span&gt;</span><br><span class="line">    """</span></span><br><span class="line">htmlDoc = html.fromstring(page)</span><br><span class="line"></span><br><span class="line">buyers = htmlDoc.xpath(<span class="string">'//div[@title="buyer-name"]/text()'</span>)</span><br><span class="line">prices = htmlDoc.xpath(<span class="string">'//span[@class="item-price"]/text()'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"buyers:"</span>, buyers</span><br><span class="line"><span class="keyword">print</span> <span class="string">"prices:"</span>, prices</span><br><span class="line"><span class="comment">#buyers: ['mogl']</span></span><br><span class="line"><span class="comment">#prices: ['$2.9', '$2.7']</span></span><br><span class="line"></span><br><span class="line">prices2 = htmlDoc.xpath(<span class="string">'//span[@class="item-price"]/@src'</span>)</span><br><span class="line"><span class="keyword">print</span> prices2</span><br><span class="line"><span class="comment">#['http://test.com/test.html', 'http://test2.com/test2.html']</span></span><br></pre></td></tr></table></figure>
<p><span id="BeautifulSoup"></span></p>
<h3 id="BeautifulSoup"><strong>BeautifulSoup</strong></h3><p>&emsp;<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="external">BeautifulSoup</a>模块和<code>lxml</code>类似都是用来解析HTML/XML的。该模块是是第三方模块需要安装。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; pip install beautifulsoup4</span><br></pre></td></tr></table></figure></p>
<p>&emsp;为了方便记录，就以以下的HTML代码为解析例子<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">html = <span class="string">"""</span><br><span class="line">&lt;html&gt;&lt;head&gt;&lt;title&gt;The BeautifulSoup test&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;a class="mnav" href="http://news.mogl.com" name="news"&gt;新闻&lt;/a&gt;</span><br><span class="line">&lt;img src=http://www.mogl.com/img/test.png width=270 height=129&gt;</span><br><span class="line">"""</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;默认Python会使用内置的解析器进行解析，但速度较慢，这里使用<code>lxml</code>来进行解析(需要先装<code>lxml</code>)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建BeautifulSoup对象</span></span><br><span class="line">soup = BeautifulSoup(html, <span class="string">'lxml'</span>)</span><br><span class="line"><span class="comment">#格式化输出</span></span><br><span class="line"><span class="keyword">print</span> soup.prettify(<span class="string">'utf-8'</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="Tag——标签"><strong>Tag——标签</strong></h4><p>&emsp;<strong><code>Tag</code></strong>是HTML中的标签，诸如<code>title</code>和<code>a</code>等。BeautifulSoup对<code>Tag</code>的处理主要包含三种：</p>
<ul>
<li><strong>name</strong></li>
<li><strong>string</strong></li>
<li><strong>attrs</strong></li>
</ul>
<p>&emsp;获取整个<code>Tag</code><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> soup.title</span><br><span class="line"><span class="keyword">print</span> soup.head</span><br><span class="line"><span class="keyword">print</span> soup.a</span><br><span class="line"><span class="keyword">print</span> soup.img</span><br><span class="line"><span class="comment">#&lt;title&gt;The BeautifulSoup test&lt;/title&gt;</span></span><br><span class="line"><span class="comment">#&lt;head&gt;&lt;title&gt;The BeautifulSoup test&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="comment">#&lt;a class="mnav" href="http://news.mogl.com" name="news"&gt;新闻&lt;/a&gt;</span></span><br><span class="line"><span class="comment">#&lt;img height="129" src="http://www.mogl.com/img/test.png" width="270"/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>name</code>是获取<code>Tag</code>的类型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> soup.title.name</span><br><span class="line"><span class="keyword">print</span> soup.a.name</span><br><span class="line"><span class="comment">#title</span></span><br><span class="line"><span class="comment">#a</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>string</code>是获取<code>Tag</code>标签中的文本内容<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> soup.title.string</span><br><span class="line"><span class="keyword">print</span> soup.a.string</span><br><span class="line"><span class="comment">#The BeautifulSoup test</span></span><br><span class="line"><span class="comment">#新闻</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>attrs</code>是获取<code>Tag</code>标签中的属性<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> soup.a.attrs</span><br><span class="line"><span class="comment">#&#123;'href': 'http://news.mogl.com', 'class': ['mnav'], 'name': 'news'&#125;</span></span><br><span class="line"><span class="keyword">print</span> soup.a[<span class="string">'href'</span>]</span><br><span class="line"><span class="comment">#http://www.mogl.com/img/test.png</span></span><br><span class="line"><span class="keyword">print</span> soup.img.get(<span class="string">'src'</span>)</span><br><span class="line"><span class="comment">#http://www.mogl.com/img/test.png</span></span><br></pre></td></tr></table></figure></p>
<h4 id="find_all——搜索"><strong>find_all——搜索</strong></h4><p>&emsp;<code>find_all()</code>是搜索当前<code>tag</code>的所有节点，返回<strong>符合条件</strong>的<code>tag</code>对象<strong>list</strong>。<br>&emsp;<code>find_all()</code>可对<code>tag.name</code>和<code>tag.attrs</code>进行搜索，还支持对使用<code>re</code>的正则匹配。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> soup.find_all(<span class="string">'a'</span>)</span><br><span class="line"><span class="comment">#[&lt;a class="mnav" href="http://news.mogl.com" name="news"&gt;新闻&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.find_all([<span class="string">'a'</span>, <span class="string">'img'</span>])</span><br><span class="line"><span class="comment">#[&lt;a class="mnav" href="http://news.mogl.com" name="news"&gt;新闻&lt;/a&gt;, &lt;img height="129" src="http://www.mogl.com/img/test.png" width="270"/&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.find_all(re.compile(<span class="string">r'^a|^i'</span>))</span><br><span class="line"><span class="comment">#[&lt;a class="mnav" href="http://news.mogl.com" name="news"&gt;新闻&lt;/a&gt;, &lt;img height="129" src="http://www.mogl.com/img/test.png" width="270"/&gt;]</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;对<code>tag.attrs</code>进行搜索。当对HTML的<code>class</code>属性搜索时，为避免与Python内置的<code>class</code>关键字冲突，使用<strong><code>class_</code></strong>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> soup.find_all(<span class="string">'a'</span>, class_=<span class="string">"mnav"</span>)</span><br><span class="line"><span class="comment">#[&lt;a class="mnav" href="http://news.mogl.com" name="news"&gt;新闻&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> soup.find_all(href=re.compile(<span class="string">'mogl.com'</span>), class_=<span class="string">"mnav"</span>)</span><br><span class="line"><span class="comment">#[&lt;a class="mnav" href="http://news.mogl.com" name="news"&gt;新闻&lt;/a&gt;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num, each_tag <span class="keyword">in</span> enumerate(soup.find_all(<span class="string">'img'</span>)):</span><br><span class="line">    <span class="keyword">print</span> num, each_tag[<span class="string">'width'</span>]</span><br><span class="line"><span class="comment">#0 270</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;Python库非常多，为方便快速查询，将自己之前用到的库做个简单汇总记录，不定期持续更新。</p>
<h3 id="目录"><strong>目录</strong></h3><ul>
<li><a href="#shutil">shutil</a></li>
<l]]>
    </summary>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Celery浅记]]></title>
    <link href="http://yoursite.com/2016/08/15/celery/"/>
    <id>http://yoursite.com/2016/08/15/celery/</id>
    <published>2016-08-15T14:00:37.000Z</published>
    <updated>2016-09-11T09:55:02.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍"><strong>介绍</strong></h2><p>&emsp;最近工作要异步执行任务，需要用到<a href="http://docs.celeryproject.org/en/latest/" target="_blank" rel="external">Celery</a>故简单记录一下使用过程。<br>&emsp;Celery常用于实时处理任务队列或任务调度，Celery适用于以下场景：</p>
<ul>
<li>异步执行任务：当需要发送邮件或执行耗时操作时，程序需要等待执行结果才能继续。若将这些任务交给Celery异步执行，可大大提高效率。</li>
<li>定时任务：Celery支持定时任务调度，可用于实现crontab之类的功能。</li>
</ul>
<h2 id="基础概念"><strong>基础概念</strong></h2><p>&emsp;Celery一般的工作流程如下所示：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">|</span> <span class="comment">Producer</span> <span class="comment">(Python)</span> <span class="comment">|</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">|</span> <span class="comment">Broker</span> <span class="comment">(Redis/RabbitMQ)</span> <span class="comment">|</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">|</span> <span class="comment">Celery</span> <span class="comment">Worker</span> <span class="comment">(1</span><span class="string">.</span><span class="string">.</span><span class="comment">N)</span> <span class="comment">|</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt; <span class="comment">|</span> <span class="comment">Backend</span> <span class="comment">(Redis/RabbitMQ)</span> <span class="comment">|</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong><code>Producer</code></strong>：<strong>任务生产者</strong>。这里使用的是Python，通过Python调用Celery的API生产任务。</li>
<li><strong><code>Broker</code></strong>：<strong>消息代理</strong>。接收Producer生产的任务，存入任务队列后依序将任务分派给Celery Worker。目前Celery支持的Broker有：<a href="http://docs.celeryproject.org/en/latest/getting-started/brokers/index.html" target="_blank" rel="external">Celery Broker</a>。最常用的就是RabbitMQ和Redis</li>
<li><strong><code>Celery Worker</code></strong>：<strong>任务消费者</strong>。用于执行任务，通常需要使用<code>celery -A [celery.task] worker -l INFO</code>命令运行Celery Worker。</li>
<li><strong><code>Backend</code></strong>：<strong>任务结果存储</strong>。存储任务执行的结果以便查询，默认支持和Broker差不多，常用的也是RabbitMQ和Redis。是否存储结果是可选的，若不设置Backend则不存储任务结果。</li>
</ul>
<h2 id="安装"><strong>安装</strong></h2><p>&emsp;安装使用pip即可，这里使用的Broker为Redis所以在安装Celery时一起将相关依赖给装上<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Redis</span></span><br><span class="line">pip <span class="keyword">install</span> celery[redis]</span><br><span class="line"></span><br><span class="line"><span class="comment">#RabbitMQ</span></span><br><span class="line">pip <span class="keyword">install</span> celery[librabbitmq,msgpack]</span><br></pre></td></tr></table></figure></p>
<h2 id="应用实例"><strong>应用实例</strong></h2><h3 id="配置"><strong>配置</strong></h3><p>&emsp;要使用Celery先要告知Celery使用什么Broker、Backend等一系列信息，故需要进行相关配置。配置大致可分两种形式，一种是直接将Broker等信息写到代码中，一种是将信息先写入配置文件，然后在代码中加载配置。为了方便管理配置，我习惯使用后者。</p>
<ul>
<li>配置文件——<strong><code>celeryconfig.py</code></strong><br>  &emsp;配置文件中有些涉及到定时任务调度，后面会提到可先忽略。  <figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from celery.schedules import crontab</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#Redis作为Broker</span></span><br><span class="line">BROKER_URL = <span class="string">'redis://localhost:6379/0'</span></span><br><span class="line"><span class="preprocessor">#Redis作为Backend</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">'redis://localhost:6379/1'</span></span><br><span class="line"><span class="preprocessor">#任务结果过期时间(seconds)</span></span><br><span class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">60</span> * <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#BROKER_TRANSPORT_OPTIONS = &#123;'visibility_timeout': 144000&#125;</span></span><br><span class="line"><span class="preprocessor">#CELERY_IGNORE_RESULT = True</span></span><br><span class="line"><span class="preprocessor">#CELERYD_MAX_TASKS_PER_CHILD = 100</span></span><br><span class="line"></span><br><span class="line">CELERY_TASK_SERIALIZER = <span class="string">'json'</span></span><br><span class="line">CELERY_RESULT_SERIALIZER = <span class="string">'json'</span></span><br><span class="line">CELERY_ACCEPT_CONTENT = [<span class="string">'json'</span>]</span><br><span class="line"><span class="preprocessor">#CELERY_TASK_SERIALIZER = 'msgpack'</span></span><br><span class="line"><span class="preprocessor">#CELERY_ACCEPT_CONTENT = ['json', 'msgpack']</span></span><br><span class="line">CELERY_TIMEZONE = <span class="string">'Asia/Shanghai'</span></span><br><span class="line">CELERY_ENABLE_UTC = False</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建任务(task)"><strong>创建任务(task)</strong></h3><p>&emsp;使用Celery的API创建任务非常简单，两步即可完成：</p>
<ol>
<li>实例化Celery对象，命名为<code>celery</code></li>
<li>使用<strong><code>@celery.task</code></strong>装饰器装饰任务函数</li>
</ol>
<ul>
<li><p>任务程序——<strong><code>tasks.py</code></strong><br>  &emsp;默认Celery Worker是不允许以root用户启动，若需要以root用户启动则需配置<code>platforms.C_FORCE_ROOT = True</code></p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from celery import Celery, platforms</span><br><span class="line">import paramiko</span><br><span class="line"></span><br><span class="line">#实例化Celery对象</span><br><span class="line">celery = <span class="function"><span class="title">Celery</span><span class="params">(__name__)</span></span></span><br><span class="line">#从配置文件加载配置</span><br><span class="line">celery.<span class="function"><span class="title">config_from_object</span><span class="params">(<span class="string">'celeryconfig'</span>)</span></span></span><br><span class="line">#允许root启动</span><br><span class="line"><span class="id">#platforms</span><span class="class">.C_FORCE_ROOT</span> = True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@celery<span class="class">.task</span></span><br><span class="line">def <span class="function"><span class="title">add</span><span class="params">(x, y)</span></span>:</span><br><span class="line">	return x + y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#设置重试</span><br><span class="line">@celery.<span class="function"><span class="title">task</span><span class="params">(bind=True, default_retry_delay=<span class="number">300</span>, max_retries=<span class="number">5</span>)</span></span></span><br><span class="line">def <span class="function"><span class="title">add_retry</span><span class="params">(x, y)</span></span></span><br><span class="line">	return x + y</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用任务——<strong><code>test.py</code></strong><br>  &emsp;调用已写好的任务程序产生任务<br>  &emsp;<code>add.delay(1, 1)</code>其实是<code>add.apply_async(1, 1)</code>的简写。</p>
  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">from</span> tasks import <span class="built_in">add</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">add</span>.delay(<span class="number">1</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>运行Celery Worker<br>  &emsp;需要运行Celery Worker去执行任务，可结合Supervisor</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your_project_dir</span><br><span class="line">celery -A tasks worker <span class="operator">-l</span> INFO</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="定时任务"><strong>定时任务</strong></h3><p>&emsp;Celery支持任务调度，使用Celery Beat执行定时任务</p>
<ul>
<li><p>配置文件——<strong><code>crontab_celeryconfig.py</code></strong> </p>
  <figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">from celery.schedules <span class="keyword">import</span> crontab</span><br><span class="line"><span class="constant"></span><br><span class="line">BROKER_URL</span> = 'redis:<span class="comment">//localhost:6379/2'</span></span><br><span class="line"><span class="constant">CELERY_RESULT_BACKEND</span> = 'redis:<span class="comment">//localhost:6379/3'</span></span><br><span class="line"><span class="constant"></span><br><span class="line">CELERY_TASK_SERIALIZER</span> = 'json'</span><br><span class="line"><span class="constant">CELERY_RESULT_SERIALIZER</span> = 'json'</span><br><span class="line"><span class="constant">CELERY_ACCEPT_CONTENT</span> = ['json']</span><br><span class="line"><span class="constant">CELERY_TIMEZONE</span> = 'Asia/Shanghai'</span><br><span class="line"><span class="constant">CELERY_ENABLE_UTC</span> = False</span><br><span class="line"><span class="constant"></span><br><span class="line">CELERYBEAT_SCHEDULE</span> = &#123;</span><br><span class="line">	<span class="string">"add"</span>: &#123;</span><br><span class="line">		<span class="string">"task"</span>: <span class="string">"crontab_tasks.sendmail"</span>,</span><br><span class="line">		<span class="string">"schedule"</span>: crontab(minute='*/<span class="number">1</span>')</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>任务程序——<strong>crontab_tasks.py</strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">crontab_celery = Celery(__name__)</span><br><span class="line">crontab_celery.config_from_object(<span class="string">'crontab_celeryconfig'</span>)</span><br><span class="line"></span><br><span class="line"><span class="decorator">@crontab_celery.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sendmail</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">print</span> <span class="string">"Celery Crontab Tast Test"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Celery Worker &amp; Beat<br>  &emsp;启动Celery的Worker和Beat，每分钟定时执行<code>sendmail()</code>函数</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A crontab_tasks worker -B <span class="operator">-l</span> INFO <span class="operator">-s</span> /tmp/celerybeat-schedule</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="后续"><strong>后续</strong></h2><p>&emsp;目前只是简单的使用了Celery的基础功能，更多高级功能以后用到再继续补上</p>
<ul>
<li><p>手动指定路由(Route)和队列(Queue)<br>  当使用RabbitMQ作为Broker时，可手动指定任务的队列和路由。Celery默认所有任务都到<code>celery</code>的队列中。详细参考以下文章：</p>
<ul>
<li><a href="http://docs.celeryproject.org/en/latest/userguide/routing.html#manual-routing" target="_blank" rel="external">Celery官方Routing文档</a></li>
<li><a href="http://lsq.me/2013/12/20/python/celery-manual-routing/" target="_blank" rel="external">Celery 如何手动路由任务</a></li>
<li><a href="http://linpingta.cn/blog/2016/03/19/celery-2/" target="_blank" rel="external">Celery 概念：分布式、路由队列与工作流</a></li>
</ul>
</li>
<li><p>flower<br>  &emsp;flower提供Web界面对Celery进行监控</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍"><strong>介绍</strong></h2><p>&emsp;最近工作要异步执行任务，需要用到<a href="http://docs.celeryproject.org/en/latest/" target="_blank" rel="externa]]>
    </summary>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python回炉记]]></title>
    <link href="http://yoursite.com/2016/06/18/python_note/"/>
    <id>http://yoursite.com/2016/06/18/python_note/</id>
    <published>2016-06-18T14:20:20.000Z</published>
    <updated>2016-06-18T15:44:40.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;所谓回炉，即回炉重练。以前学Python只是抱着玩玩的心态学，但现在下定决心要好好认真学习。于是决定完全重头开始学起，主要是根据Python2.7的官方文档和网上诸多的资料来学。由于资料繁多且杂乱无法一一列举，仅将回炉所学记录以便日后翻阅。</p>
<h2 id="一、计算"><strong>一、计算</strong></h2><ul>
<li><strong><code>/</code></strong>——除法：返回的类型取决于它的操作数。如果两个操作数都是int，将采用<strong>floor</strong>除法并返回一个int。如果两个操作数中有一个是float，将采用传统的除法并返回一个float。</li>
<li><strong><code>//</code></strong>——floor除法：无论操作数是什么类型，都将采用floor除法并返回一个int。</li>
<li><strong><code>%</code></strong>——求余：求取余数</li>
<li><strong>**</strong>——乘方：幂运算。<code>**</code>的优先级高于<code>-</code>，<code>-3**2</code>解析为<code>-(3**2)</code>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="number">17</span> / <span class="number">3</span>  <span class="comment"># int / int -&gt; int</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="number">17</span> / <span class="number">3.0</span>  <span class="comment"># int / float -&gt; float</span></span><br><span class="line"><span class="number">5.666666666666667</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="number">17</span> // <span class="number">3.0</span>  <span class="comment"># explicit floor division discards the fractional part</span></span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="number">17</span> % <span class="number">3</span>  <span class="comment"># the % operator returns the remainder of the division</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="number">5</span> * <span class="number">3</span> + <span class="number">2</span>  <span class="comment"># result * divisor + remainder</span></span><br><span class="line"><span class="number">17</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="number">5</span> ** <span class="number">2</span>  <span class="comment"># 5 squared</span></span><br><span class="line"><span class="number">25</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="二、字符串"><strong>二、字符串</strong></h2><ul>
<li>字符串用单引号或双引号括起，可用<code>\\</code>转义引号。</li>
<li>使用<strong>原始字符串</strong>，在引号前加上<strong><code>r</code></strong>：<code>print r&#39;C:\some\name&#39;</code>(<code>\n</code>则不会被当成换行符)</li>
<li><p>字符串可用<strong><code>+</code></strong>实现连接，用<strong><code>*</code></strong>实现重复</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; <span class="number">3</span> * <span class="string">'un'</span> + <span class="string">'ium'</span></span><br><span class="line"><span class="string">'unununium'</span></span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; prefix = <span class="string">'Py'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; prefix + <span class="string">'thon'</span></span><br><span class="line"><span class="string">'Python'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>索引</strong><br>  字符串可<strong>索引</strong>，第一个字符的索引值为0。Python<strong>没有单独的字符类型</strong>；<strong>一个字符就是一个简单的长度为1的字符串</strong>。</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word = <span class="string">'Python'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word[<span class="number">0</span>]  <span class="comment"># character in position 0</span></span><br><span class="line"><span class="string">'P'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word[<span class="number">5</span>]  <span class="comment"># character in position 5</span></span><br><span class="line"><span class="string">'n'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word[-<span class="number">1</span>]  <span class="comment"># last character</span></span><br><span class="line"><span class="string">'n'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word[-<span class="number">2</span>]  <span class="comment"># second-last character</span></span><br><span class="line"><span class="string">'o'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word[-<span class="number">6</span>]</span><br><span class="line"><span class="string">'P'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>切片</strong><br>  字符串还支持<strong>切片</strong>操作。切片的索引有默认值——省略的第一个索引默认为零，省略的第二个索引默认为切片的字符串的大小。</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word[<span class="number">0</span><span class="symbol">:</span><span class="number">2</span>]  <span class="comment"># characters from position 0 (included) to 2 (excluded)</span></span><br><span class="line"><span class="string">'Py'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word[<span class="number">2</span><span class="symbol">:</span><span class="number">5</span>]  <span class="comment"># characters from position 2 (included) to 5 (excluded)</span></span><br><span class="line"><span class="string">'tho'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#试图使用太大的索引会导致错误</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word[<span class="number">42</span>]  <span class="comment"># the word only has 7 characters</span></span><br><span class="line"><span class="constant">Traceback</span> (most recent call last)<span class="symbol">:</span></span><br><span class="line">  <span class="constant">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="class"><span class="keyword">module</span>&gt;</span></span><br><span class="line"><span class="constant">IndexError</span><span class="symbol">:</span> string index out of range</span><br><span class="line"></span><br><span class="line"><span class="comment">#当用于切片时，超出范围的切片索引则不会导致错误而是会被优雅处理</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word[<span class="number">4</span><span class="symbol">:</span><span class="number">42</span>]</span><br><span class="line"><span class="string">'on'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; word[<span class="number">42</span><span class="symbol">:</span>]</span><br><span class="line"><span class="string">''</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>不可变性</strong><br>  Python中字符串(string)是<strong>不可变的</strong>，若赋值给字符串索引的位置会导致错误</p>
</li>
<li><strong>长度</strong><br>  内置函数<strong><code>len()</code></strong>可返回字符串长度  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; s = <span class="string">'supercalifragilisticexpialidocious'</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; len(s)</span><br><span class="line"><span class="number">34</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="三、列表"><strong>三、列表</strong></h2><ul>
<li><p><strong>索引</strong> &amp; <strong>分片</strong> &amp; <strong>连接</strong><br>  列表(list)和字符串一样支持索引、分片和连接操作</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; squares = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; squares[<span class="number">0</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; squares[-<span class="number">3</span><span class="symbol">:</span>]</span><br><span class="line">[<span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; squares + [<span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>, <span class="number">36</span>, <span class="number">49</span>, <span class="number">64</span>, <span class="number">81</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>可变性</strong><br>  与字符串的不可变性不同，列表是<strong>可变</strong>的类型，可改变列表的内容且常常使用<strong>append()</strong>方法在列表末尾添加新元素，用<strong>len()</strong>方法获取列表长度</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; squares</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; squares[<span class="number">3</span>] = <span class="number">64</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; squares</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">64</span>, <span class="number">25</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; squares.append(<span class="number">100</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; squares</span><br><span class="line">[<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">64</span>, <span class="number">25</span>, <span class="number">100</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="四、控制流"><strong>四、控制流</strong></h2><h3 id="if语句"><strong>if语句</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"x &lt; 0"</span></span><br><span class="line"><span class="keyword">elif</span> x == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"x == 0"</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">"x &gt; 0"</span></span><br></pre></td></tr></table></figure>
<h3 id="for语句"><strong>for语句</strong></h3><p>&emsp;Python的for语句按照元素出现的顺序迭代任何序列（列表或字符串）<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">words</span> = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="keyword">for</span> each_word <span class="operator">in</span> <span class="keyword">words</span>:</span><br><span class="line">    print each_word, <span class="built_in">len</span>(each_word)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;迭代序列不会隐式地创建副本，若要修改正在循环的序列则需要使用分片创建副本<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> each_word <span class="keyword">in</span> words[:]:</span><br><span class="line">    <span class="keyword">if</span> <span class="function"><span class="title">len</span><span class="params">(each_word)</span></span> &gt; <span class="number">4</span>:</span><br><span class="line">        words.<span class="function"><span class="title">insert</span><span class="params">(<span class="number">0</span>, each_word)</span></span></span><br><span class="line">print words</span><br></pre></td></tr></table></figure></p>
<h3 id="range()"><strong>range()</strong></h3><p>&emsp;产生数字序列。给定的终点永远不会在生成的列表中，可以指定一个不同的步进值默认为1<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">range</span><span class="params">(<span class="number">3</span>)</span></span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">range</span><span class="params">(<span class="number">0</span>, <span class="number">5</span>, <span class="number">2</span>)</span></span></span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure></p>
<h3 id="定义函数"><strong>定义函数</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for myfunc"""</span></span><br><span class="line">    <span class="keyword">print</span> n</span><br><span class="line"></span><br><span class="line">myfunc(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>def</code></strong>：引入函数的<strong>定义</strong></li>
<li><strong><code>myfunc(n)</code></strong>：函数名及以括号标明的形式参数列表</li>
<li><strong><code>&quot;&quot;&quot;docstring for myfunc&quot;&quot;&quot;</code></strong>(可选)：文档字符串，可通过<code>myfunc.__doc__</code>获取</li>
<li><strong><code>print n</code></strong>：函数体，必须<strong>缩进</strong><br>&emsp;执行一个函数时会使用到函数的局部变量符号表，函数的所有赋值都将值存储在局部符号表中。变量引用的优先查找顺序：<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">局部符号表——&gt;上层函数的局部符号表——&gt;全局符号表——&gt;内置名字表</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>&emsp;若函数中没有<strong><code>return</code></strong>或存在不带表达式参数的<strong><code>return</code></strong>，函数会直接返回<strong><code>None</code></strong></p>
<h4 id="默认参数值"><strong>默认参数值</strong></h4><p>&emsp;函数的接收参数可提供默认值。如下函数<code>myfunc(name, age=10)</code>中，<code>age</code>参数的默认值即为<code>10</code>，在调用函数<code>myfunc()</code>是若不传递<code>age</code>的值则使用默认值<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(name, age=<span class="number">10</span>)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for myfunc"""</span></span><br><span class="line">    <span class="keyword">print</span> name, age</span><br><span class="line"></span><br><span class="line">myfunc(<span class="string">'mogl'</span>)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;关于默认参数值有个非常需要注意的地方：默认参数值是在<strong>函数定义时就已经确定</strong>。定义后的所有函数调用，若参数不是<strong>显示</strong>的给予赋值的话，那么该默认参数一直都是引用函数定义时所确定的对象。<br>&emsp;如果默认参数是一个<strong>不可变</strong>的对象(string/num/tuple)，那么在函数体内修改该参数，该参数会会重新引用新的不可变对象的内存地址。<br>&emsp;如果默认参数是一个<strong>可变</strong>的对象(list/dict)，那么在函数体内修改该参数，实际上是对函数定义时就已确定的对象的修改。</p>
<ul>
<li><p>默认参数值为不可变对象</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">5</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(arg=i)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for f"""</span></span><br><span class="line">	<span class="keyword">print</span> arg</span><br><span class="line"></span><br><span class="line">i = <span class="number">6</span></span><br><span class="line">f()		<span class="comment">#结果是5</span></span><br></pre></td></tr></table></figure>
<p>  &emsp;参数<code>arg</code>在函数定义时被确定，在函数定义时<code>i=5</code>，故<code>arg=5</code>。在后续调用函数时<code>fu()</code>并没有<strong>显示</strong>的对<code>arg</code>进行赋值，故<code>arg</code>使用的是函数定义时确定的对象引用的内存地址。</p>
</li>
<li><p>默认参数值为可变对象</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(a, L=[])</span>:</span></span><br><span class="line">    <span class="string">"""docstring for myfunc"""</span></span><br><span class="line">	L.append(a)</span><br><span class="line">	<span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> myfunc(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> myfunc(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">print</span> myfunc(<span class="number">3</span>)</span><br><span class="line">b = []</span><br><span class="line"><span class="keyword">print</span> myfunc(<span class="number">4</span>, b)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果为</span></span><br><span class="line"><span class="comment">#[1]</span></span><br><span class="line"><span class="comment">#[1, 2]</span></span><br><span class="line"><span class="comment">#[1, 2, 3]</span></span><br><span class="line"><span class="comment">#[4]</span></span><br></pre></td></tr></table></figure>
<p>  &emsp;由于默认参数在函数定义时确定，当<code>myfunc(1)</code>、<code>myfunc(2)</code>和<code>myfunc(3)</code>调用函数是并没有<strong>显示</strong>的对默认参数<code>L</code>进行赋值，故三个函数调用使用的都是在函数定义时确定的对象，所以在函数体内进行修改也是对函数定义时就确定的对象进行修改，故三个函数调用共享使用函数定义时确定的对象<code>L</code>。</p>
</li>
</ul>
<h4 id="任意位置参数、关键字参数"><strong>任意位置参数、关键字参数</strong></h4><ul>
<li><p><strong><code>任意位置参数——*args</code></strong><br>  &emsp;函数可使用<code>*args</code>接受任意长度的位置参数，这些参数会被放入一个<strong>元组(tuple)</strong>中。但当<code>*args</code>接收的就是是一个列表或元组时，则会对接收的列表/元组进行<font color="red"><strong>拆分</strong></font>。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(*args)</span>:</span></span><br><span class="line">   <span class="string">"""docstring for myfunc"""</span></span><br><span class="line">   <span class="keyword">for</span> arg <span class="keyword">in</span> args:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"In myfunc(*args)："</span>, arg</span><br><span class="line">   <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> myfunc(<span class="string">'one'</span>, <span class="string">'two'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#In myfunc(*args)： one</span></span><br><span class="line"><span class="comment">#In myfunc(*args)： two</span></span><br><span class="line"><span class="comment">#('one', 'two')		#返回的是一个元组(tuple)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>任意关键字参数——\*\*kwargs</code></strong><br>  &emsp;函数可使用<code>**kwargs</code>接受任意长度的关键字参数，这些参数会被存入一个<strong>字典(dict)</strong>中</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">   <span class="string">"""docstring for myfunc"""</span></span><br><span class="line">   <span class="keyword">for</span> kw <span class="keyword">in</span> kwargs.keys():</span><br><span class="line">       <span class="keyword">print</span> kw, kwargs[kw]</span><br><span class="line">   <span class="keyword">return</span> kwargs</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> myfunc(name=<span class="string">"mogl"</span>, age=<span class="number">10</span>, gender=<span class="string">'man'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gender man</span></span><br><span class="line"><span class="comment">#age 10</span></span><br><span class="line"><span class="comment">#name mogl</span></span><br><span class="line"><span class="comment">#&#123;'gender': 'man', 'age': 10, 'name': 'mogl'&#125;	#返回的是一个字典(dict)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>混合参数<br>  &emsp;混合参数按照此次序定义：<strong>必选参数——&gt;可选参数——&gt;任意位置参数——&gt;任意关键字参数</strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(name, test=None, *args, **kwargs)</span>:</span></span><br><span class="line">   <span class="string">"""docstring for myfunc"""</span></span><br><span class="line">   <span class="keyword">print</span> <span class="string">"name: "</span>, name</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"args: "</span>, args</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"kwargs: "</span>, kwargs</span><br><span class="line"></span><br><span class="line">myfunc(<span class="string">'mogl'</span>, <span class="string">'moguoliang'</span>, <span class="string">'mogl'</span>, age=<span class="number">10</span>, gender=<span class="string">'man'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#name:  mogl</span></span><br><span class="line"><span class="comment">#args:  ('moguoliang', 'mogl')</span></span><br><span class="line"><span class="comment">#kwargs:  &#123;'gender': 'man', 'age': 10&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="lambda表达式"><strong>lambda表达式</strong></h3><p>&emsp;Lambda 函数可以用于任何需要函数对象的地方，用于构造匿名函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_incrementor</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for make_incrementor"""</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">lambda</span> x: x + n</span><br><span class="line"></span><br><span class="line">func = make_incrementor(<span class="number">42</span>)</span><br><span class="line"><span class="keyword">print</span> func(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">print</span> func(<span class="number">1</span>)</span><br><span class="line"><span class="comment">#42</span></span><br><span class="line"><span class="comment">#43</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#单参数</span></span><br><span class="line">mylambda = <span class="keyword">lambda</span> x: x * <span class="number">2</span></span><br><span class="line"><span class="keyword">print</span> mylambda(<span class="number">3</span>)</span><br><span class="line"><span class="comment">#6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#多参数</span></span><br><span class="line">mylambda = <span class="keyword">lambda</span> x, y, z: (x - y) * z</span><br><span class="line"><span class="keyword">print</span> mylambda(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#结合map()函数</span></span><br><span class="line">mylist = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="keyword">print</span> map(<span class="keyword">lambda</span> x: x * <span class="number">2</span> + <span class="number">10</span>, mylist)</span><br><span class="line"><span class="comment">#[14, 18, 22, 26, 30]</span></span><br></pre></td></tr></table></figure></p>
<h2 id="五、数据结构"><strong>五、数据结构</strong></h2><h3 id="列表"><strong>列表</strong></h3><h4 id="列表常用方法"><strong>列表常用方法</strong></h4><ul>
<li><strong><code>list.append(x)</code></strong>：添加一个元素到列表的末尾</li>
<li><strong><code>list.extend(list2)</code></strong>：将指定列表中的所有元素附加到另一个列表的末尾</li>
<li><strong><code>list.insert(i, x)</code></strong>：在给定位置插入一个元素。第一个参数是插入的元素的索引，所以 a.insert(0, x) 在列表的最前面插入，a.insert(len(a), x) 相当于 a.append(x)</li>
<li><strong><code>list.remove(x)</code></strong>：删除列表中第一个值为 x 的元素。如果没有这样的元素将会报错</li>
<li><strong><code>list.pop()/list.pop(i)</code></strong>：删除列表中指定位置的元素并返回它。如果未指定索引，a.pop()将删除并返回列表中的最后一个元素</li>
<li><strong><code>list.index(x)</code></strong>：返回列表中第一个值为 x 的元素的索引。如果没有这样的元素将会报错</li>
<li><strong><code>list.count(x)</code></strong>：返回列表中 x 出现的次数</li>
<li><strong><code>list.sort(cmp=None, key=None, reverse=False)</code></strong>：原地排序列表中的元素</li>
<li><strong><code>list.reverse()</code></strong>：反转列表中的元素</li>
</ul>
<h4 id="栈"><strong>栈</strong></h4><p>&emsp;把列表(List)作为栈使用(后进先出)，使用<strong><code>append()</code></strong>在栈顶添加元素，使用<strong><code>pop()</code></strong>将栈顶元素取出。</p>
<h4 id="队列"><strong>队列</strong></h4><p>&emsp;把列表(List)作为队列使用(先进先出)，为了能快速在列表开头添加/弹出元素使用<strong><code>collections.deque</code></strong>快速在列表两端快速添加/弹出元素。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from collections import deque</span><br><span class="line"></span><br><span class="line">mylist = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line">queue = <span class="function"><span class="title">deque</span><span class="params">(mylist)</span></span></span><br><span class="line">queue.<span class="function"><span class="title">append</span><span class="params">(<span class="string">'four'</span>)</span></span></span><br><span class="line">print queue</span><br><span class="line">queue.<span class="function"><span class="title">popleft</span><span class="params">()</span></span></span><br><span class="line">print queue</span><br><span class="line"></span><br><span class="line">#<span class="function"><span class="title">deque</span><span class="params">([<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>])</span></span></span><br><span class="line">#<span class="function"><span class="title">deque</span><span class="params">([<span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>])</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="filter()、map()、reduce()"><strong>filter()、map()、reduce()</strong></h4><ul>
<li><p><strong>filter()</strong><br>  &emsp;<strong><code>filter(function, sequence)</code></strong>，返回<code>function(item)</code>结果为真的元素组成序列。如果<code>sequence</code>是一个<strong>字符串</strong>或<strong>元组</strong>，结果将是相同的类型；否则，结果将始终是一个列表。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#返回不能被2和3整除的序列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(x)</span>:</span></span><br><span class="line">   	<span class="keyword">return</span> x % <span class="number">2</span> != <span class="number">0</span> <span class="keyword">and</span> x % <span class="number">3</span> != <span class="number">0</span></span><br><span class="line"><span class="keyword">print</span> filter(myfunc, range(<span class="number">2</span>, <span class="number">25</span>))</span><br><span class="line"><span class="comment">#[5, 7, 11, 13, 17, 19, 23]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>map()</strong><br>  &emsp;<strong><code>map(function, sequence)</code></strong>序列中的每一个元素调用<code>function(item)</code>函数并返回结果的列表</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span><span class="params">(x)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> x ** <span class="number">3</span></span><br><span class="line"><span class="keyword">print</span> map(cube, range(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment">#[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]</span></span><br></pre></td></tr></table></figure>
<p>  &emsp;可传多个序列，但传入的函数必须有和序列数目一致的参数，执行时会依次用各序列上对应元素调用函数(若某个序列比另外一个短，就用 None 代替)。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">   	<span class="keyword">return</span> x + y</span><br><span class="line"><span class="keyword">print</span> map(add, range(<span class="number">0</span>, <span class="number">5</span>), range(<span class="number">10</span>, <span class="number">15</span>))</span><br><span class="line"><span class="comment">#[10, 12, 14, 16, 18]</span></span><br></pre></td></tr></table></figure>
<p>  &emsp;<code>map()</code>函数甚至可用于一<strong>列表的函数</strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x)</span>:</span></span><br><span class="line">   	<span class="keyword">return</span> x * x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> x + x</span><br><span class="line"></span><br><span class="line">funcs = [multiply, add]</span><br><span class="line"><span class="keyword">for</span> each_num <span class="keyword">in</span> xrange(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">print</span> map(<span class="keyword">lambda</span> x: x(each_num), funcs)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>reduce()</strong><br>  &emsp;<strong><code>reduce(function, sequence)</code></strong>只返回一个值，首先以序列的<strong>前两个元素</strong>调用函数<code>function</code>，然后再以<strong>返回的结果</strong>和<strong>下一个元素</strong>继续调用<code>function</code>，如此循环。如果序列中只有一个元素，将返回这个元素的值；如果<strong>序列为空</strong>，则<strong>引发异常</strong>。为防止序列为空引发异常，可传入蛋三个参数作为初始值，初始值与序列第一个元素调用<code>function</code>(<code>reduce(function, sequence, 0)</code>)。</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> x + y</span><br><span class="line"><span class="keyword">print</span> reduce(add, range(<span class="number">1</span>, <span class="number">11</span>))</span><br><span class="line"><span class="comment">#55</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="列表推导式"><strong>列表推导式</strong></h4><p>&emsp;<strong>列表推导式</strong>主要用于快速简洁生成列表。列表推导式由括号括起来，括号里面包含一个表达式，表达式后面跟着一个for语句，后面还可以接零个或更多的for或if语句。结果是一个新的列表，由表达式依据其后面的for和if子句上下文计算而来的结果构成(<code>[ 表达式 for var in sequence if condition]</code>)。<br>&emsp;以下三种方式输出结果都相同<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方式一</span></span><br><span class="line">squares = []</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="type">range</span>(<span class="number">10</span>):</span><br><span class="line">    squares.append(x ** <span class="number">2</span>)</span><br><span class="line">print squares</span><br><span class="line"><span class="comment">#[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#方式二</span></span><br><span class="line">squares = map(lambda x: x ** <span class="number">2</span>, <span class="type">range</span>(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#方式三</span></span><br><span class="line">squares = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="type">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表推导式可带if语句</span></span><br><span class="line">squares = [x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="type">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x &gt; <span class="number">3</span>]</span><br><span class="line"><span class="comment">#[16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure></p>
<h4 id="嵌套列表推导式"><strong>嵌套列表推导式</strong></h4><p>&emsp;列表推导式中的表达式可以是任何表达式，当然包括表达式是一个列表推导式。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#行列置换</span><br><span class="line">matrix = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line">]</span><br><span class="line">print [[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">range</span><span class="params">(<span class="number">4</span>)</span></span>]</span><br><span class="line">#[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br><span class="line"></span><br><span class="line">#拆分</span><br><span class="line">transposed = []</span><br><span class="line"><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">range</span><span class="params">(<span class="number">4</span>)</span></span>:</span><br><span class="line">	transposed_row = []</span><br><span class="line">	<span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">		transposed_row.<span class="function"><span class="title">append</span><span class="params">(row[i])</span></span></span><br><span class="line">	transposed.<span class="function"><span class="title">append</span><span class="params">(transposed_row)</span></span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><p><strong>zip()</strong><br>  &emsp;其实Python有内置函数<strong>zip()</strong>可实现上面的功能。先说明<code>zip()</code>函数<br>  &emsp;<code>zip()</code>接收多个可迭代对象(list/dict/tuple)作为参数，将这些对象中<strong>对应</strong>的元素打包成若干个元组(tuple)，最后返回这些元组(tuple)为元素所组成的列表(List)，若传入参数的长度不等，则返回list的长度和参数中长度最短的对象相同。</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">list_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list_b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">list_c = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">print <span class="function"><span class="title">zip</span><span class="params">(list_a, list_b)</span></span></span><br><span class="line">print <span class="function"><span class="title">zip</span><span class="params">(list_a, list_c)</span></span></span><br><span class="line">#[(<span class="number">1</span>, <span class="number">4</span>), (<span class="number">2</span>, <span class="number">5</span>), (<span class="number">3</span>, <span class="number">6</span>)]</span><br><span class="line">#[(<span class="number">1</span>, <span class="number">7</span>), (<span class="number">2</span>, <span class="number">8</span>), (<span class="number">3</span>, <span class="number">9</span>)]</span><br></pre></td></tr></table></figure>
<p>  &emsp;使用<code>zip()</code>函数实现行列置换</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">matrix</span> = [</span><br><span class="line">	[1, 2, 3, 4],</span><br><span class="line">	[5, 6, 7, 8],</span><br><span class="line">	[9, 10, 11, 12]</span><br><span class="line">]</span><br><span class="line"><span class="keyword">print</span> <span class="keyword">zip</span>(*<span class="keyword">matrix</span>)</span><br><span class="line"><span class="keyword">print</span> map(<span class="keyword">list</span>, <span class="keyword">zip</span>(*<span class="keyword">matrix</span>))</span><br><span class="line">#[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]</span><br><span class="line">#[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]</span><br></pre></td></tr></table></figure>
<p>  &emsp;参数加上星号表明为此参数为<strong>列表参数</strong>，即接收多个参数并将这些参数组成一个列表。但当此<strong>列表参数</strong>接收的是一个列表或元组时，则会对接收的列表进行<strong>拆分</strong>。<br>  &emsp;<code>*matrix</code>参数会被拆分成<code>[1, 2, 3, 4]</code>、<code>[5, 6, 7, 8]</code>、<code>[9, 10, 11, 12]</code>三个参数传递给<code>zip()</code>函数(<strong><code>zip([1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12])</code></strong>)</p>
</li>
</ul>
<h3 id="字典"><strong>字典</strong></h3><p>&emsp;字典(dict)可看做是无序的<strong>键:值(key:value)</strong>对集合，同一字典内<strong>键</strong>必须唯一。一个花括号将创建一个空字典<code>{}</code>，花括号里用<code>,</code>分隔各个<strong>键:值</strong>。字典的主要操作都是通过<strong>键(key)</strong>来进行。<br>&emsp;字典有<strong>键(key)</strong>做索引(序列由数字做索引)，<code>键(key)</code>可是任意<strong>不可变</strong>类型。若元组只包含字符串、 数字或元组，此元组可以用作key；若元组直接或间接地包含任何可变对象，那么它不能用作key。不能用列表(list)作为key。</p>
<h4 id="key()方法"><strong>key()方法</strong></h4><p>&emsp;<strong><code>key()</code></strong>方法返回字典中所有<strong>键(key)</strong>组成的列表，列表中<strong>键(key)</strong>的顺序是随机的。可通过<strong><code>in</code></strong>关键字检查<strong>键(key)</strong>是否存在于字典中。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tel = &#123;<span class="string">'jack'</span>: <span class="number">4098</span>,</span><br><span class="line">       <span class="string">'sape'</span>: <span class="number">4139</span></span><br><span class="line">       &#125;</span><br><span class="line">tel[<span class="string">'guido'</span>] = <span class="number">4127</span></span><br><span class="line"><span class="built_in">print</span> tel</span><br><span class="line">#&#123;<span class="string">'sape'</span>: <span class="number">4139</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'guido'</span>: <span class="number">4127</span>&#125;</span><br><span class="line"><span class="built_in">print</span> tel[<span class="string">'jack'</span>]</span><br><span class="line">#<span class="number">4098</span></span><br><span class="line"><span class="built_in">print</span> tel.keys()</span><br><span class="line">#[<span class="string">'sape'</span>, <span class="string">'jack'</span>, <span class="string">'guido'</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">'guido'</span> <span class="keyword">in</span> tel.keys()</span><br><span class="line">#True</span><br></pre></td></tr></table></figure></p>
<h4 id="dict()方法"><strong>dict()方法</strong></h4><p>&emsp;<code>dict()</code>构造函数可直接从键值对序列创建字典。同时字典和列表一样都有<strong>推导式</strong>。<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> dict([(<span class="string">'sape'</span>, <span class="number">4139</span>), (<span class="string">'guido'</span>, <span class="number">4127</span>), (<span class="string">'jack'</span>, <span class="number">4098</span>)])</span><br><span class="line">#&#123;<span class="string">'sape'</span>: <span class="number">4139</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'guido'</span>: <span class="number">4127</span>&#125;</span><br><span class="line"><span class="built_in">print</span> dict(sape=<span class="number">4139</span>, guido=<span class="number">4127</span>, jack=<span class="number">4098</span>)</span><br><span class="line">#&#123;<span class="string">'sape'</span>: <span class="number">4139</span>, <span class="string">'jack'</span>: <span class="number">4098</span>, <span class="string">'guido'</span>: <span class="number">4127</span>&#125;</span><br><span class="line"><span class="built_in">print</span> &#123;x: x ** <span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> (<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>)&#125;</span><br><span class="line">#&#123;<span class="number">2</span>: <span class="number">4</span>, <span class="number">4</span>: <span class="number">16</span>, <span class="number">6</span>: <span class="number">36</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="遍历技巧"><strong>遍历技巧</strong></h3><ul>
<li><p><strong><code>enumerate()</code></strong><br>  &emsp;遍历序列时，<code>enumerate()</code>可同时获得索引和值</p>
  <figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="string">'tic'</span>, <span class="string">'tac'</span>, <span class="string">'toe'</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="keyword">index</span>, value <span class="keyword">in</span> enumerate(mylist):</span><br><span class="line">	print <span class="keyword">index</span>, value</span><br><span class="line"><span class="string">#0</span> tic</span><br><span class="line"><span class="string">#1</span> tac</span><br><span class="line"><span class="string">#2</span> toe</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>zip()</strong><br>  &emsp;同时遍历多个序列时，<code>zip()</code>可<strong>成对</strong>读取元素</p>
  <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">questions = [<span class="string">'name'</span>, <span class="string">'quest'</span>, <span class="string">'favorite color'</span>]</span><br><span class="line">answers = [<span class="string">'lancelot'</span>, <span class="string">'the holy grail'</span>, <span class="string">'blue'</span>]</span><br><span class="line"><span class="keyword">for</span> q, a <span class="keyword">in</span> zip(questions, answers):</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'What is your &#123;0&#125;?  It is &#123;1&#125;.'</span>.format(q, a)</span><br><span class="line"></span><br><span class="line">#What <span class="keyword">is</span> your name?  It <span class="keyword">is</span> lancelot.</span><br><span class="line">#What <span class="keyword">is</span> your quest?  It <span class="keyword">is</span> the holy grail.</span><br><span class="line">#What <span class="keyword">is</span> your favorite color?  It <span class="keyword">is</span> blue.</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>reversed()</strong><br>  &emsp;反向遍历序列</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="tag">i</span> <span class="keyword">in</span> <span class="function"><span class="title">reversed</span><span class="params">(xrange(<span class="number">1</span>, <span class="number">6</span>)</span></span>):</span><br><span class="line">	print <span class="tag">i</span>,</span><br><span class="line">#<span class="number">5</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>sorted()</strong><br>  &emsp;排序序列</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">basket = [<span class="string">'apple'</span>, <span class="string">'orange'</span>, <span class="string">'apple'</span>, <span class="string">'pear'</span>, <span class="string">'orange'</span>, <span class="string">'banana'</span>]</span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> <span class="function"><span class="title">sorted</span><span class="params">(set(basket)</span></span>):</span><br><span class="line">	print f,</span><br><span class="line"><span class="id">#apple</span> banana orange pear</span><br><span class="line">#<span class="function"><span class="title">set</span><span class="params">(basket)</span></span>去除重复元素</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>iteritems()</strong><br>  &emsp;遍历字典时，<code>iteritems()</code>方法可同时获得键和值</p>
  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">knights = &#123;<span class="string">'gallahad'</span>: <span class="string">'the pure'</span>, <span class="string">'robin'</span>: <span class="string">'the brave'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key, <span class="built_in">value</span> <span class="operator">in</span> knights.iteritems():</span><br><span class="line">	print key, <span class="built_in">value</span></span><br><span class="line"><span class="comment">#gallahad the pure</span></span><br><span class="line"><span class="comment">#robin the brave</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>修改遍历中的序列</strong><br>  &emsp;若要修改正在遍历中的序列，则需先创建副本(序列循环不会隐式创建副本)。</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">'cat'</span>, <span class="string">'window'</span>, <span class="string">'defenestrate'</span>]</span><br><span class="line"><span class="keyword">for</span> w <span class="keyword">in</span> words[:]:</span><br><span class="line">    <span class="keyword">if</span> <span class="function"><span class="title">len</span><span class="params">(w)</span></span> &gt; <span class="number">6</span>:</span><br><span class="line">        words.<span class="function"><span class="title">insert</span><span class="params">(<span class="number">0</span>, w)</span></span></span><br><span class="line">#[<span class="string">'defenestrate'</span>, <span class="string">'cat'</span>, <span class="string">'window'</span>, <span class="string">'defenestrate'</span>]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="六、模块"><strong>六、模块</strong></h2><p>&emsp;模块是包含Python定义和声明的文件。模块中的定义可<strong>导入(import)</strong>到其他模块中。模块名可通过全局变量<strong><code>__name__</code></strong>获得。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#fibo</span><span class="class">.py</span></span><br><span class="line">def <span class="function"><span class="title">fib</span><span class="params">(n)</span></span>:</span><br><span class="line">    <span class="tag">a</span>, <span class="tag">b</span> = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    while <span class="tag">b</span> &lt; n:</span><br><span class="line">        print <span class="tag">b</span>,</span><br><span class="line">        <span class="tag">a</span>, <span class="tag">b</span> = <span class="tag">b</span>, a+<span class="tag">b</span></span><br><span class="line">def <span class="function"><span class="title">fib2</span><span class="params">(n)</span></span>:</span><br><span class="line">    result = []</span><br><span class="line">    <span class="tag">a</span>, <span class="tag">b</span> = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    while <span class="tag">b</span> &lt; n:</span><br><span class="line">        result.<span class="function"><span class="title">append</span><span class="params">(b)</span></span></span><br><span class="line">        <span class="tag">a</span>, <span class="tag">b</span> = <span class="tag">b</span>, a+<span class="tag">b</span></span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"><span class="id">#main</span><span class="class">.py</span></span><br><span class="line">import fibo</span><br><span class="line"></span><br><span class="line">fibo.<span class="function"><span class="title">fib</span><span class="params">(<span class="number">100</span>)</span></span></span><br><span class="line">print fibo.<span class="function"><span class="title">fib2</span><span class="params">(<span class="number">100</span>)</span></span></span><br><span class="line">print fibo.__name__</span><br><span class="line">#<span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span></span><br><span class="line">#[<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">21</span>, <span class="number">34</span>, <span class="number">55</span>, <span class="number">89</span>]</span><br><span class="line">#fibo</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong><code>import fibo</code></strong>只会把模块名<code>fibo</code>导入<strong>符号表</strong>中，不会将<code>fibo.py</code>中定义的函数名导入到符号表，故需要通过模块名访问<code>fibo.py</code>定义的函数。</p>
<h3 id="深入模块"><strong>深入模块</strong></h3><p>&emsp;模块可包含<strong>可执行语句</strong>和<strong>函数的定义</strong>，它们只在<strong>第一次</strong>导入时执行。<br>&emsp;每个模块拥有自己的<strong>私有符号表</strong>，模块内定义的所有函数用该<strong>私有符号表</strong>作为<strong>全局符号表</strong>。</p>
<h4 id="执行模块"><strong>执行模块</strong></h4><p>&emsp;若用以下方式执行<code>fibo</code>模块，模块中的代码会被执行，但此时模块的<strong><code>__name__</code></strong>不在是<code>fibo</code>而是<strong><code>__main__</code></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python fibo<span class="class">.py</span> &lt;arguments&gt;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;若在<code>fibo.py</code>模块最后添加以下代码，则<code>fibo.py</code>只有在作为可执行脚本调用是才执行以下代码，作为模块被导入时不会执行(因为作为模块被导入时<code>__name__</code>==<code>fibo</code>)<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#fibo</span><span class="class">.py</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    import sys</span><br><span class="line">    <span class="function"><span class="title">fib</span><span class="params">(int(sys.argv[<span class="number">1</span>])</span></span>)</span><br><span class="line"></span><br><span class="line">$&gt; python fibo<span class="class">.py</span> <span class="number">100</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">8</span> <span class="number">13</span> <span class="number">21</span> <span class="number">34</span> <span class="number">55</span> <span class="number">89</span></span><br></pre></td></tr></table></figure></p>
<h4 id="模块搜索路径"><strong>模块搜索路径</strong></h4><p>&emsp;若要导入(import)<code>spam</code>模块，首先会搜索<strong>内置模块</strong>，然后在<code>sys.path</code>变量中所给出的目录搜索<code>spam.py</code>。<br>&emsp;<code>sys.path</code>变量初始值来自以下三个地方(注意<strong>优先级</strong>)</p>
<ul>
<li>脚本所在的<strong>当前目录</strong></li>
<li><strong>PYTHONPATH</strong></li>
<li>与安装相关的默认值</li>
</ul>
<h3 id="包"><strong>包</strong></h3><p>&emsp;包是一种管理 Python 模块命名空间的方式，采用<strong>点分模块名称</strong>。<code>A.B</code>表示包<code>A</code>中名为<code>B</code>的子模块<br>&emsp;若存在一个目录结构如下所示的包<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sound/                          Top-level package</span><br><span class="line">      __init__.py               Initialize the sound package</span><br><span class="line">      formats/                  Subpackage <span class="keyword">for</span> file format conversions</span><br><span class="line">              __init__.py</span><br><span class="line">              wavread.py</span><br><span class="line">              wavwrite.py</span><br><span class="line">              <span class="keyword">...</span></span><br><span class="line">      effects/                  Subpackage <span class="keyword">for</span> sound effects</span><br><span class="line">              __init__.py</span><br><span class="line">              echo.py</span><br><span class="line">              <span class="keyword">...</span></span><br><span class="line">      filters/                  Subpackage <span class="keyword">for</span> filters</span><br><span class="line">              __init__.py</span><br><span class="line">              equalizer.py</span><br></pre></td></tr></table></figure></p>
<p>&emsp;为了Python能将目录当做包，目录下必须存在<strong><code>__init__.py</code></strong>文件。<strong><code>__init__</code></strong>文件可以是一个空文件，也可以为包执行初始化代码或设置<code>__all__</code>变量。<br>&emsp;对于不同的导入方式，如何使用模块中的内容也不同<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#假设echo.py模块中定义了函数<span class="function"><span class="title">echofilter</span><span class="params">(input, output)</span></span></span><br><span class="line"></span><br><span class="line">#单独导入</span><br><span class="line">import sound<span class="class">.effects</span><span class="class">.echo</span></span><br><span class="line">#调用时必须使用完整名称</span><br><span class="line">import sound<span class="class">.effects</span><span class="class">.echo</span><span class="class">.echofilter</span>(<span class="tag">input</span>, output)</span><br><span class="line"></span><br><span class="line">#导入子模块</span><br><span class="line">from sound<span class="class">.effects</span> import echo</span><br><span class="line">#直接使用子模块</span><br><span class="line">echo.<span class="function"><span class="title">echofilter</span><span class="params">(input, output)</span></span></span><br><span class="line"></span><br><span class="line">#直接导入子模块函数/变量</span><br><span class="line">from sound<span class="class">.effects</span><span class="class">.echo</span> import echofilter</span><br><span class="line">#直接使用函数/变量</span><br><span class="line"><span class="function"><span class="title">echofilter</span><span class="params">(input, output)</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="七、输入输出"><strong>七、输入输出</strong></h2><h3 id="格式化输出"><strong>格式化输出</strong></h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#str.format() 格式化输出</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;0:3d&#125;'</span>.<span class="keyword">format</span>(<span class="number">2</span> * <span class="number">3</span>)</span><br><span class="line"><span class="comment">#  6</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;0:.3f&#125;'</span>.<span class="keyword">format</span>(<span class="number">2</span> * <span class="number">3</span>)</span><br><span class="line"><span class="comment">#6.000</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'&#123;0&#125;, &#123;1&#125; and &#123;other&#125;'</span>.<span class="keyword">format</span>(<span class="string">'First'</span>, <span class="string">'Second'</span>, other=<span class="string">'All the rest'</span>)</span><br><span class="line"><span class="comment">#First, Second and All the rest</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'12'</span>.zfill(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#0012</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> str(<span class="number">3</span> ** <span class="number">2</span>).rjust(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#   9</span></span><br><span class="line"><span class="keyword">print</span> str(<span class="number">3</span> ** <span class="number">2</span>).ljust(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#9___	_表示空格</span></span><br><span class="line"><span class="keyword">print</span> str(<span class="number">3</span> ** <span class="number">2</span>).center(<span class="number">4</span>)</span><br><span class="line"><span class="comment">#_9__	_表示空格</span></span><br><span class="line"></span><br><span class="line">import math</span><br><span class="line"><span class="keyword">print</span> <span class="string">'%5.3f'</span> % math.pi</span><br><span class="line"><span class="comment">#3.142</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'%8.3f'</span> % math.pi</span><br><span class="line"><span class="comment">#   3.142</span></span><br></pre></td></tr></table></figure>
<h3 id="读写文件"><strong>读写文件</strong></h3><p>&emsp;一般Python读写文件是先调用<strong><code>open(filename, mode)</code></strong>函数创建一个文件对象，其中<strong><code>mode</code></strong>有如下选项：</p>
<ul>
<li><code>r</code>: 以读方式打开文件，可读取文件信息.<strong>文件必须已存在</strong></li>
<li><code>w</code>: 以写方式打开文件，可向文件写入信息。<strong>存在则清空，不存在创建</strong></li>
<li><code>a</code>: 以追加方式打开文件，文件指针自动移到文件尾。追加</li>
<li><code>r+</code>: 以读写方式打开文件，可对文件进行读和写操作。</li>
<li><code>w+</code>: 消除文件内容，然后以读写方式打开文件。</li>
<li><code>a+</code>: 以读写方式打开文件，并把文件指针移到文件尾。</li>
<li><code>b</code>: 以二进制模式打开文件，而不是以文本模式。该模式只对Windows或Dos有效，类Unix的文件是用二进制模式进行操作的</li>
<li><code>U</code>: 通用换行符支持，任何系统下的文件, 不管换行符是什么, 使用U模式打开时, 换行符都会被替换为NEWLINE(\n)</li>
<li><code>+</code>: 代表同时作为输入和输出文件，可以对相同文件进行读写</li>
<li><code>b</code>: 代表二进制数据处理 和 r/w/a组合.r+ 使用读写方式打开， rb二进制读<br>&emsp;使用<strong><code>open(filename, mode)</code></strong>方法创建对象，操作完后需要手动调用<strong><code>close()</code></strong>方法关闭以释放其所占用的系统资源。为了更加方便对文件进行读写操作Python提供了<strong>with</strong>关键字，<strong>with</strong>关键字在文件操作完后会自动关闭对象不用手动调用<code>close()</code>。<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with <span class="function"><span class="title">open</span><span class="params">(filename, <span class="string">'r'</span>)</span></span> as fd:</span><br><span class="line">    fd.<span class="function"><span class="title">read</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>&emsp;Python读取文件内容常用函数有：<code>read()</code>、<code>readline()</code>、<code>readlines()</code>和<code>xreadlines()</code></p>
<ul>
<li><code>read()</code>：一次性读取所有内容并将其放到一个字符串变量中</li>
<li><code>readline()</code>：逐行读取并存入列表中</li>
<li><code>readlines()</code>：一次性读取所有内容并存入列表</li>
<li><code>xreadlines()</code>：返回一个迭代器用于循环操作每一行</li>
</ul>
<p>&emsp;Python2.3后支持文件对象迭代功能，所以更推荐使用以下方法遍历文本：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with <span class="function"><span class="title">open</span><span class="params">(<span class="string">'filename'</span>)</span></span> as file_fd:</span><br><span class="line">    <span class="keyword">for</span> each_line <span class="keyword">in</span> file_fd:</span><br><span class="line">        <span class="function"><span class="title">do_things</span><span class="params">(each_line)</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="八、错误与异常"><strong>八、错误与异常</strong></h2><h3 id="处理异常"><strong>处理异常</strong></h3><p>&emsp;使用<code>try...except</code>处理异常<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> True:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="keyword">int</span>(raw_input(<span class="string">"Please enter a number: "</span>))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    except (RuntimeError, TypeError, NameError, ValueError):</span><br><span class="line">        print <span class="string">"Oops!  That was no valid number.  Try again..."</span></span><br></pre></td></tr></table></figure></p>
<p>异常处理流程：</p>
<ul>
<li>执行try子句（try和except关键字之间的语句，即<code>x = int(raw_input(&quot;Please enter a number: &quot;))</code>）。</li>
<li>如果未发生任何异常，忽略except子句且try语句执行完毕，无触发异常。</li>
<li>如果在try子句执行过程中发生异常，跳过该子句的其余部分。如果异常的类型与except关键字后面的异常名匹配, 则执行 except 子句，然后继续执行try语句之后的代码。</li>
<li>如果异常的类型与 except 关键字后面的异常名不匹配，它将被传递给上层的try语句；如果没有找到处理这个异常的代码，它就成为一个未处理异常，程序会终止运行并显示一条如上所示的信息。</li>
</ul>
<h3 id="引发异常"><strong>引发异常</strong></h3><p>&emsp;使用<strong><code>raise</code></strong>可手动引发异常<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> NameError(<span class="string">'HiThere'</span>)</span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'An exception flew by!'</span></span><br><span class="line">    <span class="keyword">raise</span></span><br></pre></td></tr></table></figure></p>
<h3 id="自定义异常"><strong>自定义异常</strong></h3><p>&emsp;继承<strong><code>Exception</code></strong>类创建自定义异常<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> repr(self.value)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyError(<span class="number">2</span>*<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> MyError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'My exception occurred, value:'</span>, e.value</span><br></pre></td></tr></table></figure></p>
<h3 id="else_与_finally"><strong>else 与 finally</strong></h3><p>&emsp;<code>try...except</code>还支持<strong><code>else</code></strong>和<strong><code>finally</code></strong>语句。</p>
<ul>
<li><strong><code>else</code></strong>：当<code>try</code>子句中没有抛出异常时则执行<code>else</code>子句。<code>else</code>子句只能出现在所有<code>except</code>子句之后</li>
<li><strong><code>finally</code></strong>：不管异常是否发生，总是会执行<code>finally</code>子句。通常用于释放外部资源</li>
</ul>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def divide(x, y):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="literal">result</span> = x / y</span><br><span class="line">    <span class="keyword">except</span> <span class="type">ZeroDivisionError</span>:</span><br><span class="line">        print <span class="string">"division by zero!"</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print <span class="string">"result is"</span>, <span class="literal">result</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        print <span class="string">"executing finally clause"</span></span><br></pre></td></tr></table></figure>
<h2 id="九、类"><strong>九、类</strong></h2><h3 id="命名空间"><strong>命名空间</strong></h3><p>&emsp;命名空间是从名称到对象的映射。目前为止，命名空间主要通过Python<strong>字典</strong>实现，键是变量名，值是对于的变量值。<br>&emsp;命名空间例子：</p>
<ol>
<li><strong>内置命名空间</strong>：Python内置的函数和异常等，任何模块均可访问。</li>
<li><strong>全局命名空间</strong>：每个模块所拥有的命名空间，记录模块的变量，包括函数、类和导入的模块等。模块的全局命名空间在<strong>读入模块定义时</strong>创建。</li>
<li><strong>局部命名空间</strong>：每个函数所拥有的命名空间，记录函数内的变量和参数等。函数的局部命名空间在函数<strong>被调用时</strong>创建，在函数<strong>返回</strong>或引发内部<strong>没有处理的异常</strong>时被删除。</li>
</ol>
<p>&emsp;不同命名空间中的名称(如函数名)无任何关系(即使是名称相同也可以)。比如A模块中存在一个函数名为<code>maximize</code>的函数，B模块同样也存在是完全没问题的，调用是需指定模块名<code>A.maximize</code>、<code>B.maximize</code>。<br>&emsp;Python查找命名空间的顺序：</p>
<ol>
<li>当前函数的局部命名空间搜索</li>
<li>父函数的局部命名空间搜索</li>
<li>模块的全局命名空间搜索</li>
<li>内置命名空间搜索</li>
</ol>
<h3 id="类定义"><strong>类定义</strong></h3><p>&emsp;类定义最简单形式<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class ClassName:</span><br><span class="line">    <span class="tag">&lt;<span class="title">statement-1</span>&gt;</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="tag">&lt;<span class="title">statement-N</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;进入类定义后，会创建一个新的命名空间，所有的赋值会成为此命名空间的局部变量。类定义正常结束后，一个<strong>类对象</strong>便创建了。</p>
<h3 id="类对象"><strong>类对象</strong></h3><p>&emsp;类对象支持两种操作：</p>
<ul>
<li>属性引用</li>
<li>实例化</li>
</ul>
<p>&emsp;为方便解释，先定义一个类<code>MyClass</code>：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>:</span></span><br><span class="line">    <span class="string">"""A simple example class"""</span></span><br><span class="line">    i = <span class="number">12345</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure></p>
<h4 id="属性引用"><strong>属性引用</strong></h4><p>&emsp;<strong>属性引用</strong>标准语法为<strong><code>obj.name</code></strong>。有效的属性名为在类对象被创建时该类的命名空间中的所有名称。<br>&emsp;<strong><code>MyClass.i</code></strong>、<strong>MyClass.f</strong>为有效的属性引用，分别返回一个整数和一个函数对象。<strong><code>__doc__</code></strong>也是有效对象，返回一串字符(<code>A simple example class</code>)</p>
<h4 id="实例化"><strong>实例化</strong></h4><p>&emsp;类的<strong>实例化</strong>使用函数符号。可以把类对象看成是一个无参数的函数，该函数返回这个类的一个新实例。<br>&emsp;创建<code>MyClass</code>类的一个新实例，并将该对象赋给局部变量<code>x</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="function"><span class="title">MyClass</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;实例化操作会创建一个空对象，若希望创建的对象在初始状态时能自定义动作，则可定义一个<strong><code>__init__()</code></strong>的特殊方法<br>&emsp;一旦定义了<strong><code>__init__()</code></strong>方法，在实例化创建新的类对象时会自动调用<code>__init__()</code>方法。<code>__init()</code>方法可带参数，在类实例化操作的参数将传递给<code>__init__()</code>方法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">		self.name = name</span><br><span class="line"></span><br><span class="line">x = MyClass(<span class="string">'mogl'</span>)</span><br><span class="line"><span class="keyword">print</span> x.name</span><br><span class="line"><span class="comment">#mogl</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;当通过实例化操作创建了一个实例对象后，可进行属性引用。有效的属性名大致分为两种：<strong>数据属性</strong>和<strong>方法</strong><br>&emsp;简单的说，数据属性可理解为类当中的变量；方法可理解为类当中的函数</p>
<h3 id="方法对象"><strong>方法对象</strong></h3><p>&emsp;一般情况下，方法被绑定后就可直接调用。以之前定义的类<code>MyClass</code>为例，在定义完类后，实例化创建类对象后可直接调用方法<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#实例化创建类对象x</span><br><span class="line">x = <span class="function"><span class="title">MyClass</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">#直接调用方法<span class="function"><span class="title">f</span><span class="params">()</span></span></span><br><span class="line">x.<span class="function"><span class="title">f</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">#不直接调用：x.f是一个方法对象，可存储后调用</span><br><span class="line">xf = x<span class="class">.f</span></span><br><span class="line"><span class="function"><span class="title">xf</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;类里面的函数<code>def f(self)</code>是有参数的，但调用时却没有传递参数，这和类的方法有关。方法会将实例对象作为函数的第一个参数传递给函数，所以方法定义时带有<code>self</code>参数。当调用<code>x.f()</code>时等同于<code>MyClass.f(x)</code>。</p>
<h3 id="类_&amp;_实例"><strong>类 &amp; 实例</strong></h3><h4 id="可变对象不做类属性"><strong>可变对象不做类属性</strong></h4><p>&emsp;实例变量用于对每一个实例都是唯一的数据<br>&emsp;类变量用于类的所有实例共享的属性和方法<br>&emsp;可变对象(列表/字典)不应用作为类变量，因为所有实例化后的类对象都共享同一个可变的类变量<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(object)</span>:</span></span><br><span class="line">    tricks = []					<span class="comment">#tricks作为类变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">		<span class="comment">#self.tricks = []		#应当将tricks作为实例变量</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_tricks</span><span class="params">(self, trick)</span>:</span></span><br><span class="line">        <span class="string">"""docstring for add_tricks"""</span></span><br><span class="line">        self.tricks.append(trick)</span><br><span class="line"></span><br><span class="line">d = Dog(<span class="string">'Fido'</span>)</span><br><span class="line">e = Dog(<span class="string">'Buddy'</span>)</span><br><span class="line">d.add_tricks(<span class="string">'roll over'</span>)</span><br><span class="line">e.add_tricks(<span class="string">'play dead'</span>)</span><br><span class="line"><span class="keyword">print</span> d.tricks</span><br><span class="line"><span class="comment">#['roll over', 'play dead']</span></span><br></pre></td></tr></table></figure></p>
<h4 id="类属性_实例属性"><strong>类属性 实例属性</strong></h4><p>&emsp;Python是动态语言，类实例化后的实例可任意添加属性。如果实例属性和类属性具有相同的名称时，实例属性将屏蔽掉类属性。<br>&emsp;Python默认是通过一个字典来保存实例的所有实例属性(通过<code>instance.__dict__</code>可查看)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for Man"""</span></span><br><span class="line">    age = <span class="number">30</span></span><br><span class="line"></span><br><span class="line">a = Man()</span><br><span class="line">b = Man()</span><br><span class="line"><span class="keyword">print</span> a.age, b.age, Man.age</span><br><span class="line"><span class="comment">#30 30 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例a添加实例属性age</span></span><br><span class="line">a.age = <span class="number">40</span></span><br><span class="line"><span class="keyword">print</span> a.age, b.age, Man.age</span><br><span class="line"><span class="comment">#40 30 30   #a实例属性age覆盖Man类属性</span></span><br><span class="line"></span><br><span class="line">Man.age = <span class="number">50</span></span><br><span class="line"><span class="keyword">print</span> a.age, b.age, Man.age</span><br><span class="line"><span class="comment">#40 50 50</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> a.__dict__</span><br><span class="line"><span class="keyword">print</span> b.__dict__</span><br><span class="line"><span class="keyword">print</span> Man.__dict__</span><br><span class="line"><span class="comment">#&#123;'age': 40&#125;</span></span><br><span class="line"><span class="comment">#&#123;&#125;</span></span><br><span class="line"><span class="comment">#&#123;'__dict__': &lt;attribute '__dict__' of 'Man' objects&gt;, 'age': 50, '__weakref__': &lt;attribute '__weakref__' of 'Man' objects&gt;, '__module__': '__main__', '__doc__': 'docstring for Man'&#125;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="slots"><strong><strong>slots</strong></strong></h4><p>&emsp;一般使用<code>__slots__</code>常见的目的有2个：</p>
<ol>
<li>减少内存的使用<br> &emsp;正如上面所说，Python默认会使用字典存储实例的所有实例属性。但一旦需要创建大量实例时，每个实例都会产生一个字典用于存储其自身的实例属性，这样便会占用过多的内存资源。<code>__slots__</code>能使Python不使用字典而且只提供一个固定集合的属性空间，所有的实例都用此空间。</li>
<li>限制添加新属性<br> &emsp;为了限制实例添加新属性，可使用<code>__slots__</code>来限制该类能使用的属性。</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span><span class="params">(object)</span>:</span></span><br><span class="line">    __slots__ = (<span class="string">'name'</span>, <span class="string">'gender'</span>)		<span class="comment">#只能使用name和gender属性，这些属性不存字典而是统一空间中</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, gender)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line"></span><br><span class="line">a = Man(<span class="string">'mogl'</span>, <span class="string">'male'</span>)</span><br><span class="line"><span class="keyword">print</span> a.name, a.gender</span><br><span class="line">a.age = <span class="number">100</span></span><br><span class="line"><span class="keyword">print</span> a.age</span><br><span class="line"></span><br><span class="line"><span class="comment">#mogl male</span></span><br><span class="line"><span class="comment">#Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#  File "tmp.py", line 92, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#    a.age = 100</span></span><br><span class="line"><span class="comment">#AttributeError: 'Man' object has no attribute 'age'</span></span><br></pre></td></tr></table></figure>
<h3 id="继承"><strong>继承</strong></h3><p>&emsp;类的其中一个重要特性是<strong>继承</strong>。<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">DerivedClassName</span><span class="container">(<span class="type">BaseClassName</span>)</span>:</span><br><span class="line">    &lt;statement-1&gt;</span><br><span class="line">    .</span><br><span class="line">    &lt;statement-<span class="type">N</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;子类的类对象创建后，父类会被保存用于属性引用，当在子类中无法获取请求的属性时会向父类进行搜索。假若父类又是其他类的子类，那么会再向其父类进行搜索，不对递归进行。<br>&emsp;子类能重写父类的方法。若在子类中想要调用父类方法可<strong><code>BaseClassName.methodname(self, arguments)</code></strong></p>
<h4 id="多继承"><strong>多继承</strong></h4><p>&emsp;Python支持一定限度的多继承形式。<del>对于多继承使用<strong>深度优先规则</strong>，从左到右进行搜索。当<code>DerivedClassName</code>中找不到属性时，首先搜索<code>Base1</code>，然后递归搜索<code>Base1</code>的父类，在然后搜索<code>Base2</code>以此类推进行搜索。</del>自Python2.3起采用<strong>C3</strong>算法，按照<strong>MRO(Method Resolution Order)</strong>进行搜索，可使用<code>Class.__mro__</code>查看<strong>MRO</strong>的搜索顺序。<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class DerivedClassName(Base1, Base2, Base3):</span><br><span class="line">    &lt;statement-<span class="number">1</span>&gt;</span><br><span class="line">    <span class="keyword">...</span></span><br><span class="line">    &lt;statement-N&gt;</span><br><span class="line"></span><br><span class="line">print DerivedClassName.__mro__</span><br></pre></td></tr></table></figure></p>
<h3 id="迭代器"><strong>迭代器</strong></h3><p>&emsp;在Python中利用<code>for</code>语句可方便的遍历很多对象，迭代器是这一用法的关键。<code>for</code>语句在对象上调用<code>iter()</code>，<code>iter()</code>函数返回定义了<code>next()</code>方法的迭代器对象用于逐一访问所有元素，当没有后续元素时，<code>next()</code>方法引发<code>StopIteration</code>异常通知<code>for</code>终止循环。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s = <span class="string">'abc'</span></span><br><span class="line">&gt;&gt;&gt; it = <span class="function"><span class="title">iter</span><span class="params">(s)</span></span></span><br><span class="line">&gt;&gt;&gt; it.<span class="function"><span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="string">'a'</span></span><br><span class="line">&gt;&gt;&gt; it.<span class="function"><span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="string">'b'</span></span><br><span class="line">&gt;&gt;&gt; it.<span class="function"><span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="string">'c'</span></span><br><span class="line">&gt;&gt;&gt; it.<span class="function"><span class="title">next</span><span class="params">()</span></span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">StopIteration</span><br></pre></td></tr></table></figure></p>
<p>&emsp;假若需要自定义类遍历，则只需要定义一个<code>__iter__(self)</code>方法并返回含有<code>next(self)</code>方法的对象即可，如果类中定义了<code>next(self)</code>方法则<code>__iter__(self)</code>可只返回<code>self</code><br>&emsp;Python使用内置的<code>iter()</code>函数，<code>iter()</code>函数通过调用<code>__iter__(self)</code>方法获得对象的迭代器。有了迭代器才能遍历每个元素，遍历时Python使用内置<code>next()</code>函数，<code>next()</code>函数通过调用<code>next(self)</code>方法对迭代器对象进行遍历。<code>__iter__(self)</code>只会被调用一次来获取迭代器，<code>next(self)</code>会被调用多次以遍历每个元素(<code>next(self)</code>方法中需要注意设置结束条件来触发<code>raise StopIteration</code>以避免死循环)。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Reverse</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self.data = data</span><br><span class="line">        self.index = len(data)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.index == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        self.index = self.index - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.data[self.index]</span><br><span class="line"></span><br><span class="line">rev = Reverse(<span class="string">"spam"</span>)</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> rev:</span><br><span class="line">    <span class="keyword">print</span> char</span><br></pre></td></tr></table></figure></p>
<h3 id="生成器"><strong>生成器</strong></h3><p>&emsp;官方文档中对<strong>生成器</strong>解释为：生成器是创建迭代器的一种简单而强大的工具。写起来像正规的函数，只是需要在返回数据时使用<strong><code>yield</code></strong>语句而非<code>return</code>语句。每次调用<code>next()</code>时，生成器会返回之前的状态并继续往下执行代码。<br>&emsp;在我个人看了，<strong>生成器</strong>就是一个特殊的迭代器，只不过<strong>生成器</strong>会<strong>自动</strong>的创建<strong><code>__iter__()</code></strong>方法和<strong><code>next()</code></strong>方法，所以比起自己实现迭代器类简洁方便。另一个特殊点是<strong>生成器</strong>会<strong>自动保存局部变量和执行状态</strong>，生成结束时自动抛出<code>StopIteration</code>异常(遇到<code>return</code>会抛出<code>StopIteration</code>异常)。<br>&emsp;简而言之，一个带有<strong><code>yield</code></strong>语句的函数就是一个生成器。当调用生成器时并<strong>不会执行任何函数里的代码</strong>，只有在调用<strong><code>next()</code></strong>函数时(<code>for</code>自动调用<code>next()</code>函数)时才开始执行函数中的代码。但代码执行的流程不是像普通函数一样一次性从头到尾执行，而是当遇到<strong><code>yield</code></strong>语句时产生中断并返回迭代值，然后保存当前执行状态，直到再次调用<code>next()</code>函数时才恢复上次中断状态并从上次<code>yield</code>语句的下一句继续执行。(<code>yield</code>保存状态并暂停函数的执行，<code>next()</code>从其暂停处恢复并继续往下执行函数代码。)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> range(len(data)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">yield</span> data[index]</span><br><span class="line">        <span class="comment">#print data[index]      #普通函数写法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#reverse('spam')    #普通函数调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成器可迭代调用</span></span><br><span class="line"><span class="comment">#即可迭代又免于class Reverse()的繁复</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> reverse(<span class="string">'spam'</span>):</span><br><span class="line">    <span class="keyword">print</span> char</span><br></pre></td></tr></table></figure></p>
<p>&emsp;关于<strong><code>yield</code></strong>和<strong>生成器</strong>更多内容可参考如下几篇文章</p>
<ul>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-python-yield/" target="_blank" rel="external">Python yield 使用浅析</a></li>
<li><a href="https://www.oschina.net/translate/improve-your-python-yield-and-generators-explained" target="_blank" rel="external">提高你的Python: 解释‘yield’和‘生成器’</a></li>
<li><a href="http://blog.jobbole.com/28506/" target="_blank" rel="external">Python关键字yield详解</a></li>
</ul>
<h4 id="生成器表达式"><strong>生成器表达式</strong></h4><p>&emsp;生成式表达式类似与一个<code>yield</code>值的匿名函数。生成式表达式本身看起来像列表表达式, 但不是用方括号而是用<strong>圆括号</strong>包围起来：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; mylist = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; gen = (x for x in mylist)</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; gen</span><br><span class="line">&lt;generator object &lt;genexpr&gt; at <span class="number">0xb70a116c</span>&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="协程_&amp;_yield"><strong>协程 &amp; yield</strong></h4><p>&emsp;协程又可称为微线程(coroutine)，进程、线程需要由系统来进行调度，而协程是在代码里显示调度的，<strong>主动让出CPU时间</strong>，因此避免了进程/线程切换时的开销能充分利用并发优势，但协程是针对单个CPU的是一个线程执行的。<br>&emsp;Python2中使用<code>yield</code>来实现不完全的协程。<code>yield</code>不仅能从生成器内返回状态而且还能从外部传递信息给生成器内部，一般的做法是通过将<code>yield</code>关键字赋值给变量，并调用生成器固有的<code>send()</code>方法将消息传入生成器内部。生成器在遇到<code>next()</code>方法时才会继续执行而<code>send()</code>方法能起到和<code>next()</code>方法同样的作用，其实<code>next()</code>相当于是<code>send(None)</code>。如果没有变量接收<code>yield</code>关键字，那么<code>send()</code>传递的消息将被丢弃。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">def <span class="function"><span class="title">consumer</span><span class="params">()</span></span>:</span><br><span class="line">    thanks = <span class="string">'Thanks'</span></span><br><span class="line">    while <span class="number">1</span>:</span><br><span class="line">        food = yield thanks</span><br><span class="line">        print <span class="string">"consumer get %s"</span> % food</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="title">product</span><span class="params">()</span></span>:</span><br><span class="line">    c = <span class="function"><span class="title">consumer</span><span class="params">()</span></span></span><br><span class="line">    #先调用<span class="function"><span class="title">next</span><span class="params">()</span></span>让<span class="function"><span class="title">consumer</span><span class="params">()</span></span>执行到yield等待接收food</span><br><span class="line">    first_rep = c.<span class="function"><span class="title">next</span><span class="params">()</span></span></span><br><span class="line">    print <span class="string">"first repose: %s"</span> % first_rep</span><br><span class="line">    <span class="keyword">for</span> food <span class="keyword">in</span> [<span class="string">'rice'</span>, <span class="string">'soup'</span>, <span class="string">'meat'</span>]:</span><br><span class="line">        response = c.<span class="function"><span class="title">send</span><span class="params">(food)</span></span></span><br><span class="line">        print <span class="string">"product get response: %s"</span> % response</span><br><span class="line">    c.<span class="function"><span class="title">close</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">product</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="id">#first</span> repose: Thanks</span><br><span class="line"><span class="id">#consumer</span> get rice</span><br><span class="line"><span class="id">#product</span> get response: Thanks</span><br><span class="line"><span class="id">#consumer</span> get soup</span><br><span class="line"><span class="id">#product</span> get response: Thanks</span><br><span class="line"><span class="id">#consumer</span> get meat</span><br><span class="line"><span class="id">#product</span> get response: Thanks</span><br></pre></td></tr></table></figure></p>
<ol>
<li><code>consumer()</code>是一个生成器，在<code>product()</code>中创建对象后调用<code>c.next()</code>启动生成器</li>
<li><code>product()</code>生产<code>food</code>后通过<code>c.send(food)</code>将消息传递给<code>consumer()</code>，程序切换到<code>consumer()</code>中继续执行。</li>
<li><code>consumer()</code>通过<code>yield</code>获取<code>product()</code>传入的消息，处理后(<code>print</code>)又通过<code>yield</code>返回结果(<code>thanks</code>)</li>
<li>最后调用<code>c.close()</code>关闭协程</li>
</ol>
<h3 id="super()"><strong>super()</strong></h3><p>&emsp;在类的继承中，子类会在初始化时调用<code>__init__(self)</code>方法，会将<code>self</code>和该子类的实例对象绑定而忽视父类。当使用子类实例对象调用父类的属性或方法时便会提示该属性/方法不存在。为了避免此问题的出现，就会在子类(新式类)中使用<strong><code>super(subclass, self).__init__()</code></strong>(Python2写法)(<code>super()</code>是在Python2.2之后新式类中才支持的，之前的Python版本的经典类只能用父类名调用)。<br>&emsp;一般提到<code>super()</code>便会很自然的和<strong>父类</strong>联系起来，但其实<code>super()</code>和父类<strong>没有必然的联系</strong>。<code>super()</code>指向的本质上是<font color="red">MRO的下一个类</font>，MRO的下一个类并不一定就是父类。<code>super()</code>的实现大概如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>	<span class="title">super</span><span class="params">(class, instance)</span>:</span></span><br><span class="line">    mro = instance.__class__.mro()</span><br><span class="line">    <span class="keyword">return</span> mro[mro.index(<span class="class"><span class="keyword">class</span>) + 1]</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong><code>instance</code></strong>：此参数是用于获得<code>instance</code>实例的MRO(Method Resolution Order)</li>
<li><strong><code>class</code></strong>：此参数主要用于定位当前类在MRO的位置</li>
</ul>
<p>&emsp;为了说明<code>super()</code>指向的是MRO的下一个类，而MRO的下一个类并不一定是父类。请看如下例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"In Class A"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"In Class B. Before super()"</span></span><br><span class="line">        super(B, self).__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"In Class B. After super()"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span><span class="params">(A)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"In Class C. Before super()"</span></span><br><span class="line">        super(C, self).__init__()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"In Class C. After super()"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span><span class="params">(B, C)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line"><span class="keyword">print</span> d.__class__.mro()</span><br><span class="line"></span><br><span class="line"><span class="comment">#In Class B. Before super()</span></span><br><span class="line"><span class="comment">#In Class C. Before super()</span></span><br><span class="line"><span class="comment">#In Class A</span></span><br><span class="line"><span class="comment">#In Class C. After super()</span></span><br><span class="line"><span class="comment">#In Class B. After super()</span></span><br><span class="line"><span class="comment">#[&lt;class '__main__.D'&gt;, &lt;class '__main__.B'&gt;, &lt;class '__main__.C'&gt;, &lt;class '__main__.A'&gt;, &lt;type 'object'&gt;]</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;先记住实例<code>d</code>的MRO为<strong><code>[&lt;class &#39;__main__.D&#39;&gt;, &lt;class &#39;__main__.B&#39;&gt;, &lt;class &#39;__main__.C&#39;&gt;, &lt;class &#39;__main__.A&#39;&gt;, &lt;type &#39;object&#39;&gt;]</code></strong>，此段代码的执行流程如下:</p>
<ul>
<li>类D实例化<code>D()</code>。当类在进行实例化是会自动调用方法<code>__init__(self)</code>，于是尝试调用类D的<code>__init__(self)</code>方法，发现类D没有<code>__init__(self)</code>方法，根据类继承规则，会查找类B中是否存在<code>__init__(self)</code>方法，发现类B有此方法于是执行类B的<code>__init__(self)</code>方法，打印<code>In Class B. Before super()</code></li>
<li>执行类B<code>__init__(self)</code>方法中的第二句<strong><code>super(B, self).__init__()</code></strong>。根据<code>super()</code>的实现本质：<ul>
<li><strong><code>self</code></strong>：<code>super(B, self)</code>，通过<code>self</code>参数获得实例的MRO。由于已实例化，此<code>self</code>表示的是实例对象<strong><code>d</code></strong>，于是获得<code>d</code>的MRO：<strong><code>D-&gt;B-&gt;C-&gt;A</code></strong>。</li>
<li><strong><code>B</code></strong>：<code>super(B, self)</code>，通过<code>B</code>参数获得当前类在MRO的位置并返回此位置的下一个类<strong><code>C</code></strong>。<br>&emsp;综上，<code>super(B, self).__init__()</code>其实等价于<code>C.__init__()</code>，于是执行类C的<code>__init__()</code>方法，打印<code>In Class C. Before super()</code><br>&emsp;假若<code>super()</code>总是指父类的话，那么<code>super(B, self).__init__()</code>便会等价于<code>A.__init__()</code>方法，便会打印”In Class A”。然而实际并不是，所有再次强调<code>super()</code>指的是<strong>MRO中的下一个类而非父类。</strong></li>
</ul>
</li>
<li>执行类C<code>__init__(self)</code>方法的第二句<strong><code>super(C, self).__init__()</code></strong>。简而言之，<code>self</code>指<code>d</code>，<code>C</code>指当前类位置，返回<code>A</code>。执行<code>A.__init__()</code>，打印<code>In Class A</code></li>
<li>沿路返回执行完剩下的语句</li>
</ul>
<h2 id="十、装饰器"><strong>十、装饰器</strong></h2><p>&emsp;<strong>装饰器</strong>在Python中是个比较重要的东西，Stackoverflow上有个比较详尽的解答——<a href="https://stackoverflow.com/questions/739654/how-can-i-make-a-chain-of-function-decorators-in-python/1594484#1594484" target="_blank" rel="external">Decorator</a><br>&emsp;Python为了能简洁明了地使用装饰器，专门有个语法糖用于装饰器的使用。一般Python中使用装饰器如下所示：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="comment">#code</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;实际上这是一种”简写”，完整的形式大概如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义一个装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="decorator">@wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment">#some code</span></span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#被装饰函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#code</span></span><br><span class="line"></span><br><span class="line">myfunc = decorator(myfunc)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;首先定义了一个装饰器函数<code>decorator(func)</code>，将被装饰函数作为参数传入装饰器函数中<code>decorator(myfunc)</code>，最后将装饰器函数<code>decorator(func)</code>的返回值赋值回给原来的被装饰函数对象<code>myfunc</code>。因为需要赋值回给原来的函数，所以装饰器函数<code>decorator(func)</code>的返回值需是一个函数对象<code>wrapper</code>。<br>&emsp;将装饰器函数<code>decorator(func)</code>返回值赋值回给原来的函数对象<code>myfunc</code>这种做法会引发一个问题。被装饰函数<code>myfunc()</code>被重新赋值后其实已经是另外一个函数<code>wrapper(*args, **kwargs)</code>了。原来<code>myfunc()</code>的<code>__name__</code>和<code>docstring</code>已经被重写了。当执行<code>print myfunc.__name__</code>时所得到的结果是<strong><code>wrapper</code></strong>而非所期待的<strong><code>myfunc</code></strong>。为了解决这个问题，Python提供了一个简单的函数<code>functools.wraps</code>。其实这也是个装饰器函数，于是就有了<strong><code>@wraps(func)</code></strong>。</p>
<h3 id="累加装饰器"><strong>累加装饰器</strong></h3><p>&emsp;装饰器可多个进行累加，使用Stackoverflow那篇回答中的三明治例子就能很生动形象的加以解释，在火腿上添加面包和佐料两个装饰器。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bread</span><span class="params">(func)</span>:</span></span><br><span class="line">	<span class="string">"""面包装饰器(用于添加面包)"""</span></span><br><span class="line">    <span class="decorator">@wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&lt;/''''''\&gt;"</span></span><br><span class="line">        func()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"&lt;\______/&gt;"</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ingredients</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="string">"""佐料装饰器(用于添加番茄和沙拉)"""</span></span><br><span class="line">    <span class="decorator">@wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"#tomatoes#"</span></span><br><span class="line">        func()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"~salad~"</span></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@bread</span></span><br><span class="line"><span class="decorator">@ingredients</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sandwich</span><span class="params">(food=<span class="string">"--ham--"</span>)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> food</span><br><span class="line"></span><br><span class="line"><span class="comment">#sandwich = bread(ingredients(sandwich))</span></span><br><span class="line">sandwich()</span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;/''''''\&gt;</span></span><br><span class="line"><span class="comment">##tomatoes#</span></span><br><span class="line"><span class="comment">#--ham--</span></span><br><span class="line"><span class="comment">#~salad~</span></span><br><span class="line"><span class="comment">#&lt;\______/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="装饰器的参数传递"><strong>装饰器的参数传递</strong></h3><h4 id="向装饰器内的装饰函数传递参数"><strong>向装饰器内的装饰函数传递参数</strong></h4><p>&emsp;Python中可以使用<strong><code>*args</code></strong>和<strong><code>\*\*kwargs</code></strong>，将被装饰函数中的参数<code>myfunc(&#39;mogl&#39;)</code>传递给装饰器函数<code>decorator(func)</code>中的装饰函数<code>wrapper(*args, **kwargs)</code>。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="decorator">@wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"get args"</span>, args, kwargs</span><br><span class="line">        func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"My name is"</span>, name</span><br><span class="line"></span><br><span class="line">myfunc(<span class="string">'mogl'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#get args ('mogl',) &#123;&#125;</span></span><br><span class="line"><span class="comment">#My name is mogl</span></span><br></pre></td></tr></table></figure></p>
<h4 id="向装饰器传递参数"><strong>向装饰器传递参数</strong></h4><p>&emsp;向装饰器本身传递参数,可通过包裹函数实现。先创建包裹函数并在包裹函数内创建装饰器,然后再将参数传递给包裹函数。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorator_arguments</span><span class="params">(name)</span>:</span>		<span class="comment">#用于接收传递给装饰器的参数(接收参数name)</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span>			<span class="comment">#实际装饰器，用于接收被装饰函数(接收参数被装饰函数对象)</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"decorator_arguments: %s"</span> % name</span><br><span class="line">            </span><br><span class="line">            <span class="decorator">@wraps(func)</span></span><br><span class="line">            <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span>	<span class="comment">#装饰函数，接收被装饰函数自带的参数/添加装饰</span></span><br><span class="line">            	<span class="keyword">print</span> <span class="string">"In wrapper(), args: %s, kwargs: %s"</span> % (args, kwargs)</span><br><span class="line">            	<span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@decorator_arguments('mogl')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(full_name)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc(<span class="string">'moguoliang'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#decorator_arguments: mogl</span></span><br><span class="line"><span class="comment">#In wrapper(), args: ('moguoliang',), kwargs: &#123;&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="装饰器类"><strong>装饰器类</strong></h3><p>&emsp;为了使得装饰器有继承的特性，一般可用类来构建装饰器，以类而非函数的方式构建装饰器。<br>&emsp;一个类装饰器主要有两个成员方法<strong><code>__init__()</code></strong>和<strong><code>__call__()</code></strong></p>
<ul>
<li><code>__init__()</code>：给某函数进行装饰时被调用</li>
<li><code>__call__()</code>：调用被装饰的函数时<code>__call__()</code>被调用<br>  &emsp;<code>__call__()</code>是Python提供的一个方法，它可让类实例的行为表现得想函数一样(可调用/可将函数作为参数传递给另一函数)。简而言之，即使得<code>x()</code>等价与<code>x.__call__()</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#装饰器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name=<span class="string">'mogl'</span>)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"In Decorator.__call__(), name: %s"</span> % self.name</span><br><span class="line"></span><br><span class="line">        <span class="decorator">@wraps(func)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"In wrapper(), args: %s, kwargs: %s"</span> % (args, kwargs)</span><br><span class="line">            self.extend()</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extend</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#演示类的继承特性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecoratorSubclass</span><span class="params">(Decorator)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, email, *args, **kwargs)</span>:</span></span><br><span class="line">        super(DecoratorSubclass, self).__init__(*args, **kwargs)</span><br><span class="line">        self.email = email</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extend</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"DecoratorSubclass argument email=%s"</span> % self.email</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"In DecoratorSubclass.extend()"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@Decorator()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc</span><span class="params">(fullname)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc(<span class="string">'moguoliang'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@DecoratorSubclass('fatesai@gmail.com')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myfunc2</span><span class="params">(fullname)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">myfunc2(<span class="string">'moguoliang'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#In Decorator.__call__(), name: mogl</span></span><br><span class="line"><span class="comment">#In wrapper(), args: ('moguoliang',), kwargs: &#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#In Decorator.__call__(), name: mogl</span></span><br><span class="line"><span class="comment">#In wrapper(), args: ('moguoliang',), kwargs: &#123;&#125;</span></span><br><span class="line"><span class="comment">#DecoratorSubclass argument email=fatesai@gmail.com</span></span><br><span class="line"><span class="comment">#In DecoratorSubclass.extend()</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="十一、上下文管理器"><strong>十一、上下文管理器</strong></h2><p>&emsp;上下文管理器(Context Manager)是Python2.5开始支持，规定在进入或离开特定代码块时会执行特殊的操作。最普遍的用法是对文件的操作，使用<code>with</code>语句自动关闭打开的文件。<br>&emsp;在对文件进行操作后，需要关闭打开的文件但经常会忘记导致文件描述符一直累积占用资源。上下文管理器可在文件操作结束后<strong>自动</strong>执行关闭文件的操作。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#使用try...finally实现</span><br><span class="line">try:</span><br><span class="line">    f = <span class="function"><span class="title">open</span><span class="params">(<span class="string">"test.txt"</span>, <span class="string">"r"</span>)</span></span></span><br><span class="line">    print f.<span class="function"><span class="title">read</span><span class="params">()</span></span></span><br><span class="line">finally:</span><br><span class="line">    f.<span class="function"><span class="title">close</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line">#使用上下文管理器</span><br><span class="line">with <span class="function"><span class="title">open</span><span class="params">(<span class="string">"test.txt"</span>, <span class="string">"r"</span>)</span></span> as f:</span><br><span class="line">    print f.<span class="function"><span class="title">read</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="上下文管理器的实质"><strong>上下文管理器的实质</strong></h3><p>&emsp;一个上下文管理器对象至少要实现<strong><code>__enter__()</code></strong>和<strong><code>__exit__(type, valve, traceback)</code></strong>方法。以<code>wiht</code>语句为例子大致了解上下文管理器的执行过程：</p>
<ol>
<li>遇到<code>with</code>关键字先加载<code>__exit__()</code>方法以备用调用</li>
<li>执行<code>with</code>关键字后的语句<code>open(&quot;test.txt&quot;, &quot;r&quot;)</code>获取一个文件对象的上下文管理器</li>
<li>执行<code>__enter__()</code>方法，方法的返回值将传递给<code>as</code>后的<code>f</code>变量</li>
<li>执行<code>with</code>代码块的子句<code>print f.read()</code></li>
<li>执行<code>__exit__()</code>，若<code>with</code>代码块子句有异常则将<code>type, value, traceback</code>传递给<code>__exit__()</code>，无异常则传<code>None</code>；<code>__exit__()</code>接收值后若返回<code>False</code>则将异常抛出交由外层处理，返回<code>True</code>则忽略异常。</li>
</ol>
<h3 id="自定义上下文管理器"><strong>自定义上下文管理器</strong></h3><h4 id="基于类实现上下文管理器"><strong>基于类实现上下文管理器</strong></h4><p>&emsp;基于类的实现最简单的方式就是直接定义好<code>__enter__(self)</code>方法和<code>__exit__(self, type, value, traceback)</code>方法。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileContextManage</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, file_name, method)</span>:</span></span><br><span class="line">        self.file_obj = open(file_name, method)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.file_obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></span><br><span class="line">        self.file_obj.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> FileContextManage(<span class="string">'test.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">	<span class="keyword">print</span> fd.read()</span><br></pre></td></tr></table></figure></p>
<h4 id="基于生成器实现上下文管理器"><strong>基于生成器实现上下文管理器</strong></h4><p>&emsp;Python有<code>contextlib</code>模块专门用于使用生成器来实现上下文管理器。<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> contextlib import contextmanager</span><br><span class="line"></span><br><span class="line">@contextmanager</span><br><span class="line">def file_context_manage(file_name, <span class="function"><span class="keyword">method</span>):</span></span><br><span class="line">    fd = open(file_name, <span class="function"><span class="keyword">method</span>)</span><br><span class="line">    <span class="title">yield</span> <span class="title">fd</span></span><br><span class="line">    <span class="title">fd</span>.<span class="title">close</span><span class="params">()</span></span><br><span class="line"></span><br><span class="line"><span class="title">with</span> <span class="title">file_context_manage</span><span class="params">(<span class="string">'test.txt'</span>, <span class="string">'r'</span>)</span> <span class="title">as</span> <span class="title">fd</span>:</span></span><br><span class="line">	print fd.<span class="keyword">read</span>()</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>contextmanager</code>装饰器返回<code>GeneratorContextManager</code>对象，即<code>file_context_manage</code>函数被装饰后实际上是一个<code>GeneratorContextManager</code>对象。<code>yield</code>只能返回一个值，此值相当于<code>__enter__()</code>的返回值，<code>yield</code>后的语句相当于<code>__exit__()</code>方法内的语句。</p>
<h2 id="十二、描述符"><strong>十二、描述符</strong></h2><p>&emsp;<strong>描述符</strong>是Python2.2之后引入的，<strong>描述符</strong>其属性的访问被<strong>描述符协议方法</strong>覆写，即<strong>描述符</strong>将对象属性的获取、赋值和删除转化为调用<strong>描述符协议方法</strong>。<strong>描述符协议方法</strong>有三个：</p>
<ul>
<li><strong><code>__get__(self, instance, owner) --&gt; return value</code></strong></li>
<li><strong><code>__set__(self, instance, value) --&gt; return None</code></strong></li>
<li><strong><code>__delete__(self, instance) --&gt; return None</code></strong></li>
</ul>
<p>&emsp;简而言之，<strong>描述符</strong>就是实现了<strong>描述符协议方法</strong>的对象(<strong>至少</strong>实现<code>__get__()</code>、<code>__set__()</code>和<code>__delete__()</code>方法的其中一个即可)，<strong>描述符</strong>对属性的访问是通过调用<strong>描述符协议方法</strong>的。<br>&emsp;根据实现的<strong>描述符协议方法</strong>的多少又可分成：</p>
<ul>
<li><strong>数据描述符(data descriptor)</strong>：实现了<code>__get__()</code>和<code>__set__()</code>方法</li>
<li><strong>非数据描述符(non-data descriptor)</strong>：仅实现<code>__get__()</code>方法</li>
</ul>
<h3 id="获取属性"><strong>获取属性</strong></h3><p>&emsp;对于<strong>描述符</strong>还有几点需要注意：</p>
<ol>
<li><strong>描述符只能在类级别上进行合法定义，而不能在实例级别上定义，即描述符只能是类属性而不能是实例属性。</strong></li>
<li><strong>数据描述符(data descriptor)</strong>不能被实例属性覆盖，即<strong>数据描述符</strong>对同名实例属性(非描述符)有屏蔽作用。<strong>非数据描述符(non-data descriptor)</strong>和普通类属性相同会被实例属性覆盖。换句话说这是<strong>数据描述符</strong>和<strong>非数据描述符</strong>之间的最主要区别是：相对于实例字典的优先级不同。如果实例字典中有与描述器同名的属性，如果描述器是资料描述器，优先使用资料描述器，如果是非资料描述器，优先使用字典中的属性。</li>
</ol>
<p>&emsp;在没有<strong>描述符</strong>之前获取属性相对较简单明了，但加入了<strong>描述符</strong>后就会变得稍微复杂，为方便对比来看一下没有描述符和有描述符的属性获取过程：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    class_attr = <span class="string">"Class attribute"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">class_method</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Class method"</span></span><br><span class="line"></span><br><span class="line">my_instance = MyClass()</span><br><span class="line"><span class="keyword">print</span> my_instance.class_attr</span><br></pre></td></tr></table></figure></p>
<ul>
<li><p>不考虑描述符情况(Python2.2之前)<br>  &emsp;Python对象一般都是通过<code>__dict__</code>字典动态管理对象的所有属性。<br>  &emsp;Python的属性搜索都是从<strong>MRO</strong>自下向上搜索<br>  &emsp;当通过<code>my_instance.class_attr</code>方式访问属性时，无描述的情况大致如下：</p>
<ol>
<li>首先在实例对象<code>my_instance</code>的<code>__dict__</code>内查找是否存在属性<code>class_attr</code>，若存在则直接返回。</li>
<li>若不存在则在<strong>MRO</strong>链上的下一个类的<code>__dict__</code>查找，找到则返回否则继续在<strong>MRO</strong>链上的下一个类上查找。直到最后都没找到则返回异常。</li>
</ol>
</li>
<li><p>考虑描述符情况(Python2.2之后)<br>  &emsp;对于实例对象而言，通过<code>.</code>方式获取属性<code>my_instance.class_attr</code>实际上是调用了<strong><code>object.__getattribute__()</code></strong>方法(每次引用属性或方法时都会无条件的调用<code>__getattribute__()</code>)，而<code>__getattribute__()</code>方法又会根据<strong>对象</strong>或<strong>类</strong>调用不同的<code>__get__()</code>方法</p>
<ul>
<li><strong>对象</strong>：<code>obj.x</code>，调用<code>type(obj).__dict__[&#39;x&#39;].__get__(obj, type(obj))</code></li>
<li><p><strong>类</strong>：<code>class.x</code>，调用<code>type(class).__dict__[&#39;x&#39;].__get__(None, type(class)</code></p>
<p>&emsp;最终<code>my_instance.class_attr</code>会被解析成<strong><code>type(my_instance).__dict__[&#39;class_attr&#39;].__get__(my_instance, type(my_instance))</code></strong>——&gt;<strong><code>MyClass.__dict__[&#39;class_attr&#39;].__get__(my_instance, MyClass)</code></strong><br>&emsp;通过<code>my_instance.class_attr</code>方式获取属性时，考虑描述符情况的大致过程如下：</p>
</li>
</ul>
<ol>
<li>查找<code>MyClass</code>中是否覆写方法<code>__getattribute__()</code>。若覆写则返回<code>MyClass.__getattribute__(my_instance, &#39;class_attr&#39;)</code>；否则执行<code>2</code></li>
<li>依次在<code>MyClass.__mro__</code>链上的类的<code>__dict__</code>中查找<code>class_attr</code><ul>
<li>完全没找到<code>class_attr</code>，查找<code>MyClass</code>中是否存在<code>__getattr__()</code>方法，存在则调用<code>MyClass.__getattr__(my_instance, &#39;class_attr&#39;)</code>获取实例中的<code>class_attr</code>属性。若不存在<code>__getattr__()</code>或<code>__getattr__()</code>方法获取实例属性失败(实例无此属性)都将抛出<code>AttributeError</code>异常。</li>
<li>找到<strong>第一个</strong><code>class_attr</code><ul>
<li>3 判断<code>class_attr</code>是否是<strong>数据描述符</strong><ul>
<li>是：返回<code>Descr.__get__(class_attr, my_instance, MyClass)</code></li>
<li>否：查找实例的<code>__dict__</code>是否存在<code>class_attr</code>，存在则返回并<strong>结束</strong>；不存在则执行<code>4</code>。(存在之所以直接结束是因为实例属性可覆盖非数据描述符(<code>4</code>)和类属性<code>5</code>)</li>
</ul>
</li>
<li>4 判断<code>class_attr</code>是否是<strong>非数据描述符</strong><ul>
<li>是：返回<code>Descr.__get__(class_attr, my_instance, MyClass)</code></li>
<li>否：执行<code>5</code></li>
</ul>
</li>
<li>5 <code>class_attr</code>为普通类属性且<code>my_instance</code>不存在该实例属性(<code>3</code>-否)，返回类属性<code>class_attr</code></li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
<h3 id="设置属性"><strong>设置属性</strong></h3><p>&emsp;引入了描述符后设置属性<code>my_instance.class_attr = &#39;test&#39;</code>的大致过程如下：</p>
<ol>
<li>查找<code>MyClass</code>类中是否覆写方法<code>__setarrt__()</code>。若覆写则返回<code>MyClass.__setattr__(self, &#39;class_attr&#39;, value)</code>；否则执行<code>2</code></li>
<li>依次在<code>MyClass.__mro__</code>链上的<code>__dict__</code>中查找<code>class_attr</code><br> &emsp;对于第一个找到的<code>class_attr</code>，若<code>class_attr</code>是数据描述符(data descriptor)，则返回<code>Descr.__set__(attr, my_instance, value)</code> <strong>结束</strong>；否则则意味着<code>class_attr</code>是非数据描述符或类属性或找不到<code>class_attr</code></li>
<li>在实例<code>my_instance</code>的<code>__dict__</code>设置<code>class_attr</code>属性</li>
</ol>
<h3 id="删除属性"><strong>删除属性</strong></h3><p>&emsp;引入了描述符后删除属性<code>del my_instance.class_attr</code>的大致过程如下：</p>
<ol>
<li>查找<code>MyClass</code>类中是否覆写方法<code>__delarrt__()</code>。若覆写则返回<code>MyClass.__delattr__(self, &#39;class_attr&#39;)</code>；否则执行<code>2</code></li>
<li>依次在<code>MyClass.__mro__</code>链上的<code>__dict__</code>中查找<code>class_attr</code><br> &emsp;对于第一个找到的<code>class_attr</code>，若<code>class_attr</code>是定义了<code>__delete__</code>的描述符，则返回<code>Descr.__delete__(attr, my_instance)</code> <strong>结束</strong>；否则则意味着<code>class_attr</code>是没定义<code>__delete__()</code>的描述符或类属性或找不到<code>class_attr</code></li>
<li>若实例<code>my_instance</code>中存在属性<code>class_attr</code>则删除，否则抛出AttributeError异常</li>
</ol>
<h2 id="十三、元类"><strong>十三、元类</strong></h2><p>&emsp;<strong>元类(metaclass)</strong>是用来创建<strong>类(class)</strong>的，即<strong>元类(metaclass)</strong>是类的类。也就是说<strong>元类(metaclass)</strong>的实例化是<strong>类(class)</strong>，<strong>类(class)</strong>的实例化是<strong>类实例对象(object)</strong>。<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class =<span class="function"> metaclass(</span><span class="function">)</span>		<span class="comment">#元类(metaclass)创建类(class)</span><span class="instruction"></span><br><span class="line">instance </span>=<span class="function"> class(</span><span class="function">)</span>		<span class="comment">#类(class)创建实例(object)</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;在Python中默认使用<strong>type</strong>这个内建的元类(metaclass)来创建所有的类(class)。可使用<strong>type</strong>函数创建类，规定格式如下：<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="typedef"><span class="keyword">type</span><span class="container">(类名, 父类的元组（针对继承的情况，可以为空），包含属性的字典（名称和值）)</span></span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;所以使用<code>class</code>关键字创建的类其实和调用<code>type</code>函数创建的类是一样的。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#例子<span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(</span><span class="class"><span class="keyword">object</span>):</span></span><br><span class="line">	pass</span><br><span class="line"></span><br><span class="line"><span class="type">MyClass</span> = <span class="class"><span class="keyword">type</span>(</span><span class="symbol">'MyClas</span>s', (), &#123;&#125;)</span><br><span class="line"></span><br><span class="line">#例子<span class="number">2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(</span><span class="class"><span class="keyword">object</span>):</span></span><br><span class="line">	name = <span class="symbol">'mog</span>l'</span><br><span class="line"></span><br><span class="line"><span class="type">MyClass</span> = <span class="class"><span class="keyword">type</span>(</span><span class="symbol">'MyClas</span>s', (), &#123;<span class="symbol">'nam</span>e': <span class="symbol">'mog</span>l'&#125;)</span><br><span class="line"></span><br><span class="line">#例子<span class="number">3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(</span><span class="class"><span class="keyword">object</span>):</span></span><br><span class="line">	pass</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySubClass</span>(</span><span class="type">MyClass</span>):</span><br><span class="line">	sub_name = <span class="symbol">'mogl_chil</span>d'</span><br><span class="line"></span><br><span class="line"><span class="type">MySubClass</span> = <span class="class"><span class="keyword">type</span>(</span><span class="symbol">'MySubClas</span>s', (<span class="type">MyClass</span>,), &#123;<span class="symbol">'sub_nam</span>e': <span class="symbol">'mogl_chil</span>d'&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="__metaclass__"><strong>__metaclass__</strong></h3><p>&emsp;<strong><code>__metaclass__</code></strong>用于指明该类在创建时使用的元类，若没有<code>__metaclass__</code>则默认使用<code>type</code>来创建类，所以我们可以使用<code>__metaclass__</code>来自定义元类(metaclass)。<br>&emsp;当使用关键字<code>class</code>创建类时，Python会做如下操作：<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>(</span><span class="class"><span class="keyword">object</span>):</span></span><br><span class="line">    __metaclass__ = xxxxx</span><br></pre></td></tr></table></figure></p>
<ol>
<li>遇到<code>class</code>关键字，<code>class MyClass(object)</code>说明需要创建一个名为<code>MyClass</code>的类</li>
<li>Python在<code>MyClass</code>类定义中寻找是否存在<strong><code>__metaclass__</code></strong>属性，Python对<code>__metaclass__</code>的搜索按照<strong><code>class.__metaclass__ -&gt; bases.__metaclass__ -&gt; module.__metaclass__ -&gt; type</code></strong>顺序进行，存在则使用<code>__metaclass__</code>指定的元类来创建类<code>MyClass</code>，若最终都没有<code>__metaclass__</code>则使用内建元类<code>type</code>创建。</li>
</ol>
<h3 id="自定义元类"><strong>自定义元类</strong></h3><h4 id="使用类来构建元类"><strong>使用类来构建元类</strong></h4><p>&emsp;使用类来构建元类一般都是继承type，即使用type作为父类然后覆写<strong><code>__new__()</code></strong>方法并返回<br>&emsp;<code>__new__()</code>是在<code>__init__()</code>之前就会被调用的特殊方法, 用来创建对象并返回。<br>&emsp;<code>__new__(self_class, future_class_name, future_class_parents, future_class_attr)</code>方法接收到的参数依次是：当前准备创建的类的对象; 类的名字; 类继承的父类集合; 类的方法集合<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMetaClass</span><span class="params">(type)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(self_class, future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class="line">		<span class="keyword">print</span> <span class="string">"self_class:%s, future_class_name:%s, future_class_parents:%s, future_class_attr:%s"</span> % (self_class, future_class_name, future_class_parents, future_class_attr)</span><br><span class="line">        <span class="keyword">return</span> type.__new__(self_class, future_class_name, future_class_parents, future_class_attr)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self_class, future_class_name, future_class_parents, future_class_attr)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"class: %s"</span> % self_class</span><br><span class="line">        type.__init__(self_class, future_class_name, future_class_parents, future_class_attr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">      <span class="string">"""docstring for MyClass"""</span></span><br><span class="line">      __metaclass__ = MyMetaClass</span><br><span class="line">      name = <span class="string">'mogl'</span></span><br><span class="line"></span><br><span class="line">my_instance = MyClass()</span><br><span class="line"><span class="keyword">print</span> my_instance.__class__</span><br><span class="line"></span><br><span class="line"><span class="comment">#self_class:&lt;class '__main__.MyMetaClass'&gt;, future_class_name:MyClass, future_class_parents:(&lt;type 'object'&gt;,), future_class_attr:&#123;'__module__': '__main__', '__metaclass__': &lt;class '__main__.MyMetaClass'&gt;, '__doc__': 'docstring for MyClass', 'name': 'mogl'&#125;</span></span><br><span class="line"><span class="comment">#class: &lt;class '__main__.MyClass'&gt;</span></span><br><span class="line"><span class="comment">#&lt;class '__main__.MyClass'&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="使用函数构建元类"><strong>使用函数构建元类</strong></h4><p>&emsp;除了使用类来构建元类外，也可以使用函数来构建元类，这需要使用到<code>type</code>函数<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_metaclass</span><span class="params">(class_name, class_parents, class_attrs)</span>:</span></span><br><span class="line">    my_type = type(class_name, class_parents, class_attrs)</span><br><span class="line">    my_type.name = <span class="string">"mogl"</span></span><br><span class="line">    <span class="keyword">return</span> my_type</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""docstring for MyClass"""</span></span><br><span class="line">    __metaclass__ = my_metaclass</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> MyClass.__metaclass__</span><br><span class="line"><span class="keyword">print</span> MyClass.__class__</span><br><span class="line"><span class="keyword">print</span> MyClass.name</span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;unbound method MyClass.my_metaclass&gt;</span></span><br><span class="line"><span class="comment">#&lt;type 'type'&gt;</span></span><br><span class="line"><span class="comment">#mogl</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;所谓回炉，即回炉重练。以前学Python只是抱着玩玩的心态学，但现在下定决心要好好认真学习。于是决定完全重头开始学起，主要是根据Python2.7的官方文档和网上诸多的资料来学。由于资料繁多且杂乱无法一一列举，仅将回炉所学记录以便日后翻阅。</p>
<h2 id]]>
    </summary>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Docker笔记]]></title>
    <link href="http://yoursite.com/2016/02/02/docker/"/>
    <id>http://yoursite.com/2016/02/02/docker/</id>
    <published>2016-02-02T09:32:55.000Z</published>
    <updated>2016-03-02T10:51:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装Docker"><strong>安装Docker</strong></h2><ul>
<li>系统版本：CentOS 7 64bit</li>
<li>内核版本：3.10.0-229.el7.x86_64</li>
<li>Docker版本：docker-1.8.2-10.el7.centos.x86_64</li>
</ul>
<p>&emsp;安装Docker<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> yum install docker</span><br><span class="line"></span><br><span class="line"><span class="variable">$&gt;</span> docker -v</span><br><span class="line"><span class="constant">Docker </span>version <span class="number">1.8</span>.<span class="number">2</span>-el7.centos, build a01dc02/<span class="number">1.8</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<h2 id="基础概念"><strong>基础概念</strong></h2><h3 id="镜像(image)"><strong>镜像(image)</strong></h3><ul>
<li>镜像(image)是容器(container)运行时的只读模板，一个镜像(image)由<strong>多个只读层(read-only layer)</strong>组成。(可借用Photoshop的图层概念方便理解)</li>
<li>Docker使用<strong>统一文件系统(union file system)</strong>将多个<strong>只读层(read-only layer)</strong>整合成一个独立的文件系统。</li>
<li>镜像(image)是Docker的<strong>构造</strong>部分。<br><img src="http://7xk64o.com1.z0.glb.clouddn.com/docker_image_layer.png" alt="镜像只读图"><br><a href="http://7xk64o.com1.z0.glb.clouddn.com/docker_image_layer.png" target="_blank" rel="external">图片来源</a></li>
</ul>
<h3 id="容器(container)"><strong>容器(container)</strong></h3><ul>
<li>Docker利用容器(container)来运行应用，容器(container)包含应用运行时所需的所有环境。</li>
<li>容器(container)是在镜像(image)的基础上创建而来，不同容器(container)间是相互隔离的。</li>
<li>容器(container) = 镜像(image) + 可读写层(read-write layer)<br>  可读写层位于镜像的上层，是Docker的最上层</li>
<li>容器(container)中应用的进程对文件进行的创建、修改和删除等操作都是作用于<strong>可读写层(read-write layer)</strong></li>
<li>容器(container)可<strong>运行</strong>、<strong>开始</strong>、<strong>停止</strong>、<strong>移动</strong>、<strong>删除</strong>。</li>
<li>容器(container)是Docker的<strong>运行</strong>部分。</li>
</ul>
<h3 id="仓库(repository)"><strong>仓库(repository)</strong></h3><ul>
<li>仓库(repository)为存放镜像(image)的地方。</li>
<li>仓库(repository)分<strong>公有仓库</strong>和<strong>私有仓库</strong>。目前最大的公有仓库为<a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a></li>
<li>仓库(repository)是Docker的<strong>分发</strong>部分。</li>
</ul>
<h3 id="Namespace"><strong>Namespace</strong></h3><p>&emsp;Namespace是Linux Kernel提供的一种<strong>内核级别</strong>的资源隔离机制。Linux的地址空间分为<strong>user space</strong>和<strong>kernel space</strong>，每个进程在user space中独立拥有自己的地址空间且进程间互相隔离不可知。当进程需要使用到kernel相关的资源时都是通过调用kernel api进入kernel space使用kernel提供的服务(从<strong>用户态</strong>切换到<strong>内核态</strong>)。进程在user space中是相互独立隔离的，但在kernel space则是共享内核资源的，内核中有许多全局共享使用的资源，如IP、路由表、hostname、init进程、PID和GID等等。为了在kernel space中对内核全局资源(IP、PID等)实现隔离，Linux　Kernel提供了Namespace机制。<br>&emsp;<strong>mount namespace</strong>是最早出现的namespace，于2002年开始产生，用于隔离文件系统相关资源。随着container的产生与发展，截止<code>kernel 3.8</code>已存在<strong><code>6</code></strong>个不同类型的namespace，用于隔离不同的内核全局资源。</p>
<ul>
<li><strong>UTS Namespace</strong><br>  &emsp;UTS Namespace(UNIX Time-sharing System)，用于隔离hostname和domain name。Docker容器拥有独立的UTS Namespace，默认使用<strong>CONTAINER ID</strong>作为hostname。</li>
<li><strong>Mount Namespace</strong><br>  &emsp;Mount Namespace通过隔离文件系统挂载点实现隔离文件系统，不同Mount Namespace中的文件结构发生变化互不影响。在创建Mount Namespace时会将当前文件结构复制给新的Mount Namespace，新的Mount Namespace中的所有mount操作仅对此Mount Namespace起作用。</li>
<li><strong>IPC Namespace</strong><br>  &emsp;IPC Namespace(Inter-Process Communication)，IPC是Linux进程间通信的一种方式，IPC有共享内存、命名管道等方法实现进程间的相互通信。隔离IPC后，只有在同一个IPC Namespace下的进程才能直接通信。</li>
<li><strong>PID Namespace</strong><br>  &emsp;PID Namespace，主要就用于隔离PID。每个PID Namespace的第一个进程为<code>PID=1</code>，功能和<strong>init进程</strong>一样，比如接管孤儿进程等。<br>  &emsp;Namespace允许嵌套，每个Namespace只能影响自身Namespace和子Namespace。</li>
<li><strong>Network Namespace</strong><br>  &emsp;Network Namespace，用于网络资源的隔离，如：网络设备、IP、路由表、iptables和端口(socket)等等。</li>
<li><strong>User Namespace</strong><br>  &emsp;User Namespace，用于隔离UID、GID和秘钥等资源。</li>
</ul>
<h3 id="CGroups"><strong>CGroups</strong></h3><p>&emsp;CGroups是Linux Kernel提供的一种限制、记录资源的机制，所限制的资源包括CPU、Memory、IO等等。<br>&emsp;CGroups通过VFS和上层进行交互，CGroups自定义伪文件系统并定义用于限制各资源的文件。CGroups通过挂载伪文件系统，设置、读取用于限制各资源的文件来限制任务对资源的使用。<br>&emsp;CGroups提供<code>4</code>个主要功能：</p>
<ul>
<li><strong>Resource Limitation(资源限制)</strong>：例如限制某程序最多能使用的内存空间、只能使用CPU的哪些核心等等。</li>
<li><strong>Prioritization(优先级分配)</strong>：设置优先级，优先级越高能获得越多的资源。</li>
<li><strong>Accounting(资源统计)</strong>：统计资源使用量，主要目的用于计费。</li>
<li><strong>Control(进程控制)</strong>：能对进程组执行挂起、恢复等操作。</li>
</ul>
<p>&emsp;CGroups基础概念：</p>
<ul>
<li><strong>task(任务)</strong>：表示一个系统进程。每个子系统目录下会有<code>tasks</code>文件(例如memory子系统：<code>/sys/fs/cgroup/memory/tasks</code>)，文件内容为限制的进程PID。</li>
<li><strong>control group(控制组)</strong>：CGroups对资源的限制以control group(控制组)为单位进行。一个任务加入某control group，表示任务需要按照此control group的限制规则来使用资源。</li>
<li><strong>subsystem(子系统)</strong>：subsystem(子系统)既资源控制器。不同subsystem(子系统)对不同资源进行限制，目前CGroups有以下subsystem(子系统)<strong><code>/sys/fs/cgroup/</code></strong>：<ul>
<li>blkio：限制块设备(磁盘、SSD、光盘)的IO。</li>
<li>cpu：控制task(任务)对CPU的使用。</li>
<li>cpuacct：自动生成task(任务)使用cpu的报告。</li>
<li>cpuset：为task(任务)分配独立cpu(多核)和内存。</li>
<li>devices：控制task(任务)是否允许访问设备。</li>
<li>memory：控制task(任务)能使用多少内存并自动生成使用报告。</li>
<li>freezer：挂起或恢复task(任务)</li>
<li>net_cls：使用classid标记网络数据包</li>
<li>hugetlb：对HugeTLB系统进行限制</li>
<li>perf_event：运行task(任务)进行统一性能测试</li>
</ul>
</li>
<li><strong>hierarchy(层级树)</strong>：hierarchy由control group以树状目录结构，每个hierarchy通过绑定对应的subsystem进行资源调度。一个系统可存在多个hierarchy。</li>
</ul>
<p>&emsp;关系图如下<br>&emsp;&emsp;整个灰色框是一个<strong>hierarchy</strong><br>&emsp;&emsp;<code>/cpu_mem_cg</code>包含<strong><code>cpu</code></strong>和<strong><code>memory</code></strong>的两个<strong>subsystem</strong>(表明一个hierarchy可包含多个subsystem)<br>&emsp;&emsp;<code>/cg1</code>、<code>/cg2</code>是不同的<strong>control group</strong><br>&emsp;&emsp;<code>/cg1</code>、<code>/cg2</code>目录下会有一个<strong><code>tasks</code></strong>文件，里面存放属于此<strong>control group</strong>的<strong>task</strong>(tasks文件内容为PID)</p>
<center><br><img src="http://7xk64o.com1.z0.glb.clouddn.com/CGroups-relationships.png" alt="CGroups-relationships"><br><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/sec-Relationships_Between_Subsystems_Hierarchies_Control_Groups_and_Tasks.html" target="_blank" rel="external">图片来源</a><br></center>

<h3 id="AUFS"><strong>AUFS</strong></h3><p>&emsp;上面在<strong>镜像(image)</strong>中提到Docker使用<strong>统一文件系统(union file system)</strong>将多个<strong>只读层(read-only layer)</strong>整合成独立的文件系统。更加具体来说Docker是使用一种名为<strong>AUFS(Advance union file system)</strong>的union file system。<strong>UFS</strong>有很多种，比如：aufs、btrfs、vfs和devicemapper等等。简单而言，<strong>UFS</strong>就是将不同路径的目录联合挂载到同一个目录下。<br>&emsp;<strong>AUFS</strong>特性：</p>
<ul>
<li>联合<br>  可将多个目录联合挂载到同一个目录下。只显示联合目录内容并不改变源目录。<br>  <strong><code>mount</code></strong>挂载时，越写在前面的目录优先级越高(若多目录中存在相同名称的文件则挂载优先级高目录下的文件)。默认第一个目录权限为<strong><code>rw</code></strong>，之后的目录权限都为<strong><code>ro</code></strong>。</li>
<li>branch<br>  各个需要被联合(union)的子目录，Docker中也可理解为层(layer)。</li>
<li>copy on write<br>  若需要对联合目录下的内容做修改时，查找已union的branch中是否存在此文件，若存在则选择<strong>可写(rw)</strong>且优先级最高的branch并将文件copy到此branch后再修改。</li>
<li>whiteout<br>  用于隐藏下层branch文件。在上层目录创建<strong>.wh.<filename></filename></strong>，可隐藏下层的<filename>文件。</filename></li>
</ul>
<p>&emsp;通过具体实例了解<strong>AUFS</strong>：<br>&emsp;由于CentOS 7默认并不支持AUFS而且要安装也比较麻烦(CentOS系列实现分层镜像用的是DeviceMapper技术，Ubuntu使用AUFS实现)，所以实验环境在<strong>Ubuntu 14.04</strong>上进行，Ubuntu默认没安装AUFS，需要先安装<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo apt-<span class="keyword">get</span> install aufs-tools</span><br></pre></td></tr></table></figure></p>
<p>&emsp;先创建<strong><code>4</code></strong>个目录：<code>ro_a</code>、<code>ro_b</code>、<code>rw_c</code>和<code>union</code>。创建<strong><code>2</code></strong>个文件：<code>ro_a/a.txt</code>、<code>ro_b/b.txt</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$&gt; tree</span><br><span class="line">.</span><br><span class="line">├── ro_a</span><br><span class="line">│   └── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">├── ro_b</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">├── rw_c</span><br><span class="line">└── union</span><br><span class="line"><span class="number">4</span> directories, <span class="number">2</span> files</span><br></pre></td></tr></table></figure>
<p>&emsp;将目录<code>rw_c</code>、<code>ro_a</code>和<code>ro_b</code> union mount到<code>union</code>目录。第一个branch为<code>rw_c</code>(可读写)，第二、三分别为<code>ro_a</code>、<code>ro_b</code>(只读)<br>&emsp;成功union mount后在<code>union</code>目录可看到其余目录的文件。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo mount -t aufs -o br=rw_c=rw:ro_a=ro:ro_b=ro <span class="attribute">none</span> union</span><br><span class="line"></span><br><span class="line">$&gt; tree</span><br><span class="line">.</span><br><span class="line">├── ro_a</span><br><span class="line">│   └── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">├── ro_b</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">├── rw_c</span><br><span class="line">└── union</span><br><span class="line">    ├── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">    └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line"><span class="number">4</span> directories, <span class="number">4</span> files</span><br></pre></td></tr></table></figure></p>
<p>&emsp;对union mount后的文件<code>union/b.txt</code>进行修改。AUFS会查找优先级高且可读写的branch进行操作(<code>rw_c</code>)，而且由于<strong>copy on write</strong>特性会将源文件<code>ro_b/b.txt</code>文件copy到<code>rw_c</code>目录下再做修改。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$&gt; echo <span class="string">'aufs test'</span> &gt;&gt; union/<span class="tag">b</span><span class="class">.txt</span></span><br><span class="line"></span><br><span class="line">$&gt; tree</span><br><span class="line">.</span><br><span class="line">├── ro_a</span><br><span class="line">│   └── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">├── ro_b</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">├── rw_c</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">└── union</span><br><span class="line">    ├── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">    └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line"><span class="number">4</span> directories, <span class="number">5</span> files</span><br><span class="line"></span><br><span class="line">#源branch保持不变</span><br><span class="line">$&gt; cat ro_b/<span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">ro_b <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line"></span><br><span class="line">#复制ro_b/<span class="tag">b</span>.txt到rw_c/<span class="tag">b</span>.txt并修改</span><br><span class="line">$&gt; cat rw_c/<span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">ro_b <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">aufs test</span><br></pre></td></tr></table></figure></p>
<p>&emsp;在<code>rw_c</code>目录创建<strong><code>.wh.a.txt</code></strong>文件用于屏蔽<code>ro_a/a.txt</code><br>&emsp;源目录文件<code>ro_a/a.txt</code>并不会受到任何影响，但在union mount的目录<code>union</code>下会无法看见<code>union/a.txt</code>文件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$&gt; touch rw_c/<span class="class">.wh</span><span class="class">.a</span><span class="class">.txt</span></span><br><span class="line">$&gt; tree</span><br><span class="line">.</span><br><span class="line">├── ro_a</span><br><span class="line">│   └── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">├── ro_b</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">├── rw_c</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">└── union</span><br><span class="line">    └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line"><span class="number">4</span> directories, <span class="number">4</span> files</span><br></pre></td></tr></table></figure></p>
<h3 id="DeviceMapper"><strong>DeviceMapper</strong></h3><p>&emsp;Docker最开始是使用AUFS实现分层镜像，但由于AUFS并没有被接纳入Linux内核主干(被linus拒绝接纳多次)，仅有Ubuntu对AUFS支持导致兼容性差。对于非Ubuntu的系统为了解决此问题，使用了<strong>DeviceMapper</strong>代替AUFS实现分层镜像。<br>&emsp;DeviceMapper有三个重要的基础概念：<strong>Mapped Device</strong>——&gt;<strong>Mapping Table</strong>——&gt;<strong>Target Device</strong></p>
<ul>
<li><strong>Mapped Device</strong><br>  映射出的逻辑设备。<strong>Mapped Device</strong>通过<strong>Mapping Table</strong>中的映射关系和<strong>Target Device</strong>建立映射。</li>
<li><strong>Mapping Table</strong><br>  保存<strong>Mapped Device</strong>逻辑地址的起始及范围、<strong>Target Device</strong>物理设备的地址偏移量及类型等信息。</li>
<li><strong>Target Device</strong><br>  底层设备。<strong>Target Device</strong>可以是实际的物理块设备，也可以是映射后的<strong>Mapped Device</strong>设备。<br>  DeviceMapper在内核中通过模块化的 Target Driver 插件实现对 IO 请求的过滤或者重新定向等工作，当前已经实现的插件包括软Raid、加密、多路径、镜像、快照等。其中<strong>Thin Provisioning Snapshot</strong>是Docker使用的重要模块。</li>
</ul>
<h4 id="Thin_Provisioning"><strong>Thin Provisioning</strong></h4><p>&emsp;Docker使用<strong>Thin Provisioning</strong>的<strong>Snapshot</strong>技术实现分层镜像，从而解决非Ubuntu系列Linux不原生支持AUFS的问题。<br>&emsp;由于<strong>DeviceMapper</strong>的<strong>Thin Provisioning Snapshot</strong>挺复杂且还处于实验阶段，待我再研究清楚后补上。可参考<a href="http://coolshell.cn/articles/17200.html" target="_blank" rel="external">此篇文章</a>做详细了解。</p>
<h2 id="Docker_镜像(images)"><strong>Docker 镜像(images)</strong></h2><p>&emsp;镜像(image)是Docker的重要构成部分，Docker运行容器(container)时需要本地存在相应的镜像(image)。镜像(image)可自己制作，也可从仓库(repository)中下载。</p>
<h3 id="获取镜像"><strong>获取镜像</strong></h3><p>&emsp;从Docker Hub上获取<code>CentOS 7</code>的镜像<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Docker进程</span></span><br><span class="line"><span class="variable">$&gt;</span> systemctl start  docker.service		/	service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看公有仓库中的镜像</span></span><br><span class="line"><span class="variable">$&gt;</span> docker search centos		/		docker search ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line"><span class="variable">$&gt;</span> docker pull docker.io/centos</span><br><span class="line"><span class="variable">$&gt;</span> docker pull ubuntu</span><br></pre></td></tr></table></figure></p>
<h3 id="删除镜像"><strong>删除镜像</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line"><span class="variable">$&gt;</span> docker images</span><br><span class="line"><span class="constant">REPOSITORY </span>         <span class="constant">TAG </span>                <span class="constant">IMAGE ID </span>           <span class="constant">CREATED </span>            <span class="constant">VIRTUAL SIZE</span></span><br><span class="line">docker.io/ubuntu    latest              af88597ec24b        <span class="number">3</span> days ago          <span class="number">187.9</span> <span class="constant">MB</span></span><br><span class="line">docker.io/centos    latest              <span class="number">60</span>e65a8e403<span class="number">0</span>        <span class="number">2</span> weeks ago         <span class="number">196.6</span> <span class="constant">MB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据镜像ID删除镜像</span></span><br><span class="line"><span class="variable">$&gt;</span> docker rmi af88597ec24b</span><br></pre></td></tr></table></figure>
<h3 id="修改tag"><strong>修改tag</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker tag af88597ec24b <span class="symbol">ubuntu:</span><span class="number">14.04</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&gt;</span> docker images</span><br><span class="line"><span class="constant">REPOSITORY </span>         <span class="constant">TAG </span>                <span class="constant">IMAGE ID </span>           <span class="constant">CREATED </span>            <span class="constant">VIRTUAL SIZE</span></span><br><span class="line">docker.io/ubuntu    latest              af88597ec24b        <span class="number">3</span> days ago          <span class="number">187.9</span> <span class="constant">MB</span></span><br><span class="line">docker.io/centos    latest              <span class="number">60</span>e65a8e403<span class="number">0</span>        <span class="number">2</span> weeks ago         <span class="number">196.6</span> <span class="constant">MB</span></span><br><span class="line">ubuntu              <span class="number">14.04</span>               af88597ec24b        <span class="number">3</span> days ago          <span class="number">187.9</span> <span class="constant">MB</span></span><br></pre></td></tr></table></figure>
<h3 id="修改/更新镜像"><strong>修改/更新镜像</strong></h3><p>&emsp;在<code>ubuntu14.04</code>镜像上安装vim</p>
<ul>
<li><p>启动容器(container)</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="command">run</span> -ti ubuntu:<span class="number">14.04</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装vim<br>  <code>48febfe7fbd7</code>容器(container)ID，之后<code>commit</code>更新需要用到</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@48febfe7fbd7</span><span class="symbol">:/</span><span class="comment"># apt-get install vim</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用commit更新镜像</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker commit -m <span class="string">'install vim'</span> -<span class="tag">a</span> <span class="string">'mogl'</span> <span class="number">48</span>febfe7fbd7 ubuntu:<span class="number">14.04</span><span class="class">.vim</span></span><br><span class="line">eb39a2d496eda77331a6f6efb041473125d40d3f7f51077b100604be3e3cdf39</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-m</code>：提交信息</li>
<li><code>-a</code>：更新的用户信息</li>
<li><code>48febfe7fbd7</code>：容器(container)ID。<code>ID为容器(container)ID而并非镜像(image)ID</code></li>
<li><code>ubuntu:14.04.vim</code>：tag名称</li>
</ul>
</li>
<li><p>查看修改结果</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">ubuntu              <span class="number">14.04</span><span class="class">.vim</span>           eb39a2d496ed        <span class="number">30</span> seconds ago      <span class="number">231</span> MB</span><br><span class="line">docker.io/ubuntu    latest              af88597ec24b        <span class="number">3</span> days ago          <span class="number">187.9</span> MB</span><br><span class="line">ubuntu              <span class="number">14.04</span>               af88597ec24b        <span class="number">3</span> days ago          <span class="number">187.9</span> MB</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用新镜像</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="command">run</span> -<span class="keyword">it</span> ubuntu:<span class="number">14.04</span>.vim</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="导出镜像"><strong>导出镜像</strong></h3><p>&emsp;将已有的镜像导出到本地<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker save -o ubuntu14.<span class="number">04</span><span class="class">.vim</span><span class="class">.tar</span> ubuntu:<span class="number">14.04</span>.vim</span><br></pre></td></tr></table></figure></p>
<h3 id="导入镜像"><strong>导入镜像</strong></h3><p>&emsp;导入使用<code>docker save</code>导出的镜像<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker load &lt; ubuntu14.<span class="number">04</span><span class="class">.vim</span><span class="class">.tar</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Dockerfile_创建镜像"><strong>Dockerfile 创建镜像</strong></h3><p>&emsp;使用<strong>Dockerfile</strong>创建镜像<br>&emsp;<strong>Dockerfile</strong>一般包含四部分：</p>
<ul>
<li>基础镜像</li>
<li>维护者信息</li>
<li>镜像操作指令</li>
<li>容器启动执行命令</li>
</ul>
<p>&emsp;<strong>Dockerfile</strong>指令：</p>
<ul>
<li>FROM<br>  指定基础镜像，若本地缺少镜像则自动从公有库下载镜像<br>  <code>FROM</code>指定必须是Dockerfile的非注释第一个指令<br>  若<code>FROM</code>没有指定<code>tag</code>，默认使用<strong><code>last</code></strong></li>
<li>MAINTAINER<br>  维护者信息</li>
<li>RUN<br>  <code>RUN</code>会在<code>FROM</code>指定的镜像中执行命令，执行完后提交(commit)。<code>docker run image</code>——&gt;<code>RUN command</code>——&gt;<code>docker commit container_id</code><br>  后续<code>RUN</code>都在之前<code>RUN</code>已提交(commit)的镜像基础上进行。<br>  <code>RUN</code>的书写格式分两种：<ul>
<li><strong><code>RUN command</code></strong>    (此方式运行在<code>/bin/sh -c</code>的shell中)</li>
<li><strong><code>RUN [&quot;command&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></strong></li>
</ul>
</li>
<li>CMD<br>  在容器(container)启动时添加一个默认命令。<br>  一个Dockerfile只能有一个<code>CMD</code>，若出现多个<code>CMD</code>则只有最后一个生效。<br>  若用户启动容器(container)时指定了运行的命令，则会覆盖掉 CMD 指定的命令。<br>  <code>CMD</code> 和　<code>RUN</code> 区别：<br>  &emsp;<code>CMD</code>只在容器(container)启动时执行，在使用<code>docker build</code>创建镜像时并不会执行。<br>  &emsp;<code>RUN</code>只在<code>docker build</code>创建镜像时执行，一旦创建完镜像，一切与<code>RUN</code>无关。</li>
<li>EXPOSE<br>  对外映射端口</li>
<li>ENV<br>  设置环境变量</li>
<li>ADD<br>  <code>ADD src dest</code><br>  复制<code>src</code>文件到容器<code>dest</code>。<code>src</code>可指定远程文件URLS。</li>
<li>COPY<br>  和<code>ADD</code>作用相同，但<code>src</code>不能指定远程文件。</li>
<li>ENTRYPOINT<br>  指定容器(container)启动后执行的命令，并且不可被<code>docker run</code>提供的参数覆盖(<code>CMD</code>可被覆盖)</li>
<li>VOLUME<br>  创建挂载点</li>
<li>USER<br>  指定容器(container)运行时的用户/UID(<code>CMD</code>、<code>RUN</code>、<code>ENTRYPOINT</code>使用<code>USER</code>指定的用户运行)</li>
<li>WORKDIR<br>  指定<code>CMD</code>、<code>RUN</code>、<code>ENTRYPOINT</code>的工作目录</li>
<li>ONBUILD</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mkdir centos7_nginx &amp;&amp; cd centos7_nginx</span><br><span class="line">$&gt; vim Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span></span><br><span class="line"><span class="comment"># Dockerfile to build Nginx Installed Containers</span></span><br><span class="line"><span class="comment"># Based on CentOS 7</span></span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span></span><br><span class="line"><span class="comment"># Set the base image to Ubuntu</span></span><br><span class="line">FROM <span class="attribute">centos</span>:<span class="number">7</span></span><br><span class="line"><span class="comment"># File Author / Maintainer</span></span><br><span class="line">MAINTAINER mogl &lt;fatesai<span class="property">@gmail</span>.com&gt;</span><br><span class="line"><span class="comment"># EPEL</span></span><br><span class="line"><span class="comment">#RUN echo "deb http://archive.ubuntu.com/ubuntu/ raring main universe" &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line">RUN mkdir -p <span class="regexp">/home/work/software/</span> &amp;&amp; cd <span class="regexp">/home/work/software/</span></span><br><span class="line">RUN wget <span class="attribute">http</span>:<span class="regexp">//</span>dl.fedoraproject.org/pub/epel/<span class="number">7</span>/x86_64/e/epel-release-<span class="number">7</span>-<span class="number">5.</span>noarch.rpm &amp;&amp; rpm -ivh epel-release-<span class="number">7</span>-<span class="number">5.</span>noarch.rpm</span><br><span class="line"><span class="comment"># Copy script</span></span><br><span class="line">ADD Sysinit7.sh <span class="regexp">/home/work/software/</span></span><br><span class="line"><span class="comment"># Install Nginx</span></span><br><span class="line">RUN echo <span class="string">"C"</span>|bash /home/work/software/Sysinit7.sh &amp;&gt;&gt; /tmp/nginx_install.log</span><br><span class="line"><span class="comment"># Expose ports</span></span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line"><span class="comment"># Set the default command to execute</span></span><br><span class="line"><span class="comment"># when starting a new container</span></span><br><span class="line">ENTRYPOINT /usr/local/nginx/sbin/nginx -t &amp;&gt; /dev/<span class="literal">null</span> &amp;&amp; /usr/local/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line">$&gt; docker build -t=<span class="string">"centos7:nginx"</span> /root/centos7.nginx</span><br></pre></td></tr></table></figure>
<h2 id="Docker_容器(container)"><strong>Docker 容器(container)</strong></h2><p>&emsp;容器(container)是应用及应用运行时所需的环境。</p>
<h3 id="创建并启动容器"><strong>创建并启动容器</strong></h3><p>&emsp;使用<strong><code>docker run</code></strong>创建并启动容器。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker run -ti  <span class="symbol">ubuntu:</span><span class="number">14.04</span> /bin/bash</span><br><span class="line">root<span class="variable">@f4bbade713e0</span><span class="symbol">:/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;创建并启动容器(container)，启动Bash终端并运行用户进行交互</p>
<ul>
<li><strong><code>-t</code></strong>：分配伪终端</li>
<li><strong><code>-i</code></strong>：容器标准输入保持打开</li>
<li><strong><code>f4bbade713e0</code></strong>：容器ID</li>
</ul>
<p>&emsp;<strong><code>docker run</code></strong>其实是<strong><code>docker create</code></strong>和<strong><code>docker start</code></strong>的组合，即<code>docker run = docker create + docker start</code>。这一点类似与<strong>Git</strong>中<strong><code>git pull</code></strong>和<strong><code>git fetch</code></strong>、<strong><code>git merge</code></strong>的关系。<br>&emsp;<strong><code>docker run</code></strong>内部流程：</p>
<ul>
<li>检查指定的镜像(images)是否存在本地，不存在则<code>docker pull</code>从公有库中下载镜像(images)</li>
<li><code>docker create</code>使用镜像(images)创建容器(container)，在镜像(images)的只读层(read-only layer)上(镜像栈顶部)添加一层可读写层(read-write layer)</li>
<li>从宿主机接口桥接虚拟接口到容器(container)中并从地址池分配IP给容器(container)</li>
<li><code>docker start</code>启动应用进程</li>
</ul>
<h3 id="启动已停止容器"><strong>启动已停止容器</strong></h3><p>&emsp;当用<code>docker run</code>创建并启动容器(container)后，退出容器(container)则容器处于<code>Existed</code>状态。可用<strong><code>docker start</code></strong>来启动此容器。</p>
<ul>
<li><p>查看退出容器(container)<br>  &emsp;注意<strong>STATUS</strong>，此时为<strong>Existed</strong>状态</p>
  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker ps -l</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">f4bbade713e0        ubuntu:<span class="number">14.04</span>.vim    <span class="string">"/bin/bash"</span>         <span class="number">46</span> <span class="built_in">seconds</span> ago      Exited (<span class="number">0</span>) <span class="number">2</span> <span class="built_in">seconds</span> ago                       high_brattain</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动已停止容器(container)</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker start f4bbade713e<span class="number">0</span></span><br><span class="line">f4bbade713e<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&gt;</span> docker ps -l</span><br><span class="line"><span class="constant">CONTAINER ID </span>       <span class="constant">IMAGE </span>              <span class="constant">COMMAND </span>            <span class="constant">CREATED </span>            <span class="constant">STATUS </span>             <span class="constant">PORTS </span>              <span class="constant">NAMES</span></span><br><span class="line">f4bbade713e<span class="number">0</span>        <span class="symbol">ubuntu:</span><span class="number">14.04</span>.vim    <span class="string">"/bin/bash"</span>         <span class="number">23</span> minutes ago      <span class="constant">Up </span><span class="number">24</span> seconds                           high_brattain</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入启动后的容器(container)</p>
<ul>
<li><p><strong><code>docker attach</code></strong><br>  &emsp;使用<strong><code>docker attach</code></strong>命令进入容器(container)，若直接<code>Ctrl + d</code>退出时容器(container)会自动停止(<code>UP</code>——&gt;<code>Existed</code>)。若要退出容器并保持容器运行则需要按<strong><code>Ctrl + p + q</code></strong></p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker attach f4bbade713e<span class="number">0</span></span><br><span class="line">root<span class="variable">@f4bbade713e0</span><span class="symbol">:/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>docker exec</code></strong><br>  &emsp;<strong><code>docker exec</code></strong>命令也可进入容器(container)且直接<code>Ctrl + d</code>退出后容器不会停止</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker exec -it f4bbade713e<span class="number">0</span> /bin/bash</span><br><span class="line">root<span class="variable">@f4bbade713e0</span><span class="symbol">:/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="导出容器"><strong>导出容器</strong></h3><p>&emsp;<strong><code>docker export</code></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker ps -<span class="tag">a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">f4bbade713e0        ubuntu:<span class="number">14.04</span><span class="class">.vim</span>    <span class="string">"/bin/bash"</span>         <span class="number">47</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">17</span> minutes ago                       high_brattain</span><br><span class="line">dfc9ce350449        centos:nginx        <span class="string">"/bin/bash"</span>         <span class="number">7</span> hours ago         Exited (<span class="number">0</span>) <span class="number">49</span> minutes ago                       cocky_colden</span><br><span class="line"></span><br><span class="line">$&gt; docker export f4bbade713e0 &gt; ubuntu14.<span class="number">04</span><span class="class">.vim</span><span class="class">.tar</span></span><br></pre></td></tr></table></figure></p>
<h3 id="导入容器"><strong>导入容器</strong></h3><p>&emsp;<strong><code>docker import</code></strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; cat ubuntu14<span class="number">.04</span>.vim.tar | docker <span class="keyword">import</span> - <span class="string">ubuntu:</span><span class="number">14.04</span>.vim.<span class="keyword">import</span></span><br></pre></td></tr></table></figure></p>
<h3 id="删除容器"><strong>删除容器</strong></h3><p>&emsp;<strong><code>docker rm</code></strong>(删除镜像是<code>docker rmi</code>)<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker ps -<span class="tag">a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">f4bbade713e0        ubuntu:<span class="number">14.04</span><span class="class">.vim</span>    <span class="string">"/bin/bash"</span>         <span class="number">47</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">17</span> minutes ago                       high_brattain</span><br><span class="line">dfc9ce350449        centos:nginx        <span class="string">"/bin/bash"</span>         <span class="number">7</span> hours ago         Exited (<span class="number">0</span>) <span class="number">49</span> minutes ago                       cocky_colden</span><br><span class="line"></span><br><span class="line">$&gt; docker rm f4bbade713e0</span><br><span class="line">f4bbade713e0</span><br><span class="line"></span><br><span class="line">$&gt; docker ps -<span class="tag">a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">dfc9ce350449        centos:nginx        <span class="string">"/bin/bash"</span>         <span class="number">7</span> hours ago         Exited (<span class="number">0</span>) <span class="number">54</span> minutes ago                       cocky_colden</span><br></pre></td></tr></table></figure></p>
<h2 id="Docker_数据管理"><strong>Docker 数据管理</strong></h2><p>&emsp;Docker管理数据主要有两种方式：</p>
<ul>
<li>数据卷（Data volume）</li>
<li>数据卷容器（Data volume container）</li>
</ul>
<h3 id="数据卷(Data_Volume)"><strong>数据卷(Data Volume)</strong></h3><p>&emsp;为了能保存和共享容器(container)间的数据，Docker提出<strong>数据卷(Data Volume)</strong>的概念。</p>
<ul>
<li>可绕过统一文件系统(union file system)，数据以文件或目录形式<strong>保存在宿主机文件系统上</strong>，供多个容器(container)之间共享与重用数据。</li>
<li>对数据卷(Data Volume)的修改立即生效</li>
<li>更新数据卷(Data Volume)不影响镜像(images)</li>
<li>数据卷(Data Volume)只要有容器(container)使用就会一直存在</li>
</ul>
<h4 id="创建数据卷(Data_Volume)"><strong>创建数据卷(Data Volume)</strong></h4><p>&emsp;创建数据卷(Data Volume)有两种方式：</p>
<ul>
<li><p>在Dockerfile中使用<code>VOLUME</code>指定</p>
  <figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME /<span class="built_in">path</span>/to/<span class="built_in">dir</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>docker run</code>执行时使用<strong><code>-v</code></strong>参数指定</p>
<ul>
<li><p>创建数据卷</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker run -it -v /data/docker_volume/ <span class="symbol">ubuntu:</span><span class="number">14.04</span> /bin/bash</span><br><span class="line">root<span class="variable">@24eb5121c1e4</span><span class="symbol">:/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取数据卷在宿主机上对于的路径</p>
  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker inspect 24eb5121c1e4</span><br><span class="line"><span class="keyword">...</span> <span class="keyword">...</span></span><br><span class="line">    <span class="string">"Mounts"</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"Name"</span>: <span class="string">"ec85ea5ebcf1317001d251030c15d666917862757272fa2998c0b111141917b8"</span>,</span><br><span class="line">			<span class="string">"Source"</span>: <span class="string">"/var/lib/docker/volumes/ec85ea5ebcf1317001d251030c15d666917862757272fa2998c0b111141917b8/_data"</span>,</span><br><span class="line">			<span class="string">"Destination"</span>: <span class="string">"/data/docker_volume"</span>,</span><br><span class="line">			<span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">			<span class="string">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">			<span class="string">"RW"</span>: true</span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line"><span class="keyword">...</span> <span class="keyword">...</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="挂载宿主目录作为数据卷(Data_Volume)"><strong>挂载宿主目录作为数据卷(Data Volume)</strong></h4><p>&emsp;创建数据卷(Data Volume)后还需要用<code>docker inspect</code>查找对于的宿主目录比较麻烦，直接挂载宿主目录到容器(container)中能方便数据的管理。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker run -it -v <span class="regexp">/data/</span><span class="string">docker_volume:</span><span class="regexp">/www ubuntu:14.04 /</span>bin/bash</span><br></pre></td></tr></table></figure></p>
<p>&emsp;将宿主机上的<code>/data/docker_volume</code>目录挂载到容器(container)的<code>/www</code>目录。</p>
<ul>
<li>宿主目录必须为<strong>绝对路径</strong></li>
<li>挂载到容器(container)中的目录(<code>/www</code>)默认为<strong><code>rw</code></strong>。可设置挂载为只读<code>-v /data/docker_volume:/www:ro</code></li>
</ul>
<h3 id="数据卷容器(Data_Volume_Container)"><strong>数据卷容器(Data Volume Container)</strong></h3><p>&emsp;数据卷容器(Data Volume Container)，即容器(container)创建了数据卷(Data Volume)，此数据卷(Data Volume)专提供给其他容器(container)进行挂载，数据卷容器常用于容器(container)间共享持续更新数据。</p>
<h4 id="创建数据卷容器"><strong>创建数据卷容器</strong></h4><p>&emsp;创建一个数据卷容器(Data Volume Container)并命名为<code>dbdata</code>。(数据卷容器完全可不运行，避免浪费资源)<br>    <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker run -v <span class="regexp">/data/</span>dbdata --name dbdata <span class="string">ubuntu:</span><span class="number">14.04</span> echo <span class="string">"Data-only container"</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>-v /data/dbdata</code>：创建数据卷(Data Volume)</li>
<li><code>--name dbdata</code>：命名此容器(container)为<code>dbdata</code></li>
<li><code>ubuntu:14.04</code>：指定镜像(image)。一般如果用作数据库的话并不会使用系统镜像或最小化镜像(busybox/scratch)，而是直接使用<strong>数据库镜像</strong>。</li>
<li><code>echo &quot;Data-only container&quot;</code>：指定容器执行的命令。作用有二：其一是容器执行完命令后自动退出，数据卷容器不运行；其二是当使用<code>docker ps -a</code>命令查看容器时方便指定容器的用途</li>
</ul>
<h4 id="共享数据卷容器的数据卷"><strong>共享数据卷容器的数据卷</strong></h4><p>&emsp;使用<strong><code>--volumes-from</code></strong>挂载容器(container)中的数据卷(Data Volume)到自身容器(container)中。<br>    <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="command">run</span> -<span class="keyword">it</span> -d <span class="comment">--volumes-from dbdata --name db1 centos:7 /bin/bash</span></span><br><span class="line">[root@a29120ba32fa /]<span class="comment"># ll /data/</span></span><br><span class="line">total <span class="number">0</span></span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root <span class="number">36</span> Jan <span class="number">12</span> <span class="number">07</span>:<span class="number">26</span> dbdata</span><br></pre></td></tr></table></figure></p>
<h4 id="备份、恢复数据卷"><strong>备份、恢复数据卷</strong></h4><ul>
<li><p>备份数据卷</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker run --rm --volumes-from dbdata -v <span class="variable">$(</span>pwd)<span class="symbol">:/data/backup</span> <span class="symbol">ubuntu:</span><span class="number">14.04</span> tar zcf /data/backup/backup.tar.gz /data/dbdata</span><br></pre></td></tr></table></figure>
<ul>
<li><code>docker run --rm</code>：创建并运行一个新容器(container)，<strong><code>--rm</code></strong>表示执行完命令后自动删除该容器</li>
<li><code>--volumes-from dbdata</code>：从名为<strong><code>dbdata</code></strong>的数据卷容器中挂载其数据卷到到新容器上(<code>dbdata</code>数据卷容器上的数据卷为<code>/data/dbdata</code>，就是备份此数据卷)</li>
<li><code>-v $(pwd):/data/backup</code>：将宿主机上的当前目录<code>$(pwd)</code>挂载到新容器的<code>/data/backup</code>目录</li>
<li><code>ubuntu:14.04</code>：新容器是基于<code>ubuntu:14.04</code>镜像创建的</li>
<li><code>tar zcf /data/backup/backup.tar.gz /data/dbdata</code>：将新容器中<code>/data/dbdata</code>数据卷目录进行打包压缩备份成<code>/data/backup/backup.tar.gz</code></li>
</ul>
</li>
<li><p>恢复数据卷<br>  &emsp;创建一个带数据卷的新容器，并将备份的数据卷数据恢复</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker run -it -d -v /data/dbdata --name recover_db <span class="symbol">ubuntu:</span><span class="number">14.04</span> /bin/bash</span><br><span class="line"><span class="variable">$&gt;</span> docker run --rm --volumes-from recover_db -v <span class="variable">$(</span>pwd)<span class="symbol">:/data/backup</span> <span class="symbol">ubuntu:</span><span class="number">14.04</span> tar zxf /data/backup/backup.tar.gz -<span class="constant">C </span>/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="删除数据卷"><strong>删除数据卷</strong></h4><p>&emsp;数据卷只要有容器使用便会一直存在，而且在将用到某数据卷的所有容器删除后数据卷并不会自动被删除。若要彻底删除数据卷必须在删除最后一个还挂载着它的容器时使用<strong><code>docker rm -v</code></strong>命令来指定同时删除关联的容器。<br>&emsp;<code>docker run --rm</code>在执行完命令后会自动删除容器，另外也会取消该容器和数据卷的关系。</p>
<h2 id="Docker_网络配置"><strong>Docker 网络配置</strong></h2><h3 id="容器互联"><strong>容器互联</strong></h3><p>&emsp;Docker允许容器(container)间相互连接以交换信息。容器互联需要用到容器名称，所以在启动容器时需要使用<strong>—name</strong>参数为容器自定义容器名。<br>&emsp;容器互联使用<strong><code>--link</code></strong>参数建立连接。</p>
<ul>
<li><p>创建数据库容器<br>  &emsp;使用数据库镜像创建数据库容器，将新容器命名为<code>db</code></p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="keyword">run</span> -<span class="keyword">d</span> --name <span class="keyword">db</span> docker.io/mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建web应用容器并建立连接<br>  &emsp;<strong><code>--link</code></strong>参数的格式为 <strong><code>--link name:alias</code></strong>，<code>name</code>是要连接容器的名称，<code>alias</code>是此连接的别名。</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="keyword">run</span> -<span class="keyword">d</span> -P --name web --link <span class="keyword">db</span>:web_to_db ubuntu:14.04</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Docker_网络模式"><strong>Docker 网络模式</strong></h3><p>&emsp;容器(container)有<strong>4</strong>种网络模式，可在启动容器时通过<strong><code>--net</code></strong>参数指定：<strong><code>docker run --net=network_mode</code></strong></p>
<ul>
<li><strong>host模式</strong>：<strong><code>docker run --net=host</code></strong></li>
<li><strong>container模式</strong>：<strong><code>docker run --net=container:container_name/container_id</code></strong></li>
<li><strong>bridge模式</strong>：<strong><code>docker run</code></strong>／<strong><code>docker run --net=bridge</code></strong>，bridge模式为默认模式</li>
<li><strong>none模式</strong>：<strong><code>docker run --net=none</code></strong></li>
</ul>
<h4 id="host_模式"><strong>host 模式</strong></h4><p>&emsp;host模式，在容器启动时并不会独立创建<strong>Network Namespace</strong>给容器而是和宿主机共用一个<strong>Network Namespace</strong>。简单来说就是容器并没有一个隔离的网络环境而是使用宿主机的网络环境。host模式中除了网络外其余的资源都是实现隔离的。</p>
<h4 id="container_模式"><strong>container 模式</strong></h4><p>&emsp;container模式，指定新建的容器和已存在的容器共享一个<strong>Network Namespace</strong>，新建的容器没有自身的网卡和IP而是和指定的容器共享IP和端口范围。container模式中除了网络外其余的资源也是隔离的，两个容器间的进程可通过<strong><code>lo</code></strong>设备通信。</p>
<h4 id="none_模式"><strong>none 模式</strong></h4><p>&emsp;none模式，容器拥有独立的<strong>Network Namespace</strong>但没有进行任何的网络设置，容器内只有<code>lookback</code>设备，没有网卡、IP和路由等信息。用户可根据需求进行添加和配置。</p>
<h4 id="bridge_模式"><strong>bridge 模式</strong></h4><p>&emsp;bridge模式，此模式为容器的默认模式。<br>&emsp;当Docker启动时，Docker会在宿主机上创建<strong><code>docker0</code></strong>虚拟接口，并会随机分配一个本地未被占用的私有IP地址(常见地址<code>172.17.42.1/16</code>)。<br>&emsp;当容器(container)启动时，会创建一个<strong><code>veth pair</code></strong>设备，<strong><code>veth pair</code></strong>是<strong>一对</strong>虚拟接口。从一个<code>veth</code>接口发出的数据必会直接到达此接口的<code>peer veth</code>。由于此特性，<strong><code>veth pair</code></strong>常用于连接两个网络接口，两个接口设备之间会形成虚拟链路用于完成数据的进出。Docker创建的<strong><code>veth pair</code></strong>，一端为容器(container)内的网络接口，通常是<code>eth0</code>，<code>eth0</code>的IP与<code>docker0</code>的IP属于同一网段确保通信正常；另一端则在宿主机上并被挂载到<strong><code>docker0</code></strong>设备上，通常为<strong><code>vethxxxxxxx</code></strong>。<br>&emsp;Docker网络设备关系如下图所示，<a href="http://dockerpool.com/static/books/docker_practice/advanced_network/README.html" target="_blank" rel="external">图片来源</a><br><img src="http://7xk64o.com1.z0.glb.clouddn.com/docker_network_interface.png" alt="docker_network_interface.png"></p>
<p>&emsp;启动两个容器(container)后宿主机上网络设备情况：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$&gt; ifconfig</span><br><span class="line">docker0: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet <span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>  netmask <span class="number">255.255</span><span class="number">.0</span><span class="number">.0</span>  broadcast <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">		<span class="keyword">...</span> <span class="keyword">...</span></span><br><span class="line">enp1s0: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet <span class="number">10.0</span><span class="number">.2</span><span class="number">.222</span>  netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>  broadcast <span class="number">10.0</span><span class="number">.2</span><span class="number">.255</span></span><br><span class="line">		<span class="keyword">...</span> <span class="keyword">...</span></span><br><span class="line">lo: flags=<span class="number">73</span>&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="number">65536</span></span><br><span class="line">        inet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  netmask <span class="number">255.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">		<span class="keyword">...</span> <span class="keyword">...</span></span><br><span class="line">veth273d670: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet6 fe80::d81b:1aff:fe8c:<span class="number">2850</span>  prefixlen <span class="number">64</span>  scopeid <span class="number">0x20</span>&lt;link&gt;</span><br><span class="line">		<span class="keyword">...</span> <span class="keyword">...</span></span><br><span class="line">veth490482d: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet6 fe80::f880:ebff:fe8c:e5bc  prefixlen <span class="number">64</span>  scopeid <span class="number">0x20</span>&lt;link&gt;</span><br><span class="line">		<span class="keyword">...</span> <span class="keyword">...</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;通过<strong><code>brctl show</code></strong>命令查看挂载在<code>docker0</code>上的<code>veth</code>的设备情况<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; brctl show</span><br><span class="line">bridge <span class="property">name</span>     bridge <span class="property">id</span>               STP enabled     interfaces</span><br><span class="line">docker0         <span class="number">8000.0242809</span>a1ff9       no              veth273d670</span><br><span class="line">                                                                			veth490482d</span><br></pre></td></tr></table></figure></p>
<h3 id="端口映射"><strong>端口映射</strong></h3><p>&emsp;端口映射用在<strong>bridge模式</strong></p>
<h4 id="随机端口映射"><strong>随机端口映射</strong></h4><p>&emsp;为了使外部能访问到容器(container)内，需要在宿主机和容器中做端口映射。<br>&emsp;可在启动容器(container)时使用<strong><code>-P</code></strong>参数进行端口映射，<strong><code>-P</code></strong>参数能让Docker随机映射宿主机的<code>49000~49900</code>的某个端口到容器(container)内部开放的端口。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="keyword">run</span> -<span class="keyword">d</span> -P ubuntu:14.04 python <span class="keyword">app</span>.py</span><br></pre></td></tr></table></figure></p>
<h4 id="指定端口映射"><strong>指定端口映射</strong></h4><p>&emsp;<strong><code>-p</code></strong>参数默认映射<code>TCP</code>，若想映射<code>UDP</code>则需指定<strong><code>-p 80:5225/udp</code></strong><br>&emsp;格式：<strong><code>-p hostPort:containerPort</code></strong>、<strong><code>-p ip:hostPort:containerPort</code></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker run --name nginx -it -d -<span class="tag">p</span> <span class="number">80</span>:<span class="number">5225</span> centos:nginx</span><br><span class="line">$&gt; docker ps -<span class="tag">a</span></span><br><span class="line">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                     PORTS                          NAMES</span><br><span class="line"><span class="number">5107099</span>c0d1a        centos:nginx         <span class="string">"/bin/bash"</span>              <span class="number">49</span> minutes ago      Up <span class="number">1</span> seconds               <span class="number">80</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>-&gt;<span class="number">5225</span>/tcp   nginx</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装Docker"><strong>安装Docker</strong></h2><ul>
<li>系统版本：CentOS 7 64bit</li>
<li>内核版本：3.10.0-229.el7.x86_64</li>
<li>Docker版本：docker-1.]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Elasticsearch使用小结]]></title>
    <link href="http://yoursite.com/2016/01/06/elasticsearch/"/>
    <id>http://yoursite.com/2016/01/06/elasticsearch/</id>
    <published>2016-01-06T03:33:00.000Z</published>
    <updated>2017-05-06T15:25:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Elasticsearch_集群配置"><strong>Elasticsearch 集群配置</strong></h2><p>&emsp;同一个集群中<code>cluster.name</code>相同。Elasticsearch能通过多播发现节点，具有相同<code>cluster.name</code>的Elasticsearch实例自动组成集群，但为了快速发现及避免网络拓扑变化带来的问题，一般会在主节点使用<code>discovery.zen.ping.unicast.hosts</code>指定其他节点。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$&gt; vim /usr/local/elasticsearch/config/elasticsearch<span class="class">.yml</span></span><br><span class="line"></span><br><span class="line">path<span class="class">.data</span>: /data</span><br><span class="line">path<span class="class">.logs</span>: /var/wwwlog/elasticsearch</span><br><span class="line">path<span class="class">.plugins</span>: /usr/local/elasticsearch/plugins</span><br><span class="line">network<span class="class">.host</span>: <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">http<span class="class">.port</span>: <span class="number">9200</span></span><br><span class="line">bootstrap<span class="class">.mlockall</span>: true</span><br><span class="line">indices<span class="class">.fielddata</span><span class="class">.cache</span><span class="class">.size</span>: <span class="number">75%</span></span><br><span class="line">indices<span class="class">.breaker</span><span class="class">.fielddata</span><span class="class">.limit</span>: <span class="number">85%</span></span><br><span class="line">threadpool<span class="class">.search</span><span class="class">.queue_size</span>: <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">#集群配置_主节点</span><br><span class="line">cluster<span class="class">.name</span>: elasticsearch_cluster_mogl</span><br><span class="line">node<span class="class">.name</span>: <span class="string">"master_node_10.0.6.6"</span></span><br><span class="line">node<span class="class">.master</span>: true</span><br><span class="line">node<span class="class">.data</span>: true</span><br><span class="line">discovery<span class="class">.zen</span><span class="class">.ping</span><span class="class">.multicast</span><span class="class">.enabled</span>: true</span><br><span class="line">discovery<span class="class">.zen</span><span class="class">.ping</span><span class="class">.unicast</span><span class="class">.hosts</span>: [<span class="string">"10.0.6.5"</span>, <span class="string">"10.0.1.155"</span>]</span><br><span class="line">cluster<span class="class">.routing</span><span class="class">.allocation</span><span class="class">.disk</span><span class="class">.threshold_enabled</span>: false</span><br><span class="line">cluster<span class="class">.routing</span><span class="class">.allocation</span><span class="class">.disk</span><span class="class">.watermark</span><span class="class">.low</span>: <span class="number">90%</span></span><br><span class="line">cluster<span class="class">.routing</span><span class="class">.allocation</span><span class="class">.disk</span><span class="class">.watermark</span><span class="class">.high</span>: <span class="number">95%</span></span><br></pre></td></tr></table></figure>
<h2 id="Elasticsearch启动_&amp;_停止"><strong>Elasticsearch启动 &amp; 停止</strong></h2><ul>
<li><p><strong>启动</strong></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch/bin/elasticsearch <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>停止</strong><br>  &emsp;可通过<strong><code>kill</code></strong>命令，也可通过ES的API停止。如果有集群(多于一个节点)，最好通过API停止。</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> kill &lt;<span class="constant">PID&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群通过ES的API停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭所有节点</span></span><br><span class="line"><span class="variable">$&gt;</span> curl -<span class="constant">XPOST </span>‘<span class="symbol">http:</span>/<span class="regexp">/localhost:9200/</span><span class="constant">_cluster/</span>nodes/<span class="constant">_shutdown’</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭本地节点</span></span><br><span class="line"><span class="variable">$&gt;</span> curl -<span class="constant">XPOST </span><span class="string">'http://localhost:9200/_cluster/nodes/_local/_shutdown'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>集群重启</strong><br>  &emsp;当Elasticsearch需要升级或更改配置时，需要重启Elasticsearch集群。若希望整个集群持续提供服务则需要进行<strong>Rolling restart</strong>逐个节点进行重启，但逐个重启Elasticsearch节点会造成Elasticsearch对分片的重新分配，这样会带来很大的IO和带宽压力而且由于重启的时间会异常漫长(需要重新计算分片等)。因此在使用<strong>Rolling restart</strong>前需要<strong>关闭分片自动分配机制</strong></p>
<ol>
<li><p>关闭分片自动分配机制</p>
 <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT 'http:<span class="comment">//localhost:9200/_cluster/settings' -d '&#123;</span></span><br><span class="line">	<span class="string">"transient"</span> : &#123;</span><br><span class="line">		<span class="string">"cluster.routing.allocation.enable"</span> : <span class="string">"none"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure>
</li>
<li><p>集群逐个节点进行操作：停止Elasticsearch、修改配置/升级Elasticsearch、启动Elasticsearch</p>
</li>
<li>待所有节点都配置完启动成功后，切记要重新开启分片自动分配机制 <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT 'http:<span class="comment">//localhost:9200/_cluster/settings' -d '&#123;</span></span><br><span class="line">	<span class="string">"transient"</span> : &#123;</span><br><span class="line">		<span class="string">"cluster.routing.allocation.enable"</span> : <span class="string">"all"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>集群恢复优化</strong><br>  &emsp;若集群由于特殊原因全部停止而需要重新启动时，则需要考虑节点新增时分片的频繁变动导致的问题。需要对集群恢复做优化配置，具体参考<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/important-configuration-changes.html#_recovery_settings" target="_blank" rel="external">此文档</a></p>
  <figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#每个节点添加配置(假设有10个节点)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 集群中的N个节点启动后,才允许进行恢复处理</span></span><br><span class="line">gateway.recover_after_nodes: <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 设置初始化恢复过程的超时时间,超时时间从上一个配置中配置的N个节点启动后算起</span></span><br><span class="line">gateway.recover_after_time: <span class="number">5</span>m</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## 设置这个集群中期望有多少个节点.一旦这N个节点启动(并且recover_after_nodes也符合),立即开始恢复过程(不等待recover_after_time超时)</span></span><br><span class="line">gateway.expected_nodes: <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#minimum_master_nodes: 2</span></span><br></pre></td></tr></table></figure>
<p>  以上配置表示：至少等待8个节点上线。8个节点上线后，等待5分钟，或者10个节点上线后，才进行数据恢复，这取决于哪个条件先达到。</p>
</li>
</ul>
<h2 id="修复unassigned_shards"><strong>修复unassigned shards</strong></h2><p>&emsp;&emsp;当集群中出现unassigned分片时，可尝试修复分片使得集群重新回到健康状态。<br>&emsp;&emsp;先查出节点的唯一标识<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">'http://localhost:9200/_nodes/process?pretty'</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"ssj-elk-cluster"</span>,</span><br><span class="line">  <span class="string">"nodes"</span> : &#123;</span><br><span class="line">    <span class="string">"bHimoXRrRSSob5D6txh5Ww"</span> : &#123;</span><br><span class="line">      <span class="string">"name"</span> : <span class="string">"192.168.241.66"</span>,</span><br><span class="line">      <span class="string">"transport_address"</span> : <span class="string">"10.255.2.66:9300"</span>,</span><br><span class="line">      <span class="string">"host"</span> : <span class="string">"10.255.2.66"</span>,</span><br><span class="line">      <span class="string">"ip"</span> : <span class="string">"10.255.2.66"</span>,</span><br><span class="line">      <span class="string">"version"</span> : <span class="string">"2.3.5"</span>,</span><br><span class="line">      <span class="string">"build"</span> : <span class="string">"90f439f"</span>,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;然后运行以下脚本尝试修复<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> $(curl  <span class="operator">-s</span> <span class="string">'http://localhost:9200/_cat/shards'</span> | grep UNASSIGNED | awk <span class="string">'&#123;print $1&#125;'</span> | sort | uniq); <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">for</span> shard <span class="keyword">in</span> $(curl <span class="operator">-s</span> <span class="string">'http://localhost:9200/_cat/shards'</span> | grep UNASSIGNED | grep <span class="variable">$index</span> | awk <span class="string">'&#123;print $2&#125;'</span> | sort | uniq); <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span>  <span class="variable">$index</span> <span class="variable">$shard</span></span><br><span class="line">        curl -XPOST <span class="string">'http://localhost:9200/_cluster/reroute'</span> <span class="operator">-d</span> <span class="string">'&#123;</span><br><span class="line">            "commands" : [ &#123;</span><br><span class="line">                  "allocate" : &#123;</span><br><span class="line">                      "index" : "'</span><span class="variable">$index</span><span class="string">'",</span><br><span class="line">                      "shard" : "'</span><span class="variable">$shard</span><span class="string">'",</span><br><span class="line">                      "node" : "bHimoXRrRSSob5D6txh5Ww",</span><br><span class="line">                      "allow_primary" : true</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;'</span></span><br><span class="line">        sleep <span class="number">5</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Elasticsearch_API"><strong>Elasticsearch API</strong></h2><ul>
<li><p><strong>查看集群健康度</strong></p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">http:</span><span class="comment">//localhost:9200/_cluster/health?pretty</span></span><br></pre></td></tr></table></figure>
<p>  &emsp;需要重点关注<strong>status</strong></p>
<ul>
<li>green：主分片和副本分片都可用</li>
<li>yellow：所有主分片可用，副本分片存在异常。当集群节点只有一个时，集群status为yellow，因为只有一个节点副本分片无法分配。</li>
<li>red：存在不可用的主分片。当Elasticsearch在启动时会检查主分片，有时会因为数据量较大需要较长时间。只需等所有主分片都检测加载且没问题后status会自动变化。在启动Elasticsearch时最好调用命令查看状态，关注集群启动情况。</li>
</ul>
</li>
<li><p><strong>查看所有索引大小及状态</strong><br>  &emsp;查看所有索引的大小和状态(open/close)</p>
  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">curl</span> <span class="string">'http://localhost:9200/_cat/indices?bytes=kb'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除索引</strong></p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> curl -<span class="constant">XDELETE </span><span class="string">'http://localhost:9200/logstash-2015.*'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>插入数据</strong></p>
  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; curl -XPUT 'http:<span class="comment">//localhost:9200/twitter/tweet/1' -d '&#123;</span></span><br><span class="line">	<span class="string">"user"</span> : <span class="string">"kimchy"</span>,</span><br><span class="line">	<span class="string">"post_date"</span> : <span class="string">"2009-11-15T14:12:12"</span>,</span><br><span class="line">	<span class="string">"message"</span> : <span class="string">"trying out Elastic Search"</span></span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>迁移索引</strong></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -XPOST <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9200</span>/_cluster/reroute <span class="operator">-d</span> <span class="string">'&#123;</span><br><span class="line">    "commands": [&#123;</span><br><span class="line">        "move": &#123;</span><br><span class="line">            "index": "index-name-2016.12.29",</span><br><span class="line">            "shard": 1,</span><br><span class="line">            "from_node": "10.201.3.33",</span><br><span class="line">            "to_node": "10.201.3.30"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Elasticsearch_优化配置"><strong>Elasticsearch 优化配置</strong></h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ES_MIN_MEM</span></span><br><span class="line">ES_MAX_MEM</span><br></pre></td></tr></table></figure>
<p>&emsp;修改文件<strong><code>/usr/local/elasticsearch/bin/elasticsearch.in.sh</code></strong><br>&emsp;内存在32G以内的系统中，尽可能的给大，两个值保持一致。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">indices<span class="class">.fielddata</span><span class="class">.cache</span><span class="class">.size</span>: <span class="number">75%</span></span><br><span class="line">indices<span class="class">.breaker</span><span class="class">.fielddata</span><span class="class">.limit</span>: <span class="number">85%</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>indices.fielddata.cache.size</strong><br>  设置字段缓存大小。当对字段进行排序或聚合时，会将使用到的字段都加载进内存以提高访问速度。将字段都载入内存非常消耗资源，故应确保<code>fielddata.cache</code>的大小足够大以保证结果能被缓存。ES默认缓存大小为无限大，之所以要设置缓存大小是为了防止缓存数据过大导致OOM。</li>
<li><strong>indices.breaker.fielddata.limit</strong><br>  限制字段缓存大小。设置此值为了防止查询缓存字段过大。若需要加载到内存的缓存结果大于<code>indices.fielddata.cache.size</code>且小于<code>indices.breaker.fielddata.limit</code>，ES会接受查询并缓存结果。但数据量大于<code>indices.breaker.fielddata.limit</code>ES便会拒绝查询并抛出异常。</li>
</ul>
<p>&emsp;<code>indices.breaker.fielddata.limit</code>和<code>indices.breaker.fielddata.limit</code>的关系类似于<code>soft nofile</code>和<code>hard nofile</code>。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadpool<span class="class">.search</span><span class="class">.queue_size</span>: <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>&emsp;控制待处理请求队列大小。当Kibana需要同时查询多个数据或查询数据量比较大时需要增大此值以满足需求。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.<span class="string">mlockall:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>&emsp;不让JVM写入SWAP，避免降低ES的性能</p>
<h2 id="Curator"><strong>Curator</strong></h2><p>&emsp;使用<strong>Curator</strong>对旧索引进行close/open/delete。<br>&emsp;对于旧索引使用率不高但占用大量资源，对旧索引进行close或delete有利于优化Elasticsearch集群。</p>
<ul>
<li><p><strong>安装</strong></p>
  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> elasticsearch-curator</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用</strong></p>
  <figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">curator</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">timeout</span> <span class="comment">36000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">localhost</span> <span class="comment">close</span> <span class="comment">indices</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">time</span><span class="literal">-</span><span class="comment">unit</span> <span class="comment">days</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">timestring</span> <span class="comment">'%Y</span><span class="string">.</span><span class="comment">%m</span><span class="string">.</span><span class="comment">%d'</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix</span> <span class="comment">test1</span><span class="literal">-</span></span><br><span class="line"><span class="comment">curator</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">timeout</span> <span class="comment">36000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">localhost</span> <span class="comment">close</span> <span class="comment">indices</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">older</span><span class="literal">-</span><span class="comment">than</span> <span class="comment">30</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">time</span><span class="literal">-</span><span class="comment">unit</span> <span class="comment">days</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">timestring</span> <span class="comment">'%Y</span><span class="string">.</span><span class="comment">%m</span><span class="string">.</span><span class="comment">%d'</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix</span> <span class="comment">test2_</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">curator</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">timeout</span> <span class="comment">36000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">localhost</span> <span class="comment">optimize</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">max_num_segments</span> <span class="comment">1</span> <span class="comment">indices</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">older</span><span class="literal">-</span><span class="comment">than</span> <span class="comment">1</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">newer</span><span class="literal">-</span><span class="comment">than</span> <span class="comment">7</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">time</span><span class="literal">-</span><span class="comment">unit</span> <span class="comment">days</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">timestring</span> <span class="comment">'%Y</span><span class="string">.</span><span class="comment">%m</span><span class="string">.</span><span class="comment">%d'</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>&emsp;关闭前缀为<code>test1-</code>的所有索引<br>&emsp;关闭前缀为<code>test2_</code>且旧于<code>30</code>天的索引</p>
<h2 id="Elasticdump"><strong>Elasticdump</strong></h2><p>&emsp;Elasticdump用来对Elasticsearch中的数据进行迁移备份等操作。</p>
<ul>
<li><p><strong>安装NodeJS</strong><br>  &emsp;Elasticdump是用NodeJS写的，所以依赖NodeJS环境，需要安装NodeJS。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl --silent --location https://rpm.nodesource.com/setup_4.x | bash -</span><br><span class="line">yum install -y gcc-c++ make nodejs</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> NODE_PATH=/usr/lib/node_modules</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装Elasticdump</strong></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install elasticdump@<span class="number">2.1</span>.<span class="number">0</span> -g</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用</strong></p>
<ul>
<li><p>备份<br>  &emsp;备份成文件并压缩</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticdump --input=http://localhost:<span class="number">9200</span>/ --output=$ | gzip &gt; /data/elasticsearch_json.gz</span><br></pre></td></tr></table></figure>
</li>
<li><p>导出数据<br>  &emsp;Elasticsearch导出需要分成<code>mapping</code>和<code>data</code>两部分。</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticdump --input=http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9200</span>/.kibana --output=/kibana_mapping.json --type=mapping</span><br><span class="line">elasticdump --input=http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9200</span>/.kibana --output=/kibana_data.json --type=data</span><br></pre></td></tr></table></figure>
</li>
<li><p>导入数据</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">elasticdump --input=kibana_mapping.json --output=http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9200</span>/.kibana --type=mapping</span><br><span class="line">elasticdump --input=kibana_data.json --output=http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">9200</span>/.kibana --type=data</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于ssl证书<br>  当需要通过https访问Elasticsearch时，若SSL证书是自制的则会警告并失败。这个由于NodeJS对自制SSL证书的设置，可设置忽略该告警</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> NODE_TLS_REJECT_UNAUTHORIZED=<span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Elasticsearch_集群配置"><strong>Elasticsearch 集群配置</strong></h2><p>&emsp;同一个集群中<code>cluster.name</code>相同。Elasticsearch能通过多播发现节点，具有相同<c]]>
    </summary>
    
      <category term="EFK/ELK" scheme="http://yoursite.com/tags/EFK-ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ElastAlert]]></title>
    <link href="http://yoursite.com/2016/01/03/elastalert/"/>
    <id>http://yoursite.com/2016/01/03/elastalert/</id>
    <published>2016-01-03T14:24:37.000Z</published>
    <updated>2016-02-29T15:07:06.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;使用EFK(Elasticsearch、Fluentd、Kibana)对日志进行收集分析可视化后，希望通过分析日志能从中发现异常并报警。Elasticsearch有提供此功能的产品<a href="https://www.elastic.co/products/watcher" target="_blank" rel="external">Watcher</a>，但需要收费。开源的方案中有<a href="https://github.com/Yelp/elastalert" target="_blank" rel="external">ElastAlert</a>，于是花了点时间实验。经过一段时间使用后，感觉效果并不太好(或许是自己还没有玩透吧)，功能挺全面但配置较麻烦而且误报不少(可能我配置参数没调好吧)，关键是具参考价值高的资料不多(<a href="https://elastalert.readthedocs.org/en/latest/" target="_blank" rel="external">官方文档</a>、<a href="http://engineeringblog.yelp.com/2015/10/elastalert-alerting-at-scale-with-elasticsearch.html" target="_blank" rel="external">开发团队博客</a>)。不过既然试用了，还是简单记录一下备忘。</p>
<h2 id="安装"><strong>安装</strong></h2><p>&emsp;详细的最新文档参考<a href="https://elastalert.readthedocs.org/en/latest/index.html" target="_blank" rel="external">Elastalert官方文档</a></p>
<h4 id="环境依赖"><strong>环境依赖</strong></h4><ul>
<li>pip</li>
<li>Elasticsearch 1.*</li>
<li>ISO8601 timestamped data</li>
<li>Python 2.6</li>
</ul>
<h4 id="安装Elastalert"><strong>安装Elastalert</strong></h4><p>&emsp;CentOS 6默认安装的<code>setuptools</code>版本为<code>0.16</code>，但mock需要<code>0.17</code>以上版本，所以需要升级<code>setuptools</code><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install libyaml-devel <span class="keyword">python</span>-devel <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-pip</span><br><span class="line">pip install --upgrade setuptools==<span class="number">17.1</span>.<span class="number">1</span></span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Yelp/elastalert.git</span><br><span class="line"><span class="keyword">cd</span> elastalert</span><br><span class="line">pip install -<span class="keyword">r</span> requirements.txt</span><br><span class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> install</span><br></pre></td></tr></table></figure></p>
<h2 id="配置"><strong>配置</strong></h2><h3 id="配置Elasticsearch"><strong>配置Elasticsearch</strong></h3><p>&emsp;ElastAlert可将自身信息及数据等存入Elasticsearch方便审计和debug，此为可选项但作者强烈推荐使用。使用<code>elastalert-create-index</code>创建相关内容。<br>&emsp;默认index的名称为<code>elastalert_status</code>，若自定义后在ElastAlert的配置文件需要做相关修改，<code>config.yaml</code>——<code>writeback_index</code><br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; elastalert-<span class="keyword">create</span>-<span class="keyword">index</span></span><br><span class="line"><span class="keyword">New</span> <span class="keyword">index</span> name (<span class="keyword">Default</span> elastalert_status)</span><br><span class="line">Name <span class="keyword">of</span> existing <span class="keyword">index</span> <span class="keyword">to</span> <span class="keyword">copy</span> (<span class="keyword">Default</span> None)</span><br><span class="line"><span class="keyword">New</span> <span class="keyword">index</span> elastalert_status created</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure></p>
<h3 id="ElastAlert主配置文件"><strong>ElastAlert主配置文件</strong></h3><p>&emsp;拷贝模板配置文件后按照自己情况修改<code>cp config.yaml.example config.yaml</code><br>&emsp;常用配置详解<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rules_folder</span>: you_rules_folder_name</span><br><span class="line"><span class="attribute">run_every</span>:</span><br><span class="line">  <span class="attribute">minutes</span>: <span class="number">5</span></span><br><span class="line"><span class="attribute">buffer_time</span>:</span><br><span class="line">  <span class="attribute">minutes</span>: <span class="number">6</span></span><br><span class="line"><span class="attribute">es_host</span>: localhost</span><br><span class="line"><span class="attribute">es_port</span>: <span class="number">9200</span></span><br><span class="line"><span class="attribute">writeback_index</span>: elastalert_status</span><br><span class="line"><span class="attribute">alert_time_limit</span>:</span><br><span class="line">  <span class="attribute">days</span>: <span class="number">1</span></span><br><span class="line"><span class="attribute">max_query_size</span>: <span class="number">20000</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>rules_folder</strong>：存放规则的目录，默认为<code>example_rules</code>。ElastAlert会自动加载该目录下所有的<code>yaml</code>规则文件。</li>
<li><strong>run_every</strong>：每隔多少时间查询Elasticsearch。默认5分钟。<br>  ElastAlert的时间可选项<ul>
<li>weeks</li>
<li>days</li>
<li>hours</li>
<li>minutes</li>
<li>seconds</li>
</ul>
</li>
<li><strong>buffer_time</strong>：设置查询的时间范围。默认45分钟。</li>
<li><strong>es_host</strong>/<strong>es_port</strong>: Elasticsearch</li>
<li><strong>writeback_index</strong>：ElastAlert将查询相关信息存到Elasticsearch的index名称。通过<code>elastalert-create-index</code>命令创建</li>
<li><strong>alert_time_limit</strong>：ElastAlert查询的有效范围时间。默认查询2天。</li>
<li><strong>max_query_size</strong>：ElastAlert最大查询数据量。默认<code>10000</code>。此选项需要稍微注意一下，若项目访问量很大，在<strong>buffer_time</strong>内数据量超过<code>10000</code>则需调整<strong>buffer_time</strong>或<strong>max_query_size</strong>，否则会因为查询量超过<code>10000</code>导致某些时间段无数据而频繁发生误报。</li>
</ul>
<h3 id="ElastAlert监控规则"><strong>ElastAlert监控规则</strong></h3><p>&emsp;ElastAlert的规则都是以<code>yaml</code>文件格式存储在<strong><code>rules_folder</code></strong>目录下。ElastAlert会加载<strong><code>rules_folder</code></strong>目录下所有的规则文件，并监控文件变化。当规则文件发生变动时会自动加载规则。<br>&emsp;ElastAlert默认有多种规则，每种规则都有其各自的配置项。详细内容查看<a href="https://elastalert.readthedocs.org/en/latest/ruletypes.html#ruletypes" target="_blank" rel="external">ElastAlert官方规则文档</a><br>&emsp;默认规则类型有：</p>
<ul>
<li><strong>any</strong>：一旦匹配就触发报警</li>
<li><strong>blacklist</strong>：<code>compare_key</code>里的内容在<code>blacklist</code>上则触发报警</li>
<li><strong>whitelist</strong>：<code>compare_key</code>里的内容不在<code>blacklist</code>上则触发报警</li>
<li><strong>change</strong>：相同<code>query_key</code>，<code>compare_key</code>里的内容，在<code>timeframe</code>范围内有变化则触发报警</li>
<li><strong>frequency</strong>：在满足<code>filter</code>的条件下，<code>timeframe</code>时间内有<code>num_events</code>个记录则触发报警</li>
<li><strong>spike</strong>：在<code>filter</code>条件下，两个<code>timeframe</code>范围内数据量相差比超过<code>spike_height</code>则触发报警。<code>spike_type</code>设置具体涨跌方向是<code>up</code>/<code>down</code>/<code>both</code>。<code>threshold_ref</code>、<code>threshold_cur</code>可设置上下限。</li>
<li><strong>flatline</strong>：<code>timeframe</code>时间范围内，数据量小于<code>threshold</code>则触发报警</li>
<li><strong>new term</strong>：<code>terms_window_size</code>时间范围内最多出现<code>terms_size</code>个新的<code>fields</code>，多于则触发报警</li>
<li><strong>cardinality</strong>：在<code>filter</code>条件下，<code>timeframe</code>时间范围内<strong>不重复</strong>的<code>cardinality_field</code>值超过<code>max_cardinality</code>或者低于<code>min_cardinality</code>则触发报警</li>
</ul>
<p>&emsp;<strong>ElastAlert的规则中的<code>name</code>必须唯一，ElastAlert启动时会检查所有规则中的<code>name</code>字段，若发现不唯一则报错无法启动。</strong></p>
<h3 id="ElastAlert报警"><strong>ElastAlert报警</strong></h3><p>&emsp;ElastAlert提供多种报警方式，详见<a href="https://elastalert.readthedocs.org/en/latest/ruletypes.html#alerts" target="_blank" rel="external">ElastAlert报警方式官方文档</a>。此处主要介绍<strong><code>Email</code></strong><br>&emsp;<strong><code>Email</code></strong>方式使用<strong>SMTP</strong>协议，只要在<strong>规则文件</strong>中添加<code>SMTP</code>相关内容即可<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">smtp_host</span>: <span class="string">SMTP_HOST</span></span><br><span class="line"><span class="attribute">smtp_port</span>: <span class="string">SMTP_PORT</span></span><br><span class="line"><span class="attribute">smtp_auth_file</span>: <span class="string">/path/to/smtp_auth.txt</span></span><br><span class="line"><span class="attribute">from_addr</span>: <span class="string">email_from_address</span></span><br><span class="line"><span class="attribute">email_reply_to</span>: <span class="string">ElastAlert</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong><code>smtp_auth_file</code></strong>是以<code>yaml</code>格式记录用户和密码(注意<code>:</code>后有空格)<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>: <span class="string">username</span></span><br><span class="line"><span class="attribute">password</span>: <span class="string">password</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;Email报警例子<br>&emsp;邮件内容可自定义，详见<a href="https://elastalert.readthedocs.org/en/latest/ruletypes.html?highlight=alert_text_type#alert-content" target="_blank" rel="external">ElastAlert自定义邮件内容</a><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">alert:</span></span><br><span class="line">- <span class="string">"email"</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#收件人列表</span></span><br><span class="line"><span class="label">email:</span></span><br><span class="line">- <span class="string">"mogl@yourdomain.com"</span></span><br><span class="line">- <span class="string">"test@yourdomain.com"</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#Email邮件内容自定义</span></span><br><span class="line"><span class="label">alert_text:</span> <span class="string">"At &#123;0&#125;. http状态码200在1分钟内多于2000个"</span></span><br><span class="line"><span class="label">alert_text_args:</span></span><br><span class="line">- <span class="string">"@timestamp"</span></span><br><span class="line"><span class="label">alert_text_type:</span> alert_text_only</span><br></pre></td></tr></table></figure></p>
<h2 id="ElastAlert规则测试_&amp;_启动"><strong>ElastAlert规则测试 &amp; 启动</strong></h2><p>&emsp;ElastAlert提供<strong><code>elastalert-test-rule</code></strong>命令用于测试规则<br>&emsp;执行<code>elastalert-test-rule</code>命令时仅测试规则是否正确，若想真实触发报警则需加上<code>--alert</code>参数<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elastalert-test-rule /path/<span class="keyword">to</span>/your_elastalert_rules.yaml <span class="comment">--alert</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;ElastAlert在终端中启动<br>&emsp;自动加载所有规则。<code>--verbose</code>观察详细过程，若使用<code>--debug</code>参数不会触发alert<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> -<span class="keyword">m</span> elastalert.elastalert --<span class="keyword">verbose</span> --config /path/<span class="keyword">to</span>/config.yaml</span><br></pre></td></tr></table></figure></p>
<p>&emsp;仅测试具体规则</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m elastalert<span class="class">.elastalert</span> --verbose --config /path/to/config<span class="class">.yaml</span> --rule /path/to/your_elastalert_rule.yaml</span><br></pre></td></tr></table></figure>
<p>&emsp;ElastAlert启动时默认的起始检查时间为<code>present</code>，ElastAlert允许修改起始检测时间<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m elastalert.elastalert --verbose --config /<span class="built_in">path</span>/to/config.yaml --<span class="built_in">start</span> `<span class="built_in">date</span> +<span class="envvar">%Y-%</span>m-<span class="envvar">%dT%</span>H:<span class="envvar">%M:%</span>S%z`</span><br></pre></td></tr></table></figure></p>
<h3 id="Supervisor管理ElastAlert"><strong>Supervisor管理ElastAlert</strong></h3><p>&emsp;ElastAlert自身并没有提供守护进程运行方式，官方建议使用<strong>Supervisor</strong>来管理ElastAlert。<br>&emsp;<strong>Supervisor</strong>配置文件<strong><code>supervisord.conf</code></strong><br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line"><span class="variable">file=</span>/var/run/elastalert_supervisor.sock</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line"><span class="variable">logfile=</span>/var/wwwlog/elastalert/supervisord.log</span><br><span class="line"><span class="variable">logfile_maxbytes=</span><span class="number">100</span>MB</span><br><span class="line"><span class="variable">logfile_backups=</span><span class="number">5</span></span><br><span class="line"><span class="variable">loglevel=</span>debug</span><br><span class="line"><span class="variable">nodaemon=</span><span class="constant">false</span></span><br><span class="line"><span class="variable">directory=</span>%(here)s</span><br><span class="line"></span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.<span class="variable">rpcinterface_factory =</span> supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line"><span class="variable">serverurl=</span>unix:///var/run/elastalert_supervisor.sock</span><br><span class="line"></span><br><span class="line">[program:elastalert]</span><br><span class="line"><span class="variable">command=</span>/usr/local/elastalert/elastalert.sh</span><br><span class="line"><span class="variable">process_name=</span>elastalert</span><br><span class="line"><span class="variable">autorestart=</span><span class="constant">true</span></span><br><span class="line"><span class="variable">startsecs=</span><span class="number">15</span></span><br><span class="line"><span class="variable">stopsignal=</span>INT</span><br><span class="line"><span class="variable">stopasgroup=</span><span class="constant">true</span></span><br><span class="line"><span class="variable">killasgroup=</span><span class="constant">true</span></span><br><span class="line"><span class="variable">stderr_logfile=</span>/var/wwwlog/elastalert/elastalert.log</span><br><span class="line"><span class="variable">stderr_logfile_maxbytes=</span><span class="number">100</span>MB</span><br><span class="line"><span class="variable">stderr_logfile_backups=</span><span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>/usr/local/elastalert/elastalert.sh</code>启动脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">/usr/bin/python /usr/<span class="built_in">local</span>/elastalert/elastalert/elastalert.py --verbose --config /usr/<span class="built_in">local</span>/elastalert/config.yaml --start $(date +%Y-%m-%dT%H:%M:%S%z)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; chmod a+x <span class="regexp">/usr/</span>local<span class="regexp">/elastalert/</span>elastalert.sh</span><br></pre></td></tr></table></figure>
<p>&emsp;启动Supervisor<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行supervisord</span></span><br><span class="line">supervisord -c /usr/<span class="built_in">local</span>/elastalert/supervisord.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line">supervisorctl -c /usr/<span class="built_in">local</span>/elastalert/supervisord.conf update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制所有进程</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elastalert</span><br><span class="line">supervisorctl start all</span><br><span class="line">supervisorctl stop all</span><br><span class="line">supervisorctl restart all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制目标进程</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elastalert</span><br><span class="line">supervisorctl stop elastalert</span><br><span class="line">supervisorctl start elastalert</span><br><span class="line">supervisorctl restart elastalert</span><br></pre></td></tr></table></figure></p>
<h2 id="ElastAlert规则配置实例"><strong>ElastAlert规则配置实例</strong></h2><h4 id="frequency"><strong>frequency</strong></h4><p>&emsp;<code>code</code>是<code>field</code>，根据存入Elasticsearch的字段而定，此处的日志中http code定义<code>code</code>(日志由fluentd收集)<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">es_host:</span> localhost</span><br><span class="line"><span class="string">es_port:</span> <span class="number">9200</span></span><br><span class="line"><span class="string">smtp_host:</span> YOUR_SMTP_HOST</span><br><span class="line"><span class="string">smtp_auth_file:</span> <span class="regexp">/path/</span>to/smtp_auth.txt</span><br><span class="line"><span class="string">from_addr:</span> ElastAlert<span class="annotation">@yourdomain</span>.com</span><br><span class="line"><span class="string">email_reply_to:</span> ElastAlert</span><br><span class="line"><span class="string">name:</span> project_code_frequency</span><br><span class="line"><span class="string">type:</span> frequency</span><br><span class="line"><span class="string">index:</span> project*</span><br><span class="line"><span class="string">num_events:</span> <span class="number">180</span></span><br><span class="line"><span class="string">timeframe:</span></span><br><span class="line"><span class="label">  minutes:</span> <span class="number">1</span></span><br><span class="line"><span class="string">filter:</span></span><br><span class="line">- <span class="string">range:</span></span><br><span class="line"><span class="label">	code:</span></span><br><span class="line"><span class="label">	  from:</span> <span class="number">400</span></span><br><span class="line"><span class="label">	  to:</span> <span class="number">599</span></span><br><span class="line"><span class="string">alert:</span></span><br><span class="line">- <span class="string">"email"</span></span><br><span class="line"><span class="string">email:</span></span><br><span class="line">- <span class="string">"mogl@yourdomain.com"</span></span><br><span class="line"><span class="string">alert_text:</span> <span class="string">"At &#123;0&#125;. http异常状态码4XX-5XX在1分钟内多于180"</span></span><br><span class="line"><span class="string">alert_text_args:</span></span><br><span class="line">- <span class="string">"@timestamp"</span></span><br><span class="line"><span class="string">alert_text_type:</span> alert_text_only</span><br><span class="line"><span class="string">use_local_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h4 id="cardinality"><strong>cardinality</strong></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">es_host:</span> localhost</span><br><span class="line"><span class="string">es_port:</span> <span class="number">9200</span></span><br><span class="line"><span class="string">index:</span> project*</span><br><span class="line"><span class="string">smtp_host:</span> YOUR_SMTP_HOST</span><br><span class="line"><span class="string">smtp_auth_file:</span> <span class="regexp">/path/</span>to/smtp_auth.txt</span><br><span class="line"><span class="string">from_addr:</span> ElastAlert<span class="annotation">@yourdomain</span>.com</span><br><span class="line"><span class="string">email_reply_to:</span> ElastAlert</span><br><span class="line"><span class="string">name:</span> project_ip_cardinality</span><br><span class="line"><span class="string">type:</span> cardinality</span><br><span class="line"><span class="string">cardinality_field:</span> <span class="string">"ip"</span></span><br><span class="line"><span class="string">max_cardinality:</span> <span class="number">2000</span></span><br><span class="line"><span class="string">timeframe:</span></span><br><span class="line"><span class="label">  minutes:</span> <span class="number">1</span></span><br><span class="line"><span class="string">filter:</span></span><br><span class="line">- <span class="string">term:</span></span><br><span class="line"><span class="label">	code:</span> <span class="number">200</span></span><br><span class="line"><span class="string">alert:</span></span><br><span class="line">- <span class="string">"email"</span></span><br><span class="line"><span class="string">email:</span></span><br><span class="line">- <span class="string">"mogl@yourdomain.com"</span></span><br><span class="line"><span class="string">alert_text:</span> <span class="string">"At &#123;0&#125;. 独立IP在1分钟内多于2000个"</span></span><br><span class="line"><span class="string">alert_text_args:</span></span><br><span class="line">- <span class="string">"@timestamp"</span></span><br><span class="line"><span class="string">alert_text_type:</span> alert_text_only</span><br><span class="line"><span class="string">use_local_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="flatline"><strong>flatline</strong></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">es_host:</span> localhost</span><br><span class="line"><span class="string">es_port:</span> <span class="number">9200</span></span><br><span class="line"><span class="string">smtp_host:</span> YOUR_SMTP_HOST</span><br><span class="line"><span class="string">smtp_auth_file:</span> <span class="regexp">/path/</span>to/smtp_auth.txt</span><br><span class="line"><span class="string">from_addr:</span> ElastAlert<span class="annotation">@yourdomain</span>.com</span><br><span class="line"><span class="string">email_reply_to:</span> ElastAlert</span><br><span class="line"><span class="string">name:</span> project_pv_flatline</span><br><span class="line"><span class="string">type:</span> flatline</span><br><span class="line"><span class="string">index:</span> project*</span><br><span class="line"><span class="string">threshold:</span> <span class="number">500</span></span><br><span class="line"><span class="string">timeframe:</span></span><br><span class="line"><span class="label">  minutes:</span> <span class="number">1</span></span><br><span class="line"><span class="string">alert:</span></span><br><span class="line">- <span class="string">"email"</span></span><br><span class="line"><span class="string">email:</span></span><br><span class="line">- <span class="string">"mogl@yourdomain.com"</span></span><br><span class="line"><span class="string">alert_text:</span> <span class="string">"At &#123;0&#125;. PV在1分钟内少于500"</span></span><br><span class="line"><span class="string">alert_text_args:</span></span><br><span class="line">- <span class="string">"@timestamp"</span></span><br><span class="line"><span class="string">alert_text_type:</span> alert_text_only</span><br><span class="line"><span class="string">use_local_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;使用EFK(Elasticsearch、Fluentd、Kibana)对日志进行收集分析可视化后，希望通过分析日志能从中发现异常并报警。Elasticsearch有提供此功能的产品<a href="https://www.elastic.co/products/]]>
    </summary>
    
      <category term="EFK/ELK" scheme="http://yoursite.com/tags/EFK-ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EFK自动化实践记录]]></title>
    <link href="http://yoursite.com/2015/12/29/auto-EFK/"/>
    <id>http://yoursite.com/2015/12/29/auto-EFK/</id>
    <published>2015-12-29T02:27:22.000Z</published>
    <updated>2016-02-29T07:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;自从使用EFK(Elasticsearch/Fluentd/Kibana)日志系统对各项目的日志进行采集、分析及可视化展示后，逐渐发现添加配置是件繁琐的事情。于是构想对从添加配置到可视化过程中可自动化的部分，初步针对以下方面进行自动化减轻工作负担，让日志的采集、分析和可视化更轻松方便：</p>
<ol>
<li>自动添加Fluentd配置<br> &emsp;日志需要采集则需要在日志生成端对Fluentd进行配置，并且汇聚端同样需要添加相关的Fluentd配置。手动添加既繁琐又容易出错，所以这部分需要交由程序完成。</li>
<li>自动添加Kibana图表<br> &emsp;Fluentd采集日志存入Elasticsearch后，要在Kibana上可视化则需要添加各种图表，添加完图表后还需要添加Dashboard将图表统一添加进Dashboard方便查看。这个过程只是添加一个项目就已经比较繁琐，若需要同时添加多个项目则需要浪费很多时间进行添加图表及Dashboard。这部分是必须自动完成的，手动操作过于耗时耗力。</li>
</ol>
<p>&emsp;针对以上两点，主要通过<code>Shell</code>及<code>Python</code>程序完成自动添加Fluentd配置和Kibana图表的工作，简要流程如下：</p>
<ul>
<li>在Fluentd汇聚端使用<code>Flask</code>Python框架写接口，负责接收传递过来的参数并调用<code>Shell</code>脚本添加Fluentd汇聚端配置及添加Kibana图表。</li>
<li>在日志生成端利用<code>Shell</code>脚本获取输入参数，将参数组合成<code>JSON</code>格式并<code>POST</code>提交给<code>Flask</code>接口。</li>
</ul>
<h3 id="自动添加Fluentd配置"><strong>自动添加Fluentd配置</strong></h3><ul>
<li>日志生成端获取配置Fluentd的<strong><code>tag</code></strong>，组合成<code>JSON</code>格式后<code>POST</code>提交到<code>Python</code>接口</li>
<li><code>Python</code>接口接收<strong><code>tag</code></strong>，调用本地脚本添加汇聚端Fluentd配置。检查Fluentd配置是否正确、重新加载配置文件、返回结果<code>code</code>给客户端脚本</li>
<li>判断服务端返回结果<code>code</code>，成功则添加客户端Fluentd配置</li>
</ul>
<p>客户端脚本部分代码：</p>
<p>&emsp;因为Elasticsearch的<strong>Indices名不能存在大写字母</strong>，所以统一所有<strong>tag</strong>的字母均为小写字母<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入tag(字母必须小写且不包含空格): "</span> FLUENTD_TAG_TMP</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入日志路径: "</span> LOG_PATH</span><br><span class="line"></span><br><span class="line">FLUENTD_TAG=<span class="string">"`echo <span class="variable">$FLUENTD_TAG_TMP</span>|awk '&#123;gsub(/ +/,"</span>_<span class="string">",<span class="variable">$0</span>);print tolower(<span class="variable">$0</span>)&#125;'`"</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;调用<code>Python</code>接口，<code>POST</code>请求接口将数据以<code>JSON</code>格式提交，添加服务端Fluentd配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"调用服务端接口添加配置文件......"</span></span><br><span class="line">FLUENTD_RESULT=<span class="string">"`curl -s -X POST -H "</span>Content-Type: application/json<span class="string">" -d '&#123;"</span>auth_key<span class="string">":"</span><span class="string">'$AUTH_KEY'</span><span class="string">", "</span>fluentd_tag<span class="string">":"</span><span class="string">'$FLUENTD_TAG'</span><span class="string">", "</span>action_<span class="built_in">type</span><span class="string">":0&#125;' <span class="variable">$POST_URL</span>`"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$FLUENTD_RESULT</span>"</span> <span class="keyword">in</span></span><br><span class="line">	<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31m服务端添加配置成功\033[0m"</span></span><br><span class="line">		AddFluentdConfig</span><br><span class="line">		ReloadFluentd</span><br><span class="line">		CallKibanaAPI</span><br><span class="line">		;;</span><br><span class="line">	<span class="number">1</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31m认证失败\033[0m"</span></span><br><span class="line">		<span class="built_in">exit</span> <span class="number">6</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="number">2</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31m服务端配置文件已存在\033[0m"</span></span><br><span class="line">		<span class="built_in">read</span> -p <span class="string">"是否继续添加客户端配置(y/n): "</span> FLAG</span><br><span class="line">		<span class="keyword">if</span> [[ <span class="variable">$FLAG</span> == <span class="string">'y'</span> ]]; <span class="keyword">then</span></span><br><span class="line">			AddFluentdConfig</span><br><span class="line">			ReloadFluentd</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">exit</span> <span class="number">7</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="number">3</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31m服务端配置文件发现错误，请手动检查服务端配置\033[0m"</span></span><br><span class="line">		<span class="built_in">exit</span> <span class="number">8</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="number">4</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31mPOST参数错误\033[0m"</span></span><br><span class="line">		<span class="built_in">exit</span> <span class="number">9</span></span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31mError: <span class="variable">$FLUENTD_RESULT</span>.\033[0m"</span></span><br><span class="line">		<span class="built_in">exit</span> <span class="number">10</span></span><br><span class="line">		;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>Python</code>接口接收参数，调用本地脚本添加服务端Fluentd配置<br>&emsp;<code>Python</code>接口使用<code>Flask</code>轻量框架，以守护进程方式运行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoEFKDaemon</span><span class="params">(Daemon)</span>:</span></span><br><span class="line">    <span class="string">"""自动添加Fluentd/Kibana配置"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""overwrite class Daemon's function run()"""</span></span><br><span class="line">        app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">        <span class="decorator">@app.route('/autoEFK', methods=['POST'])</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">autoAddEFKConfig</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="string">"""添加Fluentd配置 &amp; 调用Elasticsearch接口使Kibana画图"""</span></span><br><span class="line">            <span class="comment">#接收POST参数。action_type=0 添加Fluentd；action_type=1 Kibana绘图</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                auth_key = request.json[<span class="string">'auth_key'</span>]</span><br><span class="line">                fluentd_tag = request.json[<span class="string">'fluentd_tag'</span>]</span><br><span class="line">                action_type = int(request.json[<span class="string">'action_type'</span>])</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">return</span> str(<span class="number">4</span>)</span><br><span class="line">            fluentd_bash_script = os.path.join(sys.path[<span class="number">0</span>], <span class="string">'script/autoAddFluentd.sh'</span>)</span><br><span class="line">            kibana_bash_script = os.path.join(sys.path[<span class="number">0</span>], <span class="string">'script/autoAddKibana.sh'</span>)</span><br><span class="line">            <span class="comment">#简单验证</span></span><br><span class="line">            <span class="keyword">if</span> auth_key != <span class="string">'HVlbnRkCg=='</span>:</span><br><span class="line">                <span class="keyword">return</span> str(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">#调用Fluentd shell脚本</span></span><br><span class="line">            <span class="keyword">if</span> action_type == <span class="number">0</span>:</span><br><span class="line">                shellReslulCode = subprocess.call([<span class="string">'bash'</span>, fluentd_bash_script, fluentd_tag])</span><br><span class="line">                <span class="keyword">return</span> str(shellReslulCode)</span><br><span class="line">            <span class="keyword">elif</span> action_type == <span class="number">1</span>:</span><br><span class="line">                shellReslulCode = subprocess.call([<span class="string">'bash'</span>, kibana_bash_script, fluentd_tag])</span><br><span class="line">                <span class="keyword">return</span> str(shellReslulCode)</span><br><span class="line"></span><br><span class="line">        app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">23333</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="Kibana自动绘图"><strong>Kibana自动绘图</strong></h3><p>&emsp;Kibana自身并不提供API，所以想要通过程序使得Kibana自动绘图则需要通过调用Elasticsearch的API。因为Kibana使用Elasticsearch的index来存储<code>Visualizations</code>和<code>Dashboard</code>等信息，在Kibana的配置文件中有相关配置。该index目录在Elasticsearch的indices目录下，默认的目录名称为<strong><code>.kibana</code></strong>。</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$&gt; vim /usr/local/kibana/config/kibana.yml</span><br><span class="line"></span><br><span class="line"># Kibana <span class="keyword">uses</span> an <span class="keyword">index</span> <span class="keyword">in</span> Elasticsearch <span class="keyword">to</span> store saved searches, visualizations</span><br><span class="line"># <span class="keyword">and</span> dashboards. It will <span class="keyword">create</span> a <span class="keyword">new</span> <span class="keyword">index</span> <span class="keyword">if</span> it doesn<span class="string">'t already exist.</span><br><span class="line">kibana_index: ".kibana"</span><br><span class="line"></span><br><span class="line">$&gt; ls -ltha /data/elasticsearch/nodes/0/indices/</span><br><span class="line">drwxr-xr-x.  8 root root 4.0K 11月 27 09:12 logstash-2015.11.27</span><br><span class="line">drwxr-xr-x.  8 root root 4.0K 11月 26 09:00 logstash-2015.11.26</span><br><span class="line">drwxr-xr-x.  4 root root 4.0K 11月 23 10:42 .kibana</span></span><br></pre></td></tr></table></figure>
<p>&emsp;可以通过Elasticsearch的API查看及创建Kibana相关数据。有关Kibana最重要的数据有：<strong><code>index-pattern</code></strong>、<strong><code>visualization</code></strong>和<strong><code>dashboard</code></strong>。通过curl可直接查看相关数据<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#查看所有不同类型的数据</span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/_search?type=index-pattern&amp;pretty'</span></span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/_search?type=visualization&amp;pretty'</span></span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/_search?type=dashboard&amp;pretty'</span></span><br><span class="line"></span><br><span class="line">#查看具体类型下具体实例的数据</span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/index-pattern/your_index-pattern_name?pretty'</span></span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/visualization/your_visualization_name?pretty'</span></span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/dashboard/your_dashboard_name?pretty'</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;查看名为<strong><code>logstash-*</code></strong>的<strong>index-pattern</strong>数据<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$&gt; curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/index-pattern/logstash-*?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">".kibana"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"index-pattern"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"logstash-*"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : <span class="number">15</span>,</span><br><span class="line">  <span class="string">"found"</span> : true,</span><br><span class="line">  <span class="string">"_source"</span>:&#123;<span class="string">"title"</span>:<span class="string">"logstash-*"</span>,<span class="string">"timeFieldName"</span>:<span class="string">"@timestamp"</span>,<span class="string">"fields"</span>:<span class="string">"[&#123;\"</span>name\<span class="string">":\"</span>_index\<span class="string">",\"</span>type\<span class="string">":\"</span>string\<span class="string">",\"</span>count\<span class="string">":0,\"</span>scripted\<span class="string">":false,\"</span>indexed\<span class="string">":false,\"</span>analyzed\<span class="string">":false,\"</span>doc_values\<span class="string">":false&#125;,......&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;假如请求一个并不存在的index-pattern，则会返回如下信息<strong><code>&quot;found&quot; : false</code></strong>，可用于判断数据是否已存在于Kibana中。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$&gt; curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/index-pattern/test*?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">".kibana"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"index-pattern"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"test*"</span>,</span><br><span class="line">  <span class="string">"found"</span> : <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;获得数据格式后便可构造数据，通过程序创建Kibana相关数据。比如需要创建<code>index-pattern</code>数据结构和<strong><code>logstash-*</code></strong> <strong>相同</strong>的新index-pattern，新index-pattern的名称为<code>test*</code>，只需要将<strong>_source</strong>的内容做适当修改并提交给Elasticsearch便可：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; curl -<span class="type">XPUT</span> 'http://localhost:<span class="number">9200</span>/.kibana/index-pattern/test-*?pretty' -d '&#123;<span class="string">"title"</span>:<span class="string">"test-*"</span>,<span class="string">"timeFieldName"</span>:<span class="string">"@timestamp"</span>,<span class="string">"fields"</span>:<span class="string">"[&#123;\"name\":\"_index\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false&#125;,......&#125;'</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;创建<code>visualization</code>和<code>dashboard</code>方法相同。<code>index-pattern</code>、<code>visualization</code>和<code>dashboard</code>之间相互依赖，注意修改数据中相关联的部分即可。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">index</span>-pattern————&gt;visualization————&gt;dashboard</span><br></pre></td></tr></table></figure></p>
<h2 id="改进"><strong>改进</strong></h2><p>&emsp;目前初步实现利用脚本程序完成日志的采集、分析和可视化流程，但仍有可改进的地方。</p>
<ol>
<li>利用SaltStack进行统一的配置管理。若项目增多需要管理的配置文件便会增加，为方便统一管理配置文件需要使用额外的工具进行管理。</li>
<li>操作的Web界面化。目前只实现运行脚本添加配置，为更进一步方便添加、管理配置，可开发拥有Web界面操作及结合SaltStack的管理系统。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;自从使用EFK(Elasticsearch/Fluentd/Kibana)日志系统对各项目的日志进行采集、分析及可视化展示后，逐渐发现添加配置是件繁琐的事情。于是构想对从添加配置到可视化过程中可自动化的部分，初步针对以下方面进行自动化减轻工作负担，让日志的采集、]]>
    </summary>
    
      <category term="EFK/ELK" scheme="http://yoursite.com/tags/EFK-ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EFK日志系统——Fluentd代替Logstash & GeoIP世界地图]]></title>
    <link href="http://yoursite.com/2015/12/28/EFK/"/>
    <id>http://yoursite.com/2015/12/28/EFK/</id>
    <published>2015-12-28T13:08:38.000Z</published>
    <updated>2016-03-08T13:37:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装"><strong>安装</strong></h2><ul>
<li>Elasticsearch、Kibana详见<a href="https://moguol.github.io/2015/12/21/ELK/" target="_blank" rel="external">Elasticsearch、Kibana安装</a></li>
<li>Fluentd详见<a href="https://moguol.github.io/2015/12/20/fluentd/" target="_blank" rel="external">Fluentd安装</a></li>
<li><p>Fluentd插件</p>
<ul>
<li><p>fluent-plugin-secure_forward、fluent-plugin-elasticsearch<br>  secure_forward插件可选，也可用内置的forward插件</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; td-agent-gem install fluent-<span class="keyword">plugin</span>-secure-forward fluent-<span class="keyword">plugin</span>-elasticsearch</span><br></pre></td></tr></table></figure>
</li>
<li><p>fluent-plugin-geoip<br>  此插件也可选，如果不需要统计IP位置，Kibana不需要地图可忽略。</p>
  <figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#若没安装EPEL，则需事先安装</span></span><br><span class="line"><span class="preprocessor">#$&gt; rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span></span><br><span class="line"><span class="preprocessor">#$&gt; rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#若安装EPEL后yum报错Error: Cannot retrieve metalink for repository: epel. Please verify its path and try again。须更新ca</span></span><br><span class="line"><span class="preprocessor">#yum --disablerepo="epel" -y update ca-certificates</span></span><br><span class="line"></span><br><span class="line">$&gt; yum install geoip-devel</span><br><span class="line">$&gt; td-agent-gem install fluent-plugin-geoip</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Fluentd配置"><strong>Fluentd配置</strong></h2><p>&emsp;如果之前对Fluentd没有了解，可先看看<a href="http://localhost:4000/2015/12/20/fluentd/" target="_blank" rel="external">此篇博客文章</a>有个大概的认识。<br>&emsp;Fluentd Collector(A)收集日志转发到Fluentd Aggregator(B)，再通过插件<code>fluent-plugin-elasticsearch</code>存入Elasticsearch<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access.<span class="function"><span class="title">log</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-tail</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-secure_forward</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-secure_forward</span><span class="params">(B)</span></span>——&gt;<span class="function"><span class="title">Fluentd-elasticsearch</span><span class="params">(B)</span></span>——&gt;Elasticsearch——&gt;Kibana</span><br></pre></td></tr></table></figure></p>
<h3 id="Fluentd_Aggregator"><strong>Fluentd Aggregator</strong></h3><p>&emsp;日志汇聚端配置<code>/etc/td-agent/td-agent.conf</code><br>&emsp;若传输需要加密，则需要先生成证书和key，详见<a href="http://localhost:4000/2015/12/20/fluentd/" target="_blank" rel="external">此博客文章</a><br>&emsp;auth验证也是可选的<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="literal">source</span>&gt;</span><br><span class="line">  <span class="built_in">type</span> secure_forward</span><br><span class="line">  port <span class="number">22222</span></span><br><span class="line">  shared_key secret_string</span><br><span class="line">  self_hostname logs_server.fluent</span><br><span class="line"></span><br><span class="line">  secure <span class="keyword">false</span></span><br><span class="line">  <span class="comment">#若传输内容需要加密则用此配置</span></span><br><span class="line">  <span class="comment">#secure true</span></span><br><span class="line">  <span class="comment">#ca_cert_path        /etc/td-agent/ca/ca_cert.pem</span></span><br><span class="line">  <span class="comment">#ca_private_key_path /etc/td-agent/ca/ca_key.pem</span></span><br><span class="line">  <span class="comment">#ca_private_key_passphrase  passphrase_for_private_CA_secret_key</span></span><br><span class="line"></span><br><span class="line">  authentication yes</span><br><span class="line">  &lt;<span class="keyword">user</span>&gt;</span><br><span class="line">    username your_usrname</span><br><span class="line">    <span class="literal">password</span> your_password</span><br><span class="line">  &lt;/<span class="keyword">user</span>&gt;</span><br><span class="line">&lt;/<span class="literal">source</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;match efk_test.**&gt;</span><br><span class="line">  <span class="built_in">type</span> elasticsearch</span><br><span class="line">  <span class="keyword">host</span> localhost</span><br><span class="line">  port <span class="number">9200</span></span><br><span class="line">  index_name fluentd</span><br><span class="line">  include_tag_key <span class="keyword">true</span></span><br><span class="line">  tag_key @log_name</span><br><span class="line">  type_name nginx</span><br><span class="line">  logstash_format <span class="keyword">true</span></span><br><span class="line">  logstash_prefix node1   	<span class="comment">#Elasticsearch存储indices的前缀(必须小写)，默认值为：logstash</span></span><br><span class="line">  utc_index <span class="keyword">false</span></span><br><span class="line">  flush_interval <span class="number">10</span>s</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="Fluentd_Collector"><strong>Fluentd Collector</strong></h3><p>&emsp;日志收集客户端配置<code>/etc/td-agent/td-agent.conf</code><br>&emsp;若传输内容需要加密，则需从汇聚端将证书拷贝到客户端<br>&emsp;auth验证可选，若汇聚端没有设置则不需要<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;source&gt;</span></span><br><span class="line">    type          tail</span><br><span class="line">    tag           efk_test</span><br><span class="line">    path          /var/wwwlog/efk_test/access.log</span><br><span class="line">    pos_file      /tmp/efk_test.fluentd.pos</span><br><span class="line">    format        /^(?<span class="variable">&lt;ip&gt;</span>[^ ]<span class="keyword">*</span>) \[(?<span class="variable">&lt;time&gt;</span>[^\]]<span class="keyword">*</span>)\] <span class="string">"(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^ ]*) +\S*)?"</span> (?<span class="variable">&lt;code&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;size&gt;</span>[^ ]<span class="keyword">*</span>) <span class="string">"(?&lt;referer&gt;[^\"]*)"</span> <span class="string">"(?&lt;agent&gt;[^\"]*)"</span> (?<span class="variable">&lt;forward&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;reqlen&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;reqtime&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;backend&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;domain&gt;</span>[^ ]<span class="keyword">*</span>)/</span><br><span class="line">    time_format   %d/%b/%Y:%H:%M:%S %z</span><br><span class="line"><span class="variable">&lt;/source&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;match efk_test.**&gt;</span></span><br><span class="line">  type secure_forward</span><br><span class="line">  shared_key secret_string</span><br><span class="line">  self_hostname node1.fluentd</span><br><span class="line"></span><br><span class="line">  secure false</span><br><span class="line">  <span class="comment">#若传输内容需要加密则用此配置</span></span><br><span class="line">  <span class="comment">#secure true</span></span><br><span class="line">  <span class="comment">#ca_cert_path        /etc/td-agent/ca/ca_cert.pem</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">&lt;server&gt;</span></span><br><span class="line">    host logs_server.fluentd</span><br><span class="line">    port 22222</span><br><span class="line">    username your_usrname</span><br><span class="line">    password your_password</span><br><span class="line">  <span class="variable">&lt;/server&gt;</span></span><br><span class="line"><span class="variable">&lt;/match&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="GeoIP"><strong>GeoIP</strong></h2><p>&emsp;通过GeoIP库查询地理位置，并通过Kibana地图展示<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access.<span class="function"><span class="title">log</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-tail</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-secure_forward</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-secure_forward</span><span class="params">(B)</span></span>——&gt;<span class="function"><span class="title">Fluentd-geoip</span><span class="params">(B)</span></span>——&gt;<span class="function"><span class="title">Fluentd-elasticsearch</span><span class="params">(B)</span></span>——&gt;Elasticsearch——&gt;Kibana</span><br></pre></td></tr></table></figure></p>
<h3 id="Elasticsearch经纬格式配置"><strong>Elasticsearch经纬格式配置</strong></h3><p>&emsp;<strong>在配置Fluentd之前必须做此步骤!</strong>否则Kibana找不到<strong><code>geo_point</code></strong>类型字段无法在世界地图上展示。<br>&emsp;<code>fluent-plugin-geoip</code>插件在存储经纬字段时使用的是<strong><code>string</code></strong>类型(Fluentd默认存入Elasticsearch的字段类型都是<strong><code>string</code></strong>)，但Kibana规定必须使用<strong><code>geo_point</code></strong>类型字段。所以在Elasticsearch存储时必须将经纬字段设置成<strong><code>geo_point</code></strong>。最简单的办法是通过Elasticsearch的模板映射来解决。</p>
<p>&emsp;添加Elasticsearch模板<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">http:</span><span class="comment">//localhost:9200/_template/geoip_type_template -d'&#123;</span></span><br><span class="line">  <span class="string">"template"</span>: <span class="string">"*"</span>,</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"geoip_nginx"</span>: &#123;</span><br><span class="line">      <span class="string">"properties"</span>: &#123;</span><br><span class="line">        <span class="string">"geoip_location"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"geo_point"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="string">'</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;添加名为<code>geoip_type_template</code>的模板，模板的应用对象为所有已存在的模板<code>*</code>，对存在<code>type_name</code>为<code>geoip_nginx</code>的数据，将字段<code>geoip_location</code>的类型设置为<code>geo_point</code><br>&emsp;若Elasticsearch生成indices，可调用Elasticsearch API查看mapping映射类型<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">localhost:</span><span class="number">9200</span><span class="regexp">/indices_name/</span>_mapping</span><br></pre></td></tr></table></figure></p>
<h3 id="Fluentd_Aggregator配置"><strong>Fluentd Aggregator配置</strong></h3><p>&emsp;<a href="https://dev.maxmind.com/geoip/legacy/geolite/" target="_blank" rel="external">免费版GeoIP库下载地址</a><br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="literal">source</span>&gt;</span><br><span class="line">  <span class="built_in">type</span> secure_forward</span><br><span class="line">  port <span class="number">22222</span></span><br><span class="line">  shared_key secret_string</span><br><span class="line">  self_hostname logs_server.fluent</span><br><span class="line"></span><br><span class="line">  secure <span class="keyword">false</span></span><br><span class="line">  <span class="comment">#若传输内容需要加密则用此配置</span></span><br><span class="line">  <span class="comment">#secure true</span></span><br><span class="line">  <span class="comment">#ca_cert_path        /etc/td-agent/ca/ca_cert.pem</span></span><br><span class="line">  <span class="comment">#ca_private_key_path /etc/td-agent/ca/ca_key.pem</span></span><br><span class="line">  <span class="comment">#ca_private_key_passphrase  passphrase_for_private_CA_secret_key</span></span><br><span class="line"></span><br><span class="line">  authentication yes</span><br><span class="line">  &lt;<span class="keyword">user</span>&gt;</span><br><span class="line">    username your_usrname</span><br><span class="line">    <span class="literal">password</span> your_password</span><br><span class="line">  &lt;/<span class="keyword">user</span>&gt;</span><br><span class="line">&lt;/<span class="literal">source</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;match geoip.**&gt;</span><br><span class="line">  <span class="built_in">type</span> geoip</span><br><span class="line">  geoip_lookup_key  <span class="literal">ip</span>   	<span class="comment">#设置ip地址所在的key值</span></span><br><span class="line">  geoip_database    <span class="string">"/etc/td-agent/geoipdb/GeoLiteCity.dat"</span> 	<span class="comment">#指定geoip库</span></span><br><span class="line"></span><br><span class="line">  &lt;record&gt;</span><br><span class="line">    country  $<span class="keyword">&#123;</span>country_code[<span class="string">'ip'</span>]<span class="keyword">&#125;</span></span><br><span class="line">    geoip_location	$<span class="keyword">&#123;</span>latitude[<span class="string">'ip'</span>]<span class="keyword">&#125;</span>,$<span class="keyword">&#123;</span>longitude[<span class="string">'ip'</span>]<span class="keyword">&#125;</span>		<span class="comment">#geo_point类型字段</span></span><br><span class="line">  &lt;/record&gt;</span><br><span class="line"></span><br><span class="line">  remove_tag_prefix    geoip.</span><br><span class="line">  <span class="literal">tag</span>   es.$<span class="keyword">&#123;</span><span class="literal">tag</span><span class="keyword">&#125;</span></span><br><span class="line"></span><br><span class="line">  skip_adding_null_record   <span class="keyword">true</span>	<span class="comment">#跳过IP库查找不到的记录。false则会在查找不到的记录中添加'&#123;country:null, geoip_location null&#125;'</span></span><br><span class="line">  log_level info</span><br><span class="line">  flush_interval   <span class="number">5</span>s</span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;match es.**&gt;</span><br><span class="line">  <span class="built_in">type</span> elasticsearch</span><br><span class="line">  <span class="keyword">host</span> localhost</span><br><span class="line">  port <span class="number">9200</span></span><br><span class="line">  index_name fluentd</span><br><span class="line">  include_tag_key <span class="keyword">true</span></span><br><span class="line">  tag_key @log_name</span><br><span class="line">  logstash_format <span class="keyword">true</span></span><br><span class="line">  type_name geoip_nginx		<span class="comment">#geoip_type_template模板根据此type_name匹配</span></span><br><span class="line">  logstash_prefix node1   	<span class="comment">#Elasticsearch存储indices的前缀(必须小写)，默认值为：logstash</span></span><br><span class="line">  utc_index <span class="keyword">false</span></span><br><span class="line">  flush_interval <span class="number">10</span>s</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="Fluentd_Collector配置"><strong>Fluentd Collector配置</strong></h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;source&gt;</span></span><br><span class="line">    type          tail</span><br><span class="line">    tag           geoip</span><br><span class="line">    path          /var/wwwlog/efk_test/access.log</span><br><span class="line">    pos_file      /tmp/efk_test.fluentd.pos</span><br><span class="line">    format        /^(?<span class="variable">&lt;ip&gt;</span>[^ ]<span class="keyword">*</span>) \[(?<span class="variable">&lt;time&gt;</span>[^\]]<span class="keyword">*</span>)\] <span class="string">"(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^ ]*) +\S*)?"</span> (?<span class="variable">&lt;code&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;size&gt;</span>[^ ]<span class="keyword">*</span>) <span class="string">"(?&lt;referer&gt;[^\"]*)"</span> <span class="string">"(?&lt;agent&gt;[^\"]*)"</span> (?<span class="variable">&lt;forward&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;reqlen&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;reqtime&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;backend&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;domain&gt;</span>[^ ]<span class="keyword">*</span>)/</span><br><span class="line">    time_format   %d/%b/%Y:%H:%M:%S %z</span><br><span class="line"><span class="variable">&lt;/source&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;match geoip.**&gt;</span></span><br><span class="line">  type secure_forward</span><br><span class="line">  shared_key secret_string</span><br><span class="line">  self_hostname node1.fluentd</span><br><span class="line"></span><br><span class="line">  secure false</span><br><span class="line">  <span class="comment">#若传输内容需要加密则用此配置</span></span><br><span class="line">  <span class="comment">#secure true</span></span><br><span class="line">  <span class="comment">#ca_cert_path        /etc/td-agent/ca/ca_cert.pem</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">&lt;server&gt;</span></span><br><span class="line">    host logs_server.fluentd</span><br><span class="line">    port 22222</span><br><span class="line">    username your_usrname</span><br><span class="line">    password your_password</span><br><span class="line">  <span class="variable">&lt;/server&gt;</span></span><br><span class="line"><span class="variable">&lt;/match&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="展示"><strong>展示</strong></h2><p>&emsp;图为某接口的日志统计情况，目前只有初步统计图，更详细的数据图有待添加。<br><img src="http://7xk64o.com1.z0.glb.clouddn.com/EFK_GeoIP.jpeg" alt="EFK_GeoIP.jpeg"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装"><strong>安装</strong></h2><ul>
<li>Elasticsearch、Kibana详见<a href="https://moguol.github.io/2015/12/21/ELK/" target="_blank" rel="e]]>
    </summary>
    
      <category term="EFK/ELK" scheme="http://yoursite.com/tags/EFK-ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Elasticsearch、Logstash、Kibana]]></title>
    <link href="http://yoursite.com/2015/12/21/ELK/"/>
    <id>http://yoursite.com/2015/12/21/ELK/</id>
    <published>2015-12-21T12:02:12.000Z</published>
    <updated>2016-02-28T13:27:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="基础环境"><strong>基础环境</strong></h2><ul>
<li>CentOS release 6.4 (Final) 64bit</li>
<li>jdk-8u45-linux-x64</li>
<li>Elasticsearch 1.7.1</li>
<li>Kibana-4.1.1-linux-x64</li>
<li>Logstash-1.5.4-1/Logstash-forwarder-0.4.0-1.x86_64</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/<span class="built_in">local</span>/java/jre</span><br><span class="line"></span><br><span class="line">[root@mogl ~]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.8.0_45"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_45-b14)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">25.45</span>-b02, mixed mode)</span><br></pre></td></tr></table></figure>
<h2 id="Elasticsearch"><strong>Elasticsearch</strong></h2><h3 id="安装"><strong>安装</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> wget <span class="symbol">https:</span>/<span class="regexp">/download.elastic.co/elasticsearch</span><span class="regexp">/elasticsearch/elasticsearch</span>-<span class="number">1.7</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="variable">$&gt;</span> tar -zxf elasticsearch-<span class="number">1.7</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="variable">$&gt;</span> mv elasticsearch-<span class="number">1.7</span>.<span class="number">1</span> /usr/local/elasticsearch</span><br></pre></td></tr></table></figure>
<h3 id="配置"><strong>配置</strong></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$&gt; vim /usr/local/elasticsearch/config/elasticsearch<span class="class">.yml</span></span><br><span class="line"></span><br><span class="line">path<span class="class">.data</span>: /data</span><br><span class="line">path<span class="class">.logs</span>: /var/wwwlog/elasticsearch</span><br><span class="line">path<span class="class">.plugins</span>: /usr/local/elasticsearch/plugins</span><br><span class="line">network<span class="class">.host</span>: <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">http<span class="class">.port</span>: <span class="number">9200</span></span><br><span class="line">bootstrap<span class="class">.mlockall</span>: true</span><br><span class="line">indices<span class="class">.fielddata</span><span class="class">.cache</span><span class="class">.size</span>: <span class="number">75%</span></span><br><span class="line">indices<span class="class">.breaker</span><span class="class">.fielddata</span><span class="class">.limit</span>: <span class="number">85%</span></span><br><span class="line">threadpool<span class="class">.search</span><span class="class">.queue_size</span>: <span class="number">10000</span></span><br><span class="line">discovery<span class="class">.zen</span><span class="class">.ping</span><span class="class">.multicast</span><span class="class">.enabled</span>: false</span><br><span class="line"></span><br><span class="line"><span class="id">#Cluster</span></span><br><span class="line"><span class="id">#node</span><span class="class">.name</span>: <span class="string">"master_node_10.0.6.6"</span></span><br><span class="line"><span class="id">#node</span><span class="class">.master</span>: true</span><br><span class="line"><span class="id">#node</span><span class="class">.data</span>: true</span><br><span class="line"><span class="id">#discovery</span><span class="class">.zen</span><span class="class">.ping</span><span class="class">.unicast</span><span class="class">.hosts</span>: [<span class="string">"10.0.6.5"</span>, <span class="string">"10.0.1.155"</span>]</span><br></pre></td></tr></table></figure>
<p>&emsp;根据自身机器内存情况调整JVM内存大小，原则上是越大越好但需要预留足够的内存给系统，此规则也是根据实际情况而定并非铁律。<br>&emsp;配置文件：<strong><code>/usr/local/elasticsearch/bin/elasticsearch.in.sh</code></strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">ES_MIN_MEM=<span class="value"><span class="number">10</span>g</span></span></span><br><span class="line"><span class="setting">ES_MAX_MEM=<span class="value"><span class="number">10</span>g</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="启动_&amp;_停止"><strong>启动 &amp; 停止</strong></h3><h4 id="启动"><strong>启动</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; /usr/<span class="built_in">local</span>/elasticsearch/bin/elasticsearch <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<h4 id="停止"><strong>停止</strong></h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停止本地节点</span></span><br><span class="line"><span class="variable">$&gt;</span> curl -<span class="constant">XPOST </span><span class="string">'http://localhost:9200/_cluster/nodes/_local/_shutdown'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#停止集群所有节点</span></span><br><span class="line"><span class="variable">$&gt;</span> curl -<span class="constant">XPOST </span><span class="string">'http://localhost:9200/_shutdown'</span></span><br></pre></td></tr></table></figure>
<h4 id="检验"><strong>检验</strong></h4><p>&emsp;启动Elasticsearch后访问<code>http://yourip:9200</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="regexp">/usr/</span>local<span class="regexp">/elasticsearch/</span>bin/elasticsearch -d</span><br><span class="line"></span><br><span class="line">$&gt; curl -XGET <span class="string">http:</span><span class="comment">//127.0.0.1:9200</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"status"</span> : <span class="number">200</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"Vindaloo"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"1.7.1"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"b88f43fc40b0bcd7f173a1f9ee2e97816de80b19"</span>,</span><br><span class="line">    <span class="string">"build_timestamp"</span> : <span class="string">"2015-07-29T09:54:16Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"4.10.4"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Kibana"><strong>Kibana</strong></h2><h3 id="安装-1"><strong>安装</strong></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useradd kibana</span><br><span class="line">wget <span class="string">https:</span><span class="comment">//download.elastic.co/kibana/kibana/kibana-4.1.1-linux-x64.tar.gz</span></span><br><span class="line">tar -zxf kibana-<span class="number">4.1</span><span class="number">.1</span>-linux-x64.tar.gz</span><br><span class="line">mv kibana-<span class="number">4.1</span><span class="number">.1</span>-linux-x64 <span class="regexp">/usr/</span>local/kibana</span><br><span class="line">chown -R <span class="string">kibana:</span>kibana <span class="regexp">/usr/</span>local<span class="regexp">/kibana/</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-1"><strong>配置</strong></h3><p>&emsp;配置文件<strong><code>/usr/local/kibana/config/kibana.yml</code></strong><br>&emsp;根据自身环境配置<strong><code>elasticsearch_url</code></strong>、<strong><code>host</code></strong>、<strong><code>port</code></strong>等参数</p>
<h4 id="Kibana启动控制脚本"><strong>Kibana启动控制脚本</strong></h4><p>&emsp;添加启动脚本<br>&emsp;启动Kibana<strong><code>/etc/init.d/kibana start</code></strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Init script for kibana</span></span><br><span class="line"><span class="comment"># From Kibana package</span></span><br><span class="line"><span class="comment"># Generated by pleaserun.</span></span><br><span class="line"><span class="comment"># Implemented based on LSB Core 3.1:</span></span><br><span class="line"><span class="comment">#   * Sections: 20.2, 20.3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides:          kibana</span></span><br><span class="line"><span class="comment"># Required-Start:    $remote_fs $syslog</span></span><br><span class="line"><span class="comment"># Required-Stop:     $remote_fs $syslog</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description:</span></span><br><span class="line"><span class="comment"># Description:       no description given</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line">PATH=/sbin:/usr/sbin:/bin:/usr/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line">name=kibana</span><br><span class="line">program=/usr/<span class="built_in">local</span>/kibana/bin/kibana</span><br><span class="line">args=<span class="string">''</span></span><br><span class="line">pidfile=<span class="string">"/var/run/<span class="variable">$name</span>.pid"</span></span><br><span class="line">user=<span class="string">"kibana"</span></span><br><span class="line">group=<span class="string">"kibana"</span></span><br><span class="line"><span class="built_in">chdir</span>=<span class="string">"/"</span></span><br><span class="line">chroot=<span class="string">"/"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">trace</span></span>() &#123;</span><br><span class="line">  logger -t <span class="string">"/etc/init.d/kibana"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">emit</span></span>() &#123;</span><br><span class="line">  trace <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Ensure the log directory is setup correctly.</span></span><br><span class="line">  [ ! <span class="operator">-d</span> <span class="string">"/var/log/kibana/"</span> ] &amp;&amp; mkdir <span class="string">"/var/log/kibana/"</span></span><br><span class="line">  chown <span class="string">"<span class="variable">$user</span>"</span>:<span class="string">"<span class="variable">$group</span>"</span> <span class="string">"/var/log/kibana/"</span></span><br><span class="line">  chmod <span class="number">755</span> <span class="string">"/var/log/kibana/"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Setup any environmental stuff beforehand</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Run the program!</span></span><br><span class="line"></span><br><span class="line">  chroot --userspec <span class="string">"<span class="variable">$user</span>"</span>:<span class="string">"<span class="variable">$group</span>"</span> <span class="string">"<span class="variable">$chroot</span>"</span> sh -c <span class="string">"</span><br><span class="line"></span><br><span class="line">    cd \"<span class="variable">$chdir</span>\"</span><br><span class="line">    exec \"<span class="variable">$program</span>\" <span class="variable">$args</span></span><br><span class="line">  "</span> &gt;&gt; /var/<span class="built_in">log</span>/kibana/kibana.stdout <span class="number">2</span>&gt;&gt; /var/<span class="built_in">log</span>/kibana/kibana.stderr &amp;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Generate the pidfile from here. If we instead made the forked process</span></span><br><span class="line">  <span class="comment"># generate it there will be a race condition between the pidfile writing</span></span><br><span class="line">  <span class="comment"># and a process possibly asking for status.</span></span><br><span class="line">  <span class="built_in">echo</span> $! &gt; <span class="variable">$pidfile</span></span><br><span class="line"></span><br><span class="line">  emit <span class="string">"<span class="variable">$name</span> started"</span></span><br><span class="line">  <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">  <span class="comment"># Try a few times to kill TERM the program</span></span><br><span class="line">  <span class="keyword">if</span> status ; <span class="keyword">then</span></span><br><span class="line">    pid=$(cat <span class="string">"<span class="variable">$pidfile</span>"</span>)</span><br><span class="line">    trace <span class="string">"Killing <span class="variable">$name</span> (pid <span class="variable">$pid</span>) with SIGTERM"</span></span><br><span class="line">    <span class="built_in">kill</span> -TERM <span class="variable">$pid</span></span><br><span class="line">    <span class="comment"># Wait for it to exit.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> ; <span class="keyword">do</span></span><br><span class="line">      trace <span class="string">"Waiting <span class="variable">$name</span> (pid <span class="variable">$pid</span>) to die..."</span></span><br><span class="line">      status || <span class="built_in">break</span></span><br><span class="line">      sleep <span class="number">1</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">if</span> status ; <span class="keyword">then</span></span><br><span class="line">      emit <span class="string">"<span class="variable">$name</span> stop failed; still running."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      emit <span class="string">"<span class="variable">$name</span> stopped."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">status</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ <span class="operator">-f</span> <span class="string">"<span class="variable">$pidfile</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">    pid=$(cat <span class="string">"<span class="variable">$pidfile</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> ps -p <span class="variable">$pid</span> &gt; /dev/null <span class="number">2</span>&gt; /dev/null ; <span class="keyword">then</span></span><br><span class="line">      <span class="comment"># process by this pid is running.</span></span><br><span class="line">      <span class="comment"># It may not be our pid, but that's what you get with just pidfiles.</span></span><br><span class="line">      <span class="comment"># TODO(sissel): Check if this process seems to be the same as the one we</span></span><br><span class="line">      <span class="comment"># expect. It'd be nice to use flock here, but flock uses fork, not exec,</span></span><br><span class="line">      <span class="comment"># so it makes it quite awkward to use in this case.</span></span><br><span class="line">      <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">return</span> <span class="number">2</span> <span class="comment"># program is dead but pid file exists</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">return</span> <span class="number">3</span> <span class="comment"># program is not running</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_stop</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> status ; <span class="keyword">then</span></span><br><span class="line">    stop</span><br><span class="line">    status &amp;&amp; <span class="built_in">kill</span> -KILL $(cat <span class="string">"<span class="variable">$pidfile</span>"</span>)</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  force-start|start|stop|force-stop|restart)</span><br><span class="line">    trace <span class="string">"Attempting '<span class="variable">$1</span>' on kibana"</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  force-start)</span><br><span class="line">    PRESTART=no</span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"<span class="variable">$0</span>"</span> start</span><br><span class="line">    ;;</span><br><span class="line">  start)</span><br><span class="line">    status</span><br><span class="line">    code=$?</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$code</span> <span class="operator">-eq</span> <span class="number">0</span> ]; <span class="keyword">then</span></span><br><span class="line">      emit <span class="string">"<span class="variable">$name</span> is already running"</span></span><br><span class="line">      <span class="built_in">exit</span> <span class="variable">$code</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      start</span><br><span class="line">      <span class="built_in">exit</span> $?</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  stop) stop ;;</span><br><span class="line">  force-stop) force_stop ;;</span><br><span class="line">  status)</span><br><span class="line">    status</span><br><span class="line">    code=$?</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$code</span> <span class="operator">-eq</span> <span class="number">0</span> ] ; <span class="keyword">then</span></span><br><span class="line">      emit <span class="string">"<span class="variable">$name</span> is running"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      emit <span class="string">"<span class="variable">$name</span> is not running"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="variable">$code</span></span><br><span class="line">    ;;</span><br><span class="line">  restart)</span><br><span class="line"></span><br><span class="line">    stop &amp;&amp; start</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$SCRIPTNAME</span> &#123;start|force-start|stop|force-start|force-stop|status|restart&#125;"</span> &gt;&amp;<span class="number">2</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="number">3</span></span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> $?</span><br></pre></td></tr></table></figure></p>
<h4 id="Nginx配置"><strong>Nginx配置</strong></h4><p>&emsp;配置文件<strong><code>kibana.conf</code></strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$&gt; yum -y install httpd-tools</span><br><span class="line">$&gt; htpasswd -c /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/kibana.users mogl</span><br><span class="line"></span><br><span class="line">upstream kibana &#123;</span><br><span class="line">        server 127.0.0.1:5601;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen                     80;</span><br><span class="line">        server_name                moglkibana.com;</span><br><span class="line">        access_log                 /<span class="keyword">var</span>/wwwlog/kibana/access.<span class="keyword">log</span> main;</span><br><span class="line">        error_log                  /<span class="keyword">var</span>/wwwlog/kibana/<span class="keyword">error</span>.<span class="keyword">log</span>  <span class="keyword">error</span>;</span><br><span class="line"></span><br><span class="line">		auth_basic <span class="string">"Kibana Access"</span>;</span><br><span class="line">		auth_basic_user_file /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/kibana.users;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_next_upstream http_500 http_502 http_504 <span class="keyword">error</span> timeout invalid_header;</span><br><span class="line">            proxy_pass                  http:<span class="comment">//kibana;</span></span><br><span class="line">            proxy_set_header            Host             <span class="label">$host</span>;</span><br><span class="line">            proxy_set_header            X-Real-IP        <span class="label">$remote_addr</span>;</span><br><span class="line">            proxy_set_header            X-Forwarded-<span class="keyword">For</span>  <span class="label">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Logstash"><strong>Logstash</strong></h2><h4 id="Logstash_服务端安装配置"><strong>Logstash 服务端安装配置</strong></h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> wget <span class="symbol">https:</span>/<span class="regexp">/download.elastic.co/logstash</span><span class="regexp">/logstash/packages</span><span class="regexp">/centos/logstash</span>-<span class="number">1.5</span>.<span class="number">4</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line"><span class="variable">$&gt;</span> yum localinstall /home/logstash-<span class="number">1.5</span>.<span class="number">4</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置SSL、FQDN</span></span><br><span class="line"><span class="variable">$&gt;</span> cd /etc/pki/tls</span><br><span class="line"><span class="variable">$&gt;</span> openssl req -subj <span class="string">'/CN=elk.mogl.com/'</span> -x509 -days <span class="number">3650</span> -batch -nodes -newkey <span class="symbol">rsa:</span><span class="number">2048</span> -keyout private/logstash-forwarder.key -out certs/logstash-forwarder.crt</span><br></pre></td></tr></table></figure>
<p>&emsp;创建logstash配置文件<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/logstash/conf.d/<span class="number">01</span>-logstash-initial.conf &lt;&lt; <span class="type">EOF</span></span><br><span class="line">input &#123;</span><br><span class="line">  lumberjack &#123;</span><br><span class="line">    port =&gt; <span class="number">5043</span></span><br><span class="line">    <span class="keyword">type</span> =&gt; <span class="string">"logs"</span></span><br><span class="line">    ssl_certificate =&gt; <span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span></span><br><span class="line">    ssl_key =&gt; <span class="string">"/etc/pki/tls/private/logstash-forwarder.key"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="keyword">type</span>] == <span class="string">"syslog"</span> &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      <span class="keyword">match</span> =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; %&#123;DATA:syslog_program&#125;(?:\[%&#123;POSINT:syslog_pid&#125;\])?: %&#123;GREEDYDATA:syslog_message&#125;"</span> &#125;</span><br><span class="line">      add_field =&gt; [ <span class="string">"received_at"</span>, <span class="string">"%&#123;@timestamp&#125;"</span> ]</span><br><span class="line">      add_field =&gt; [ <span class="string">"received_from"</span>, <span class="string">"%&#123;host&#125;"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">    syslog_pri &#123; &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      <span class="keyword">match</span> =&gt; [ <span class="string">"syslog_timestamp"</span>, <span class="string">"MMM  d HH:mm:ss"</span>, <span class="string">"MMM dd HH:mm:ss"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123; host =&gt; localhost &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">EOF</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>output</code>中的<code>elasticsearch</code>配置<code>host</code>若配置成<strong><code>[&quot;localhost:9200&quot;]</code></strong>则在与elasticsearchl连接时会报错<strong><code>Caught exception while handling client http traffic, closing connection</code></strong></p>
<h4 id="Logstash_客户端安装配置"><strong>Logstash 客户端安装配置</strong></h4><p>&emsp;安装logstash-forward并复制ssl证书<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; wget <span class="string">https:</span><span class="comment">//download.elastic.co/logstash-forwarder/binaries/logstash-forwarder-0.4.0-1.x86_64.rpm</span></span><br><span class="line">$&gt; yum localinstall logstash-forwarder-<span class="number">0.4</span><span class="number">.0</span>-<span class="number">1.</span>x86_64.rpm</span><br><span class="line">$&gt; echo <span class="string">'10.0.6.6 elk.mogl.com'</span> &gt;&gt; <span class="regexp">/etc/</span>hosts</span><br><span class="line">$&gt; scp root<span class="annotation">@elk</span>.mogl.<span class="string">com:</span><span class="regexp">/etc/</span>pki<span class="regexp">/tls/</span>certs<span class="regexp">/logstash-forwarder.crt /</span>etc<span class="regexp">/pki/</span>tls<span class="regexp">/certs/</span>logstash-forwarder.crt</span><br></pre></td></tr></table></figure></p>
<p>&emsp;logstash-forward客户端转发配置<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mv <span class="regexp">/etc/</span>logstash-forwarder.conf <span class="regexp">/etc/</span>logstash-forwarder.conf.org</span><br><span class="line"></span><br><span class="line">cat &gt; <span class="regexp">/etc/</span>logstash-forwarder.conf &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"network"</span>: &#123;</span><br><span class="line">    <span class="string">"servers"</span>: [ <span class="string">"elk.mogl.com:5043"</span> ],</span><br><span class="line"></span><br><span class="line">    <span class="string">"ssl ca"</span>: <span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"timeout"</span>: <span class="number">15</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">"files"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"paths"</span>: [</span><br><span class="line">        <span class="string">"/var/log/messages"</span>,</span><br><span class="line">        <span class="string">"/var/log/secure"</span></span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">      <span class="string">"fields"</span>: &#123; <span class="string">"type"</span>: <span class="string">"syslog"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$&gt; <span class="regexp">/etc/i</span>nit.d<span class="regexp">/logstash-forwarder start</span></span><br></pre></td></tr></table></figure></p>
<h4 id="创建索引模式"><strong>创建索引模式</strong></h4><p>&emsp;访问Kibana，在<strong><code>setting</code></strong>中添加索引即可。</p>
<h2 id="采集分析Nginx日志"><strong>采集分析Nginx日志</strong></h2><h4 id="Server端"><strong>Server端</strong></h4><p>&emsp;添加pattern匹配规则<br>&emsp;我所使用的Nginx日志格式<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">log_format</span> main <span class="string">'<span class="variable">$remote_addr</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                         <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                         <span class="string">'"<span class="variable">$http_user_agent</span>" <span class="variable">$http_x_forwarded_for</span> <span class="variable">$request_length</span> <span class="variable">$request_time</span> <span class="variable">$upstream_addr</span> <span class="variable">$host</span>'</span>;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;规则可通过此网站进行测试<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="external">Logstash匹配测试网站</a><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mkdir <span class="regexp">/opt/</span>logstash/patterns</span><br><span class="line"></span><br><span class="line">cat &gt; <span class="regexp">/opt/</span>logstash<span class="regexp">/patterns/</span>nginx &lt;&lt; EOF</span><br><span class="line">NGUSERNAME [a-zA-Z\.\@\-\+_%]+</span><br><span class="line">NGUSER %&#123;NGUSERNAME&#125;</span><br><span class="line">NGINXACCESS %&#123;<span class="string">IPORHOST:</span>remote_addr&#125; \[%&#123;<span class="string">HTTPDATE:</span>time_local&#125;\] <span class="string">"%&#123;WORD:method&#125; %&#123;URIPATH:path&#125;(?:%&#123;URIPARAM:param&#125;)? HTTP/%&#123;NUMBER:httpversion&#125;"</span> %&#123;<span class="string">INT:</span>status&#125; %&#123;<span class="string">INT:</span>body_bytes_sent&#125; %&#123;<span class="string">QS:</span>http_referer&#125; %&#123;<span class="string">QS:</span>http_user_agent&#125; %&#123;<span class="string">NOTSPACE:</span>http_x_forwarded_for&#125; %&#123;<span class="string">INT:</span>request_length&#125; %&#123;<span class="string">NUMBER:</span>request_time&#125; %&#123;<span class="string">NOTSPACE:</span>upstream_addr&#125; %&#123;<span class="string">IPORHOST:</span>host&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$&gt; chown -R <span class="string">logstash:</span>logstash <span class="regexp">/opt/</span>logstash<span class="regexp">/patterns/</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;Logstash添加Nginx相关配置<code>/etc/logstash/conf.d/logstash-nginx.conf</code><br>&emsp;如果按照上文logstash配置了统计syslog的采集，端口需要改变，否则会报错地址已被占用<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  lumberjack &#123;</span><br><span class="line">    port =&gt; <span class="number">5043</span></span><br><span class="line">    <span class="keyword">type</span> =&gt; <span class="string">"logs"</span></span><br><span class="line">    ssl_certificate =&gt; <span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span></span><br><span class="line">    ssl_key =&gt; <span class="string">"/etc/pki/tls/private/logstash-forwarder.key"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="keyword">type</span>] == <span class="string">"nginx"</span> &#123;</span><br><span class="line">          grok &#123;</span><br><span class="line">                  <span class="keyword">match</span> =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;NGINXACCESS&#125;"</span> &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123; host =&gt; localhost &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Client端"><strong>Client端</strong></h4><p>&emsp;logstash-forward将日志转发到服务端<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">network</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">servers</span>": <span class="value">[ <span class="string">"elk.mogl.com:5043"</span> ]</span>,</span><br><span class="line"></span><br><span class="line">    "<span class="attribute">ssl ca</span>": <span class="value"><span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span></span>,</span><br><span class="line"></span><br><span class="line">    "<span class="attribute">timeout</span>": <span class="value"><span class="number">15</span></span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line"></span><br><span class="line">  "<span class="attribute">files</span>": <span class="value">[</span><br><span class="line">    &#123;</span><br><span class="line">        "<span class="attribute">paths</span>": <span class="value">[</span><br><span class="line">            <span class="string">"/var/wwwlog/test/access.log"</span></span><br><span class="line">        ]</span>,</span><br><span class="line"></span><br><span class="line">        "<span class="attribute">fields</span>": <span class="value">&#123; "<span class="attribute">type</span>": <span class="value"><span class="string">"nginx"</span> </span>&#125;</span><br><span class="line">    </span>&#125;</span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="基础环境"><strong>基础环境</strong></h2><ul>
<li>CentOS release 6.4 (Final) 64bit</li>
<li>jdk-8u45-linux-x64</li>
<li>Elasticsearch 1.7.1</]]>
    </summary>
    
      <category term="EFK/ELK" scheme="http://yoursite.com/tags/EFK-ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fluentd日志收集]]></title>
    <link href="http://yoursite.com/2015/12/20/fluentd/"/>
    <id>http://yoursite.com/2015/12/20/fluentd/</id>
    <published>2015-12-20T09:59:44.000Z</published>
    <updated>2016-02-28T10:20:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Fluentd安装"><strong>Fluentd安装</strong></h2><p>&emsp;多数内容都是按照官方文档来，详细参考<a href="http://docs.fluentd.org/articles/quickstart" target="_blank" rel="external">官方文档</a></p>
<h4 id="配置NTP"><strong>配置NTP</strong></h4><p>&emsp;官方文档说明每个节点需要配好NTP，只有确保节点的时间是一致就行，我使用<code>ntpdate</code>使节点时间一致，或直接网络同步时间<code>rdate -s time.nist.gov</code></p>
<h4 id="设置最大文件描述符"><strong>设置最大文件描述符</strong></h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ulimit -<span class="keyword">n</span> 65535</span><br><span class="line">#新增以下内容到/etc/security/limits.<span class="keyword">conf</span></span><br><span class="line"><span class="comment">* soft nofile 65535</span></span><br><span class="line"><span class="comment">* hard nofile 65535</span></span><br></pre></td></tr></table></figure>
<h4 id="优化内核TCP参数"><strong>优化内核TCP参数</strong></h4><p>&emsp;<code>/etc/sysctl.conf</code>配置文件新增以下内容，保持退出后执行<strong><code>sysctl -p</code></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_tw_recycle</span> = <span class="number">1</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_tw_reuse</span> = <span class="number">1</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.ip_local_port_range</span> = <span class="number">10240</span>    <span class="number">65535</span></span><br></pre></td></tr></table></figure></p>
<h4 id="安装td-agent"><strong>安装td-agent</strong></h4><p>&emsp;Fluentd有两个版本，一个是稳定版<code>td-agent</code>，一个是开发版<code>Fluentd</code>。这里在<code>CentOS6.4 64bit</code>上使用稳定版<code>td-agent</code>，不同平台参考<a href="http://docs.fluentd.org/v0.12/categories/installation" target="_blank" rel="external">官方安装文档</a><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L http<span class="variable">s:</span>//td-toolbelt.herokuapp.<span class="keyword">com</span>/<span class="keyword">sh</span>/install-redhat-td-agent2.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;安装完后情况如下：</p>
<ul>
<li>默认td-agent安装路径：<strong><code>/opt/td-agent</code></strong></li>
<li>启动/停止/重启：<strong><code>/etc/init.d/td-agent [start|stop|restart|status|configtest]</code></strong></li>
<li>配置文件：<strong><code>/etc/td-agent/td-agent.conf</code></strong></li>
<li>日志路径：<strong><code>/var/log/td-agent/td-agent.log</code></strong></li>
<li>查看默认已安装插件：<strong><code>/opt/td-agent/embedded/bin/gem list|grep plugin</code></strong>  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fluent-<span class="keyword">plugin</span>-mongo (0.7.10)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-rewrite-tag-filter (1.4.1)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-s3 (0.5.9)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-scribe (0.10.14)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-td (0.10.27)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-td-monitoring (0.2.1)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-webhdfs (0.4.1)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="安装插件(可选)"><strong>安装插件</strong>(可选)</h4><p>&emsp;Fluentd支持许多插件，详见<a href="http://www.fluentd.org/plugins" target="_blank" rel="external">fluentd插件</a></p>
<ul>
<li><p>安装方法：<strong><code>td-agent-gem install plugin_name</code></strong></p>
</li>
<li><p>安装<strong>secure-forward</strong>、<strong>elasticsearch</strong>插件<br>&emsp;<code>secure-forward</code>加密传输内容，<code>elasticsearch</code>可将Fluentd收集的日志存入Elasticsearch</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; td-agent-gem install fluent-<span class="keyword">plugin</span>-secure-forward fluent-<span class="keyword">plugin</span>-elasticsearch</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>&emsp;如果是使用<code>fluent-gem</code>来安装，最好改用淘宝源<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="regexp">/opt/</span>td-agent<span class="regexp">/embedded/</span>bin<span class="regexp">/fluent-gem sources --remove https:/</span><span class="regexp">/rubygems.org/</span></span><br><span class="line">$&gt; <span class="regexp">/opt/</span>td-agent<span class="regexp">/embedded/</span>bin<span class="regexp">/fluent-gem sources -a https:/</span><span class="regexp">/ruby.taobao.org/</span></span><br><span class="line">$&gt; <span class="regexp">/opt/</span>td-agent<span class="regexp">/embedded/</span>bin<span class="regexp">/fluent-gem install fluent-plugin-secure-forward fluent-plugin-elasticsearch</span></span><br></pre></td></tr></table></figure></p>
<h4 id="启动_&amp;_测试"><strong>启动 &amp; 测试</strong></h4><p>&emsp;测试Fluentd，动态查看日志<strong><code>tailf /var/log/td-agent/td-agent.log</code></strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; /etc/init.<span class="keyword">d</span>/td-agent start</span><br><span class="line"></span><br><span class="line">curl -X <span class="keyword">POST</span> -<span class="keyword">d</span> 'json=&#123;<span class="string">"json":"message"</span>&#125;' http:<span class="comment">//localhost:8888/debug.test</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置Fluentd"><strong>配置Fluentd</strong></h2><p>&emsp;通过官方脚本安装(rpm/deb)的td-agent，默认配置文件<strong><code>/etc/td-agent/td-agent.conf</code></strong><br>&emsp;Fluentd配置中只有三种基本指令：</p>
<ul>
<li><strong>source</strong>：指定日志记录的来源</li>
<li><strong>match</strong>：指定输出动作，指定经过Fluentd处理后的结果输出目的地，可以是输出到文件、数据库，也可以转发到另一个Fluentd中。</li>
<li><strong>include</strong>：指定包含的其他配置文件</li>
</ul>
<p>&emsp;详细配置分析</p>
<h3 id="source"><strong>source</strong></h3><p>&emsp;<strong><code>source</code></strong>配置输入来源以及选择什么输入插件，官方列出的所有输入插件详见<a href="http://docs.fluentd.org/articles/input-plugin-overview#" target="_blank" rel="external">这里</a>。Fluentd内置标准的输入插件<strong><code>http</code></strong>和<strong><code>forward</code></strong>，除了<strong><code>http</code></strong>和<strong><code>forward</code></strong>外还有<strong><code>tail</code></strong>也是非常常用的，<strong><code>source</code></strong>必须包含<strong><code>type</code></strong>指明Fluentd使用哪个输入插件接收数据。</p>
<ul>
<li><strong><code>http</code></strong>：指定Fluentd接收来自HTTP的数据</li>
<li><strong><code>forward</code></strong>：指定Fluentd接收来自TCP的数据。<strong>source</strong>的<code>forward</code>用于汇聚端，接收来之客户端转发的日志。</li>
<li><strong><code>secure_forward</code></strong>：通过SSL使Fluentd传输数据更安全。同<strong><code>forward</code></strong>插件，多用于汇聚端。</li>
<li><strong><code>tail</code></strong>：指定Fluentd从文件中接收数据</li>
</ul>
<h4 id="http"><strong>http</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http input</span></span><br><span class="line"><span class="comment"># POST http://localhost:8888/&lt;tag&gt;?json=&lt;json&gt;</span></span><br><span class="line"><span class="comment"># POST http://localhost:8888/td.myapp.login?json=&#123;"user"%3A"me"&#125;</span></span><br><span class="line">&lt;<span class="built_in">source</span>&gt;</span><br><span class="line">    <span class="built_in">type</span> http</span><br><span class="line">    port <span class="number">8888</span></span><br><span class="line">&lt;/<span class="built_in">source</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="forward"><strong>forward</strong></h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># forward <span class="built_in">input</span></span><br><span class="line"># Receive events from <span class="number">24224</span>/tcp</span><br><span class="line"># This <span class="keyword">is</span> used by <span class="built_in">log</span> forwarding <span class="built_in">and</span> the fluent-<span class="keyword">cat</span> <span class="keyword">command</span></span><br><span class="line">&lt;<span class="keyword">source</span>&gt;</span><br><span class="line">    <span class="built_in">type</span> forward</span><br><span class="line">    port <span class="number">24224</span></span><br><span class="line">&lt;/<span class="keyword">source</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="secure_forward"><strong>secure_forward</strong></h4><p>&emsp;汇聚端先使用<strong><code>secure-forward-ca-generate 路径 密码</code></strong>生成证书和公钥(需要将<code>ca_cert.pem</code>拷贝到客户端中)<br>&emsp;默认的端口是<code>24284</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="regexp">/opt/</span>td-agent<span class="regexp">/embedded/</span>bin<span class="regexp">/secure-forward-ca-generate /</span>path<span class="regexp">/to/</span>certificate passphrase_for_private_CA_secret_key</span><br></pre></td></tr></table></figure></p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#secure_forward input</span></span><br><span class="line">&lt;<span class="literal">source</span>&gt;</span><br><span class="line">  <span class="built_in">type</span> secure_forward</span><br><span class="line">  shared_key         secret_string</span><br><span class="line">  port <span class="number">22222</span></span><br><span class="line">  self_hostname      server.<span class="built_in">fqdn</span>.local</span><br><span class="line">  secure <span class="keyword">true</span></span><br><span class="line">  ca_cert_path        /<span class="built_in">path</span>/to/certificate/ca_cert.pem</span><br><span class="line">  ca_private_key_path /<span class="built_in">path</span>/to/certificate/ca_key.pem</span><br><span class="line">  ca_private_key_passphrase passphrase_for_private_CA_secret_key</span><br><span class="line">  authentication     yes</span><br><span class="line">  &lt;<span class="keyword">user</span>&gt;</span><br><span class="line">    username tagomoris</span><br><span class="line">    <span class="literal">password</span> foobar012</span><br><span class="line">  &lt;/<span class="keyword">user</span>&gt;</span><br><span class="line">&lt;/<span class="literal">source</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="tail"><strong>tail</strong></h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># tail input</span></span><br><span class="line"><span class="variable">&lt;source&gt;</span></span><br><span class="line">    type          tail</span><br><span class="line">    tag           fluentd.tail.test							<span class="comment">#事件tag</span></span><br><span class="line">    path          /var/wwwlog/nginx/access.log				<span class="comment">#日志路径，多个日志用','分隔</span></span><br><span class="line">    pos_file      /tmp/fluentd.pos							<span class="comment">#记录上次读到日志的位置</span></span><br><span class="line">    <span class="comment">#format       [apache2|nginx|自定义正则]				#日志格式匹配</span></span><br><span class="line">    format        /^(?<span class="variable">&lt;remote&gt;</span>[^ ]<span class="keyword">*</span>) \[(?<span class="variable">&lt;time&gt;</span>[^\]]<span class="keyword">*</span>)\] <span class="string">"(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^ ]*) +\S*)?"</span> (?<span class="variable">&lt;code&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;size&gt;</span>[^ ]<span class="keyword">*</span>) <span class="string">"(?&lt;referer&gt;[^\"]*)"</span> <span class="string">"(?&lt;agent&gt;[^\"]*)"</span> (?<span class="variable">&lt;forward&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;request_length&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;request_time&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;upstream_addr&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;host&gt;</span>[^ ]<span class="keyword">*</span>)/</span><br><span class="line">    time_format 	%d/%b/%Y:%H:%M:%S %z</span><br><span class="line"><span class="variable">&lt;/source&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;<strong><code>tail</code></strong>的日志参数<code>format</code>支持正则表达式<code>(?&lt;名称&gt;模式)</code>，可以通过<a href="https://fluentular.herokuapp.com/" target="_blank" rel="external">这个网站</a>对自己日志格式的正则进行调试<br>&emsp;<strong><code>time_format</code></strong>是指定<strong><code>format</code></strong>中时间格式<strong><code>time</code></strong>，假若<code>format</code>中有<code>time</code>则需要<code>time_format</code><br>&emsp;我用的是Nginx，所用日志格式如下所示：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Nginx log_format</span></span><br><span class="line"><span class="title">log_format</span> main <span class="string">'<span class="variable">$remote_addr</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">					 <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">				 <span class="string">'"<span class="variable">$http_user_agent</span>" <span class="variable">$http_x_forwarded_for</span> <span class="variable">$request_length</span> <span class="variable">$request_time</span> <span class="variable">$upstream_addr</span> <span class="variable">$host</span>'</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="match"><strong>match</strong></h3><p>&emsp;<strong><code>match</code></strong>指定Fluentd输出动作，官方列出的所有输出插件详见<a href="http://docs.fluentd.org/articles/output-plugin-overview" target="_blank" rel="external">这里</a>。<strong><code>match</code></strong>会根据<strong><code>source</code></strong>中的<code>tag</code>进行匹配进而做不同的处理。Fluentd标准的输出插件是<code>file</code>和<code>forward</code>。和<strong><code>source</code></strong>一样，<strong>match</strong>中会有<code>type</code>。</p>
<ul>
<li><strong><code>file</code></strong>：将输出内容写入文件</li>
<li><strong><code>forward</code></strong>：将输出内容转发到其他fluentd节点。<strong>match</strong>的<code>forward</code>多用于客户端转发日志<br>  <code>forward</code>输出插件有重试机制以确保数据能被顺利的被转发，转发数据缓存在磁盘，初始默认重发间隔为<code>1s</code>，重试<code>17</code>次，每次间隔时间增加2倍(类似TCP的指数退避)，超过<code>17</code>后日志会被丢弃(极端情况是36小时都无法转发则日志会被丢弃)，可以设置无限重发(<code>disable_retry_limit=true</code>)</li>
<li><strong><code>secure_forward</code></strong>：通过SSL安全的将输入内容转发到fluentd汇聚节点。如果汇聚节点的fluentd开启了<code>secure true</code>则需要将汇聚节点的证书拷贝过来。</li>
<li><strong><code>mongo</code></strong>：将输出内容写入到MongoDB(td-agent默认已安装mongodb插件)</li>
</ul>
<h4 id="file"><strong>file</strong></h4><p>&emsp;从<strong>source</strong>的<code>forward</code>中接收日志并通过<strong>match</strong>的<code>file</code>写入到文件<br>&emsp;默认的<code>file</code>输出格式：<code>time[delimiter]tag[delimiter]record\n</code>，可通过参数自定义，详细参考<a href="http://docs.fluentd.org/articles/out_file" target="_blank" rel="external">这里</a><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#forward <span class="keyword">input</span></span><br><span class="line">&lt;source&gt;</span><br><span class="line">    <span class="keyword">type</span> forward</span><br><span class="line">    port 22222</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">file</span> output</span><br><span class="line">#tag匹配'fluentd.tail.<span class="keyword">test</span>'的输出将写入到文件中</span><br><span class="line">&lt;match fluentd.tail.<span class="keyword">test</span>&gt;</span><br><span class="line">    <span class="keyword">type</span> <span class="keyword">file</span></span><br><span class="line">    <span class="keyword">append</span> true					#日志部分割	</span><br><span class="line">    output_tag false			#不输出tag，默认输出</span><br><span class="line">    output_time false			#不单独输出time</span><br><span class="line">    include_time_key true		#将time放入record中，默认将time单独输出</span><br><span class="line">    flush_interval 5s</span><br><span class="line">	time_format %Y/%<span class="keyword">m</span>/%<span class="keyword">d</span> %<span class="keyword">H</span>:%<span class="keyword">M</span>:%S	#设置时间格式</span><br><span class="line">	path /<span class="keyword">var</span>/<span class="keyword">log</span>/td-agent/<span class="keyword">test</span>/<span class="keyword">test</span>	#文件保持路径，文件名类似：/<span class="keyword">var</span>/<span class="keyword">log</span>/td-agent/<span class="keyword">test</span>/<span class="keyword">test</span>.20150901.<span class="literal">log</span></span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="forward-1"><strong>forward</strong></h4><p>&emsp;<strong><code>type</code></strong>和<strong><code>server</code></strong>是必选项，其余可选。secondary——当所有server都不可用时则使用此项(备份选项)<br>&emsp;<strong>match</strong>中<code>forward</code>转发<code>host</code>机器的<code>port</code>需要<strong>iptables</strong>对相应的<strong>TCP</strong>和<strong>UPD</strong>端口都要放行，若只开放TCP端口是无法forward成功的!<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#forward output</span></span><br><span class="line"><span class="tag">&lt;match pattern&gt;</span></span><br><span class="line">    <span class="keyword">type</span> forward</span><br><span class="line">    <span class="keyword">send_timeout</span> 60s</span><br><span class="line">    <span class="keyword">recover_wait</span> 10s</span><br><span class="line">    <span class="keyword">heartbeat_interval</span> 1s</span><br><span class="line">    <span class="keyword">phi_threshold</span> 16</span><br><span class="line">    <span class="keyword">hard_timeout</span> 60s</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;server&gt;</span></span><br><span class="line">      <span class="keyword">name</span> myserver1</span><br><span class="line">      <span class="keyword">host</span> 192.168.1.3</span><br><span class="line">      <span class="keyword">port</span> 24224</span><br><span class="line">      <span class="keyword">weight</span> 60</span><br><span class="line">    <span class="tag">&lt;/server&gt;</span></span><br><span class="line">    <span class="tag">&lt;server&gt;</span></span><br><span class="line">      <span class="keyword">name</span> myserver2</span><br><span class="line">      <span class="keyword">host</span> 192.168.1.4</span><br><span class="line">      <span class="keyword">port</span> 24224</span><br><span class="line">      <span class="keyword">weight</span> 60</span><br><span class="line">    <span class="tag">&lt;/server&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;secondary&gt;</span></span><br><span class="line">      <span class="keyword">type</span> file</span><br><span class="line">      <span class="keyword">path</span> /var/log/fluent/forward-failed</span><br><span class="line">    <span class="tag">&lt;/secondary&gt;</span></span><br><span class="line"><span class="tag">&lt;/match&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="secure_forward-1"><strong>secure_forward</strong></h4><p>&emsp;<code>ca_cert_path</code>证书需要从汇聚端上拷贝。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;match secret<span class="class">.data</span>.**&gt;</span><br><span class="line">  type secure_forward</span><br><span class="line">  shared_key secret_string</span><br><span class="line">  self_hostname client<span class="class">.fqdn</span><span class="class">.local</span></span><br><span class="line">  secure true</span><br><span class="line">  ca_cert_path /path/to/certificate/ca_cert<span class="class">.pem</span></span><br><span class="line"></span><br><span class="line">  &lt;server&gt;</span><br><span class="line">    host first<span class="class">.fqdn</span><span class="class">.local</span></span><br><span class="line">    port <span class="number">22222</span></span><br><span class="line">    username tagomoris</span><br><span class="line">    password foobar012</span><br><span class="line">  &lt;/server&gt;</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="mongo"><strong>mongo</strong></h4><p>&emsp;<code>type</code>、<code>host</code>、<code>port</code>、<code>database</code>(库名)、<code>collection</code>都是必选项(<code>collection</code>没有时<code>tag_mapped</code>才是必须)<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;match mongo.**&gt;</span><br><span class="line">    <span class="built_in">type</span> mongo</span><br><span class="line">    <span class="keyword">host</span> fluentd</span><br><span class="line">    port <span class="number">27017</span></span><br><span class="line">    database fluentd</span><br><span class="line">    collection fluentd</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># for capped collection</span></span><br><span class="line">    capped</span><br><span class="line">    capped_size <span class="number">1024</span>m</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># authentication</span></span><br><span class="line">    <span class="keyword">user</span> fluentd</span><br><span class="line">    <span class="literal">password</span> fluentd</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># key name of timestamp</span></span><br><span class="line">    time_key time</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># flush</span></span><br><span class="line">    flush_interval <span class="number">5</span>s</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong><code>match</code></strong>的<code>tag</code>支持通配符匹配，详细内容查看<a href="http://docs.fluentd.org/articles/config-file#match-pattern-how-you-control-the-event-flow-inside-fluentd" target="_blank" rel="external">这里</a>。<code>tag</code>的匹配按照配置文件从上到下进行，一旦匹配成功则执行相应操作并<strong>停止继续匹配</strong>。<br>&emsp;<code>MongoDB</code>输出中使用了<strong><code>capped collection</code></strong>，对于纯粹日志类型数据效果很好，这种类型的collection是指定大小，当空间满后会用新数据覆盖旧数据，更详细信息查阅<a href="http://docs.mongodb.org/manual/core/capped-collections/" target="_blank" rel="external">MongoDB官方文档</a></p>
<h3 id="include"><strong>include</strong></h3><p>&emsp;<strong><code>include</code></strong>为了方便不同配置文件的管理，避免将全部项目的配置都写到一个配置文件中导致臃肿。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># absolute path</span></span><br><span class="line"><span class="keyword">include</span> /path/to/config.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># if using a relative path, the directive will use </span></span><br><span class="line"><span class="comment"># the dirname of this config file to expand the path</span></span><br><span class="line"><span class="keyword">include</span> extra.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># glob match pattern</span></span><br><span class="line"><span class="keyword">include</span> config.d/*.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># http</span></span><br><span class="line"><span class="keyword">include</span> <span class="symbol">http:</span>/<span class="regexp">/example.com/fluent</span>.conf</span><br></pre></td></tr></table></figure></p>
<h2 id="配置实例"><strong>配置实例</strong></h2><p>&emsp;以下是具体的配置实例。</p>
<ol>
<li>A服务器为日志收集客户端，B服务器为日志收集的集中汇总端。</li>
<li>A(client)通过Fluentd中<strong>source</strong>的<code>tail</code>插件收集日志并通过<strong>match</strong>的<code>forward</code>转发给B(server)</li>
<li>B(server)通过Fluentd中<strong>source</strong>的<code>forward</code>接收A(client)转发过来的日志并通过<strong>match</strong>的<code>file</code>或<code>mongo</code>等插件汇入到不同的存储中。</li>
</ol>
<h4 id="B(server)"><strong>B(server)</strong></h4><p>&emsp;配置文件<strong><code>/etc/td-agent/td-agent.conf</code></strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$&gt; /sbin/iptables -A <span class="keyword">INPUT</span> -p tcp --dport 22222 -j ACCEPT</span><br><span class="line">$&gt; /sbin/iptables -A <span class="keyword">INPUT</span> -p udp --dport 22222 -j ACCEPT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  <span class="keyword">type</span> forward</span><br><span class="line">  port 22222</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;match mogl_test.**&gt;</span><br><span class="line">    <span class="keyword">type</span> <span class="keyword">file</span></span><br><span class="line">    <span class="keyword">append</span> true</span><br><span class="line">    output_tag false</span><br><span class="line">    output_time false</span><br><span class="line">    include_time_key true</span><br><span class="line">    flush_interval 5s</span><br><span class="line">    time_format %Y/%<span class="keyword">m</span>/%<span class="keyword">d</span> %<span class="keyword">H</span>:%<span class="keyword">M</span>:%<span class="literal">S</span></span><br><span class="line">    path /<span class="keyword">var</span>/wwwlog/fluentd/mogl_test/mogl_test</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong>match</strong>中<code>file</code>参数详解</p>
<ul>
<li>append：文件是否使用追加模式。默认false，但会生成许多零碎文件。true则每天只有一个文件，所有的日志都追加到此文件中。</li>
<li>output_tag：<code>tag</code>字段取消。默认true。默认格式：<code>2014-06-08T23:59:40[TAB]your.tag[TAB]{&quot;field1&quot;:&quot;value1&quot;,&quot;field2&quot;:&quot;value2&quot;}\n</code>，更改后格式：<code>2014-06-08T23:59:40[TAB]{&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;}\n</code></li>
<li>output_time、include_time_key：<code>output_time</code>取消<code>time</code>字段、<code>include_time_key</code>将<code>time</code>字段添加到记录中。默认true。默认格式见上</li>
<li>flush_interval：写入磁盘时间间隔</li>
<li>time_format：<code>time</code>字段的格式</li>
<li>path：文件存储路径。文件名：/var/wwwlog/fluentd/mogl_test/mogl_test.20150901.log</li>
</ul>
<h4 id="A(client)"><strong>A(client)</strong></h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;source&gt;</span></span><br><span class="line">    type          tail</span><br><span class="line">    tag           mogl_test</span><br><span class="line">    path          /var/wwwlog/mogl_test/access.log</span><br><span class="line">    pos_file      /tmp/mogl_test.fluentd.pos</span><br><span class="line">    format        /^(?<span class="variable">&lt;remote&gt;</span>[^ ]<span class="keyword">*</span>) \[(?<span class="variable">&lt;time&gt;</span>[^\]]<span class="keyword">*</span>)\] <span class="string">"(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^ ]*) +\S*)?"</span> (?<span class="variable">&lt;code&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;size&gt;</span>[^ ]<span class="keyword">*</span>) <span class="string">"(?&lt;referer&gt;[^\"]*)"</span> <span class="string">"(?&lt;agent&gt;[^\"]*)"</span> (?<span class="variable">&lt;forward&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;request_length&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;request_time&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;upstream_addr&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;host&gt;</span>[^ ]<span class="keyword">*</span>)/</span><br><span class="line">	time_format         %d/%b/%Y:%H:%M:%S %z</span><br><span class="line"><span class="variable">&lt;/source&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;match mogl_test&gt;</span></span><br><span class="line">  type forward</span><br><span class="line">  send_timeout 60s</span><br><span class="line">  recover_wait 10s</span><br><span class="line">  heartbeat_interval 15s</span><br><span class="line">  phi_threshold 16</span><br><span class="line">  hard_timeout 60s</span><br><span class="line"></span><br><span class="line">  <span class="variable">&lt;server&gt;</span></span><br><span class="line">    name log.mogl.net</span><br><span class="line">    host log.mogl.net</span><br><span class="line">    port 22222</span><br><span class="line">  <span class="variable">&lt;/server&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">&lt;secondary&gt;</span></span><br><span class="line">    type file</span><br><span class="line">    path /tmp/mogl_test.fail</span><br><span class="line">  <span class="variable">&lt;/secondary&gt;</span></span><br><span class="line"><span class="variable">&lt;/match&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Fluentd安装"><strong>Fluentd安装</strong></h2><p>&emsp;多数内容都是按照官方文档来，详细参考<a href="http://docs.fluentd.org/articles/quickstart" target="_]]>
    </summary>
    
      <category term="fluentd" scheme="http://yoursite.com/tags/fluentd/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SaltStack实录]]></title>
    <link href="http://yoursite.com/2015/12/12/saltstack/"/>
    <id>http://yoursite.com/2015/12/12/saltstack/</id>
    <published>2015-12-12T04:22:24.000Z</published>
    <updated>2016-02-29T02:14:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="SaltStack安装"><strong>SaltStack安装</strong></h2><p>&emsp;各Linux版本安装详见<a href="https://docs.saltstack.com/en/latest/topics/installation/" target="_blank" rel="external">官方安装文档</a>。<br>&emsp;以下都是在<strong><code>CentOS 6.4 64bit</code></strong>系统上进行。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> rpm --import <span class="symbol">https:</span>/<span class="regexp">/repo.saltstack.com/yum</span><span class="regexp">/redhat/</span><span class="number">6</span>/x86_64/latest/<span class="constant">SALTSTACK-GPG-KEY.</span>pub</span><br><span class="line"></span><br><span class="line">/etc/yum.repos.d/saltstack.repo</span><br><span class="line">[saltstack-repo]</span><br><span class="line">name=<span class="constant">SaltStack </span>repo <span class="keyword">for</span> <span class="constant">RHEL/CentOS </span><span class="variable">$releasever</span></span><br><span class="line">baseurl=<span class="symbol">https:</span>/<span class="regexp">/repo.saltstack.com/yum</span><span class="regexp">/redhat/</span><span class="variable">$releasever</span>/<span class="variable">$basearch</span>/latest</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=<span class="symbol">https:</span>/<span class="regexp">/repo.saltstack.com/yum</span><span class="regexp">/redhat/</span><span class="variable">$releasever</span>/<span class="variable">$basearch</span>/latest/<span class="constant">SALTSTACK-GPG-KEY.</span>pub</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择需要的安装</span></span><br><span class="line"><span class="variable">$&gt;</span> yum install salt-master</span><br><span class="line"><span class="variable">$&gt;</span> yum install salt-minion</span><br><span class="line"><span class="variable">$&gt;</span> yum install salt-ssh</span><br><span class="line"><span class="variable">$&gt;</span> yum install salt-syndic</span><br><span class="line"><span class="variable">$&gt;</span> yum install salt-cloud</span><br></pre></td></tr></table></figure>
<h4 id="安装问题集"><strong>安装问题集</strong></h4><ol>
<li><p>缺少psutil模块<br> AttributeError: ‘module’ object has no attribute ‘get_sysinfo’</p>
 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; pip <span class="keyword">install</span> psutil</span><br><span class="line"><span class="comment">#若提示python版本过低则</span></span><br><span class="line">   $&gt; pip <span class="keyword">install</span> psutil --upgrade</span><br></pre></td></tr></table></figure>
</li>
<li><p>IPV6地址不可达导致无法安装<br> 关闭IPv6</p>
<ul>
<li><p>永久关闭<br>  修改<strong><code>/etc/sysctl.conf</code></strong>配置文件，加入如下内容</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#shutdown</span> IPv6</span><br><span class="line">net<span class="class">.ipv6</span><span class="class">.conf</span><span class="class">.all</span><span class="class">.disable_ipv6</span> = <span class="number">1</span></span><br><span class="line">net<span class="class">.ipv6</span><span class="class">.conf</span><span class="class">.default</span><span class="class">.disable_ipv6</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">#生效配置</span><br><span class="line">$&gt; sysctl -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>临时关闭</p>
  <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">1</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv6/conf/all/disable_ipv6</span><br><span class="line">echo <span class="number">1</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv6/conf/default/disable_ipv6</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="SaltStack配置"><strong>SaltStack配置</strong></h2><h4 id="salt-master_配置"><strong>salt-master 配置</strong></h4><p>&emsp;salt-master监听端口：</p>
<ul>
<li><strong><code>4505</code></strong>(publish_port)<br>  &emsp;salt的消息发布系统</li>
<li><strong><code>4506</code></strong>(ret_port)<br>  &emsp;salt客户端与服务端通信的端口</li>
</ul>
<p>&emsp;默认配置文件：<strong>/etc/salt/master</strong><br>&emsp;<strong>nodegroups</strong>定义规则：</p>
<ul>
<li>G — Grains glob匹配，例如：G@os:Ubuntu</li>
<li>E — minion 正则表达式匹配，例如：E@web\d+.(dev|qa|prod).loc</li>
<li>P — Grains PCRE 正则表达式匹配，例如：P@os:(RedHat|Fedora|CentOS)</li>
<li>L — minion 列表匹配，例如：L@minion1.example.com,minion3.domain.com or bl*.domain.com</li>
<li>I — Pillar glob单个匹配，例如：I@pdata:foobar</li>
<li>S — 子网/IP 匹配，例如：S@192.168.1.0/24 or S@192.168.1.100</li>
<li>R — Range cluster客户端范围匹配，例如： R@%foo.bar</li>
<li>D — minion data匹配，例如：D@key:value</li>
</ul>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span>: <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line"><span class="comment">#自动通过salt-minion认证</span></span><br><span class="line">auto_accept: <span class="constant">True</span></span><br><span class="line">log_file: /var/wwwlog/saltstack/master.log</span><br><span class="line">key_logfile: /etc/<span class="literal">salt</span>/key</span><br><span class="line">nodegroups:</span><br><span class="line">  centos7: <span class="string">'L@centos7.10.0.2.222'</span></span><br><span class="line">  tool: <span class="string">'L@tserver.10.0.6.5,tclient.10.0.6.6'</span></span><br><span class="line">  all: <span class="string">'N@tool or N@centos7'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动salt-master</span></span><br><span class="line">$&gt; /etc/init.d/<span class="literal">salt</span>-master <span class="literal">start</span></span><br></pre></td></tr></table></figure>
<p>&emsp;按照nodegroups分组批量管理(新增nodegroups定义后<strong>不需要重启</strong>salt-master)<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&gt; salt –<span class="keyword">N</span> tool test.ping</span><br><span class="line"></span><br><span class="line">tclient<span class="number">.10</span><span class="number">.0</span><span class="number">.6</span><span class="number">.6</span>:</span><br><span class="line">    <span class="keyword">True</span></span><br><span class="line">tserver<span class="number">.10</span><span class="number">.0</span><span class="number">.6</span><span class="number">.5</span>:</span><br><span class="line">    <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p>
<h4 id="salt-minion_配置"><strong>salt-minion　配置</strong></h4><p>&emsp;默认配置文件：<strong>/etc/salt/minion</strong><br>&emsp;salt-minion的<strong><code>id</code></strong>比较重要，可用于salt-master指定nodegroups分组等用途。<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">master</span>: <span class="string">10.0.2.233</span></span><br><span class="line"><span class="attribute">id</span>: <span class="string">tserver.10.0.6.5</span></span><br><span class="line"><span class="attribute">log_file</span>: <span class="string">/var/wwwlog/saltstack/minion.log</span></span><br><span class="line"><span class="attribute">key_logfile</span>: <span class="string">/etc/salt/key</span></span><br><span class="line"></span><br><span class="line"><span class="puppet">$&gt; /etc/init.d/<span class="literal">salt</span>-minion <span class="literal">start</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="SaltStack_认证"><strong>SaltStack 认证</strong></h2><p>&emsp;皆在salt-master端</p>
<ul>
<li><p>查看</p>
  <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-<span class="variable">key</span> –L</span><br></pre></td></tr></table></figure>
</li>
<li><p>接受</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-key –<span class="tag">a</span> minion_id</span><br></pre></td></tr></table></figure>
</li>
<li><p>接受所有</p>
  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-key –<span class="literal">A</span></span><br></pre></td></tr></table></figure>
<p>  master设置自动接受所有：/etc/salt/master——<code>auto_accept: True</code></p>
</li>
</ul>
<ul>
<li><p>测试连通</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> test<span class="class">.ping</span></span><br><span class="line">salt <span class="string">'*'</span> test<span class="class">.ping</span> –t <span class="number">15</span>   (-t 设置超时时间)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Debug</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -<span class="keyword">N</span> tool <span class="keyword">test</span>.ping -v -<span class="keyword">l</span> all</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除minion</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-key <span class="operator">-d</span> minion_id</span><br></pre></td></tr></table></figure>
</li>
<li><p>认证过程</p>
<ol>
<li>minion在第一次启动时，会在/etc/salt/pki/minion/（该路径在/etc/salt/minion里面设置）下自动生成minion.pem(privatekey)和minion.pub(publickey)，然后将minion.pub发送给master。</li>
<li>master在接收到minion的publickey后，通过salt-key命令acceptminionpublickey，这样在master的/etc/salt/pki/master/minions下的将会存放以minionid命名的publickey,然后master就能对minion发送指令了。</li>
</ol>
</li>
</ul>
<h2 id="SaltStack_批量管理"><strong>SaltStack 批量管理</strong></h2><ul>
<li><p>远程执行命令</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> cmd<span class="class">.run</span> <span class="string">'bash --version'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>远程执行指定语言的命令</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#salt</span> ‘目标’ 执行语言 对应语言的代码</span><br><span class="line">salt <span class="string">'centos7.10.0.2.222'</span> cmd<span class="class">.exec_code</span> python <span class="string">'print "test"'</span></span><br><span class="line">salt <span class="string">'centos7.10.0.2.222'</span> cmd<span class="class">.exec_code</span> bash <span class="string">'echo "test"'</span></span><br><span class="line"></span><br><span class="line">centos7.<span class="number">10.0</span>.<span class="number">2.222</span>:</span><br><span class="line">   	test</span><br></pre></td></tr></table></figure>
</li>
<li><p>从master批量复制文件到minion<br>  &emsp;源文件目录可在master配置文件中指定，默认路径为<strong><code>/srv/salt/</code></strong>： </p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">file_roots:</span></span><br><span class="line"><span class="label">  base:</span></span><br><span class="line">    - <span class="regexp">/srv/</span>salt/</span><br></pre></td></tr></table></figure>
  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#必须指定到文件</span></span><br><span class="line"><span class="title">salt</span> <span class="string">'*'</span> cp.get_file <span class="url">salt://vimrc</span> /etc/vimrc</span><br></pre></td></tr></table></figure>
<p>  &emsp;或者直接用<strong><code>salt-cp</code></strong>命令</p>
  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-<span class="keyword">cp</span> -<span class="keyword">N</span> tool <span class="keyword">sh</span>/*.<span class="keyword">sh</span> /tmp/</span><br></pre></td></tr></table></figure>
</li>
<li><p>minion远程下载master脚本并执行<br>  &emsp;master端脚本存放路径：<strong>/srv/salt/scripts</strong>(<code>/srv/salt</code>同上的<code>file_roots</code>设置)<br>  &emsp;minion默认脚本存放路径：<strong>/var/cache/salt/minion/files/base/scripts/</strong></p>
  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt \* cmd.script <span class="keyword">sal</span><span class="variable">t:</span>//scripts/test.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="SaltStack_配置管理"><strong>SaltStack 配置管理</strong></h2><h3 id="top-sls"><strong>top.sls</strong></h3><p>&emsp;<strong><code>top.sls</code></strong>是配置管理的入口文件，若使用<strong><code>state.highstate</code></strong>则会根据<code>top.sls</code>的内容将<code>statefile</code>推送到salt-minion并执行；若是直接指定<code>statefile</code>则可不根据<code>top.sls</code>。在salt-master主机上，默认存放在<strong><code>/srv/salt/top.sls</code></strong>。 <code>(/etc/salt/master——file_roots)</code><br>&emsp;<strong><code>top.sls</code></strong>文件结构：</p>
<ul>
<li><code>base</code>：<code>top.sls</code>默认从<strong><code>base</code></strong>标签开始解析执行。</li>
<li><code>操作目标</code>：需要执行操作的salt-minion目标。可以通过<strong>正则</strong>、<strong>grain模块</strong>、<strong>分组名</strong>来进行匹配。</li>
<li><code>statefile</code>：需要执行的state文件。指定statefile不需要包含扩展名(<code>.sls</code>)，详见下节内容。</li>
</ul>
<p>&emsp;top.sls文件样例<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">base:</span><br><span class="line">  tool:         					#nodegroup分组名指定目标</span><br><span class="line">    -<span class="ruby"> <span class="symbol">match:</span> nodegroup              <span class="comment">#指定匹配类型为nodegroup</span></span><br><span class="line"></span>    -<span class="ruby"> statefile.apache            	<span class="comment">#state文件：/srv/salt/statefile/apache.sls</span></span><br><span class="line"></span></span><br><span class="line">  'centos7.10.0.2.222':				#直接指定minion_id目标</span><br><span class="line">    -<span class="ruby"> statefile.nginx</span><br><span class="line"></span></span><br><span class="line">  'os:CentOS':						#通过grain指定目标</span><br><span class="line">    -<span class="ruby"> <span class="symbol">match:</span> grain					<span class="comment">#指定匹配类型为grain</span></span><br><span class="line"></span>    -<span class="ruby"> statefile.git</span><br><span class="line"></span></span><br><span class="line">  '*':								#目标为所有minion</span><br><span class="line">    -<span class="ruby"> statefile.all</span></span><br></pre></td></tr></table></figure></p>
<h3 id="SLS文件——statefile"><strong>SLS文件——statefile</strong></h3><h4 id="SLS文件规则"><strong>SLS文件规则</strong></h4><ul>
<li>SLS文件的扩展名<code>.sls</code>被省略。 (例如：nginx.sls 变成 nginx)                                              </li>
<li>若有子目录，子目录都由一个点来表示.(例如 statefile/nginx.sls写成 statefile.nginx)</li>
<li>若子目录下存在<strong><code>init.sls</code></strong>文件，引用的时候仅指定该目录即可. (例如 statefile/init.sls 可以简称为 statefile）</li>
<li>若一个目录下同时存在<code>statefile.sls</code>和<code>statefile/init.sls</code>，那么 statefile/init.sls 将被忽略，SLS文件引用的statefile将只引用statefile.sls</li>
<li>缩进严格按照python标准，且不要用tab做缩进而应用空格！</li>
</ul>
<h4 id="实例分析"><strong>实例分析</strong></h4><p>&emsp;通过具体实例分析<strong>statefile</strong>(hexo会对markdown显示有些影响)</p>
<ol>
<li><p><strong>cmd.script</strong></p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cmdscript:</span></span><br><span class="line">  cmd.<span class="string">script:</span></span><br><span class="line">	- <span class="string">source:</span> <span class="string">salt:</span><span class="comment">//scripts/test.sh</span></span><br><span class="line">	- <span class="string">user:</span> root</span><br><span class="line">	- <span class="string">shell:</span> <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>
<ul>
<li><code>cmdscript</code>：ID标签定义</li>
<li><code>cmd.script</code>：使用saltstack的<code>cmd.script</code>模块<ul>
<li><code>source</code>： 指定master端脚本存放路径，minion从master上下载并执行。master上物理存放路径：<code>/srv/salt/scripts/test.sh</code></li>
<li><code>user</code>：指定执行脚本的用户</li>
<li><code>shell</code>：指定执行脚本的shell</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>cmd.run</strong></p>
 <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cmdrun:</span><br><span class="line">  cmd.run:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">cwd:</span> /tmp</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">name:</span> pwd;uptime</span><br><span class="line"></span></span><br><span class="line">cmdrun2:</span><br><span class="line">  cmd.run:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">cwd:</span> /tmp</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">names:</span></span><br><span class="line"></span>	  -<span class="ruby"> pwd</span><br><span class="line"></span>	  -<span class="ruby"> uptime</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>cmd.wait</strong></p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cmdwait:</span></span><br><span class="line">  cmd.<span class="string">wait:</span></span><br><span class="line">	- <span class="string">names:</span></span><br><span class="line">	  - <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx -t &amp;&amp; /</span>usr<span class="regexp">/local/</span>nginx<span class="regexp">/sbin/</span>nginx -s reload</span><br><span class="line">	- <span class="string">watch:</span></span><br><span class="line">	  - <span class="string">file:</span> <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf<span class="regexp">/vhosts/</span>cmdwait.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf<span class="regexp">/vhosts/</span>cmdwait.<span class="string">conf:</span></span><br><span class="line">  file.<span class="string">managed:</span></span><br><span class="line">	- <span class="string">source:</span> <span class="string">salt:</span><span class="comment">//configfile/cmdwait.conf</span></span><br><span class="line">	- <span class="string">backup:</span> minion</span><br></pre></td></tr></table></figure>
<ul>
<li><code>cmd.wait</code>：条件执行命令，满足条件后才执行<code>names</code>中的命令。</li>
<li><code>watch</code>：文件监控(监控文件是否存在或变化)，此处监控salt-minion上<code>file</code>指定的文件且作为<code>cmd.wait</code>的条件。</li>
<li><code>file.managed</code>：文件管理<ul>
<li><code>/usr/local/nginx/conf/vhosts/cmdwait.conf</code>：salt-minion上文件路径，同步来自salt-master上指定的文件。</li>
<li><code>source</code>：salt-master上的文件，如果此文件有变化推送SLS配置管理时会立即同步到salt-minion上。</li>
<li><code>backup</code>：指定salt-minion在同步文件前先备份原有文件，默认备份路径<strong><code>/var/cache/salt/minion/file_backup</code></strong></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Apache配置管理实例</strong><br> &emsp;若要使用<code>service</code>则需要有<code>/etc/init.d/httpd</code>脚本</p>
 <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">apache:</span><br><span class="line">  pkg:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">name:</span> httpd</span><br><span class="line"></span>	-<span class="ruby"> installed</span><br><span class="line"></span></span><br><span class="line">  service:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">name:</span> httpd</span><br><span class="line"></span>	-<span class="ruby"> running</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">enable:</span> <span class="constant">True</span></span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">reload:</span> <span class="constant">True</span></span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">watch:</span></span><br><span class="line"></span>	  -<span class="ruby"> <span class="symbol">file:</span> /etc/httpd/conf/httpd.conf</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">require:</span></span><br><span class="line"></span>	  -<span class="ruby"> <span class="symbol">pkg:</span> httpd</span><br><span class="line"></span><span class="comment"></span><br><span class="line">/etc/httpd/conf/httpd.conf:</span></span><br><span class="line">  file.managed:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">source:</span> <span class="symbol">salt:</span>/<span class="regexp">/configfile/httpd</span>.conf</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">backup:</span> minion</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>unless &amp; onlyif</strong><br> &emsp;unless——当命令执行返回’False’时，执行name里的命令；onlyif相反</p>
 <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apacheStart:</span><br><span class="line">  cmd.run:</span><br><span class="line">	- name: service httpd start</span><br><span class="line">	- <span class="keyword">unless</span>: ps aux|<span class="keyword">grep</span> httpd|<span class="keyword">grep</span> -v <span class="keyword">grep</span>|<span class="keyword">grep</span> -v <span class="string">'bash -c'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用saltstack批量配置vim</strong><br> &emsp;statefile：<code>/srv/salt/statefile/vimConfig.sls</code><br> &emsp;推送执行<code>vimConfig.sls</code>：<strong><code>salt -G os:CentOS state.sls statefile.vimConfig</code></strong></p>
 <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">vimInstall:</span><br><span class="line">  pkg.installed:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">names:</span></span><br><span class="line"></span>	  -<span class="ruby"> vim-enhanced</span><br><span class="line"></span>	  -<span class="ruby"> unzip</span><br><span class="line"></span></span><br><span class="line">vimDownload:</span><br><span class="line">  file.managed:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">name:</span> /home/work/software/<span class="constant">AutoConfigVim</span>.zip</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">source:</span> <span class="symbol">salt:</span>/<span class="regexp">/software/</span><span class="constant">AutoConfigVim</span>.zip</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">unless:</span> test -e /home/work/software/<span class="constant">AutoConfigVim</span>.zip</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">require:</span></span><br><span class="line"></span>	  -<span class="ruby"> <span class="symbol">pkg:</span> vimInstall</span><br><span class="line"></span></span><br><span class="line">vimUnzip:</span><br><span class="line">  cmd.run:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">cwd:</span> /home/work/software</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">name:</span> unzip -q <span class="constant">AutoConfigVim</span>.zip</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">unless:</span> test -e /home/work/software/<span class="constant">AutoConfigVim</span></span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">require:</span></span><br><span class="line"></span>	  -<span class="ruby"> <span class="symbol">file:</span> vimDownload</span><br><span class="line"></span></span><br><span class="line">vimScript:</span><br><span class="line">  cmd.run:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">cwd:</span> /home/work/software/<span class="constant">AutoConfigVim</span></span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">name:</span> bash <span class="constant">AutoConfigVim</span>.sh</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">onlyif:</span> test -e /home/work/software/<span class="constant">AutoConfigVim</span>/<span class="constant">AutoConfigVim</span>.sh</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">require:</span></span><br><span class="line"></span>	  -<span class="ruby"> <span class="symbol">cmd:</span> vimUnzip</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="推送执行SLS配置管理"><strong>推送执行SLS配置管理</strong></h4><ol>
<li><p>根据top.sls的内容，将<strong>全部</strong>statefile文件推送到指定minion并执行</p>
 <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt –<span class="keyword">N</span> tool state.highstate</span><br></pre></td></tr></table></figure>
</li>
<li><p>不根据top.sls，只将特定的statefile(<code>statefile/cmdscript.sls</code>)推送到指定minion并执行(<code>-v</code> 查看执行反馈)</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -N tool state<span class="class">.sls</span> statefile<span class="class">.cmdscript</span> –v</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="获取minion信息——grains_&amp;_pillar"><strong>获取minion信息——grains &amp; pillar</strong></h2><p>&emsp;<strong>grains</strong> 和 <strong>pillar</strong>都可用于获取minion的信息，但两者有很多不同的地方需要注意。</p>
<ul>
<li><p><strong>grains</strong></p>
<ol>
<li>minion每次启动时采集minion信息并向master汇报</li>
<li><strong>grains</strong>用于存储静态、不常变化的信息数据</li>
<li><strong>grains</strong>存储在minion本地</li>
<li>minion可对<strong>grains</strong>进行操作(新增、删除等)</li>
</ol>
</li>
<li><p><strong>pillar</strong></p>
<ol>
<li><strong>pillar</strong>用于存储敏感或常变化的信息数据</li>
<li><strong>pillar</strong>存储在master本地</li>
<li>minion只能对自己的<strong>pillar</strong>进行查询的权限，无法修改。</li>
</ol>
</li>
</ul>
<h4 id="grains"><strong>grains</strong></h4><ul>
<li><p>查看minion所有信息</p>
  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -N tool grains.<span class="keyword">items</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列出所有查看项目</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -<span class="keyword">N</span> tool grains.<span class="keyword">ls</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看特定项目</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -N tool grains<span class="class">.item</span> ipv4</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义信息项<br>  &emsp;<code>mkdir -p /srv/salt/_grains</code>目录下编写脚本，返回时必须为<strong>字典</strong>。<br>  &emsp;salt-master端：<strong><code>/srv/salt/_grains/getNginxVer.py</code></strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNginxVer</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="string">"""get minion nginx version"""</span></span><br><span class="line">	ngxver = &#123;&#125;</span><br><span class="line">	ngxV = commands.getoutput(<span class="string">'/usr/local/nginx/sbin/nginx -V'</span>)</span><br><span class="line">	ngxver[<span class="string">'nginxversion'</span>] = ngxV.split(<span class="string">'\n'</span>)[<span class="number">0</span>].split(<span class="string">'/'</span>)[-<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">return</span> ngxver</span><br></pre></td></tr></table></figure>
<p>  &emsp;自定义grains脚本同步到minion：会将_grains目录下的文件全部同步到minion</p>
  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt ‘<span class="keyword">*</span>’ saltutil.sync_grains</span><br></pre></td></tr></table></figure>
<p>  获取自定义grains信息项：</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt ‘*’ grains<span class="class">.item</span> nginxversion</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="pillar"><strong>pillar</strong></h4><ul>
<li><p>查看默认pillar</p>
  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">salt</span> -<span class="type">N</span> tool pillar.<span class="typedef"><span class="keyword">data</span></span></span><br></pre></td></tr></table></figure>
<p>  &emsp;默认pillar路径(pillar_roots)：<strong><code>/srv/pillar</code></strong><br>  &emsp;组织pillar文件、pillar入口文件：<strong><code>/srv/pillar/top.sls</code></strong><br>  &emsp;pillar和SLS一样拥有自己的<code>top.sls</code>文件，通过top.sls文件作为入口，组织其它的pillar文件。<br>  &emsp;自定义pillar待了解。</p>
</li>
</ul>
<h2 id="SaltStack_模块"><strong>SaltStack 模块</strong></h2><h4 id="系统模块"><strong>系统模块</strong></h4><p>&emsp;最新在线系统模块查询：<a href="http://docs.saltstack.com/en/latest/ref/modules/all/index.html" target="_blank" rel="external">saltstack系统模块</a><br>&emsp;命令查询在线doc：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt \<span class="keyword">*</span> sys.doc disk</span><br></pre></td></tr></table></figure></p>
<p>&emsp;系统模块如：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt ‘<span class="keyword">*</span>’ test.ping</span><br><span class="line">salt ‘<span class="keyword">*</span>’ disk.usage</span><br></pre></td></tr></table></figure></p>
<h4 id="自定义模块"><strong>自定义模块</strong></h4><ul>
<li><p>默认模块存放路径<br>  <strong><code>/srv/salt/_modules</code></strong></p>
</li>
<li><p>自定义模块样例——<strong><code>/srv/salt/_modules/custom.py</code></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'This is saltstack custom module test.'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同步自定义模块到minion<br>  &emsp;此操作会将master上<code>/srv/salt/_modules</code>目录下的所有目录及文件同步到minion上的<strong><code>/var/cache/salt/minion/files/base/_modules</code></strong>目录下。(包括隐藏文件)</p>
  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt \<span class="keyword">*</span> saltutil.sync_modules</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行自定义模块</p>
  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt \<span class="keyword">*</span> custom.test</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="自定义returners"><strong>自定义returners</strong></h4><ul>
<li><p>默认模块存放路径<br>  <strong><code>/srv/salt/_returners</code></strong></p>
</li>
<li><p>自定义returner样例——<strong><code>/srv/salt/_returners/writefile.py</code></strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__virtual__</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="string">"""调用时用的名字"""</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">"writefile"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">returner</span><span class="params">(result)</span>:</span></span><br><span class="line">	<span class="string">"""将minion的return写入到文件"""</span></span><br><span class="line">	fd = open(<span class="string">'/tmp/saltReturn.txt'</span>, <span class="string">'a+'</span>)</span><br><span class="line">	fd.write(str(result))</span><br><span class="line">	fd.close()</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步自定义returner</p>
  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt \<span class="keyword">*</span> saltutil.sync_returners</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用自定义returner：</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -<span class="keyword">N</span> centos7 cmd.<span class="keyword">run</span> 'uptime' --<span class="keyword">return</span> writefile</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="计划任务"><strong>计划任务</strong></h2><p>&emsp;默认情况下，时间参数都是<code>*</code>，执行用户是”root”，当修改一个当前存在的cron job，这个名字的声明<strong>必须是全局唯一的</strong>，否则会自动新增crontab job！<br>&emsp;如果cron的命令(name)被修改，只会新增cron job不会更新！！</p>
<p>定时任务样例——crontab.sls<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cronScriptFile:</span></span><br><span class="line">  file.<span class="string">managed:</span></span><br><span class="line">    - <span class="string">name:</span> <span class="regexp">/home/</span>work<span class="regexp">/script/</span>cron.sh</span><br><span class="line">    - <span class="string">source:</span> <span class="string">salt:</span><span class="comment">//scripts/cron.sh</span></span><br><span class="line"><span class="label"></span><br><span class="line">crontab20141020:</span></span><br><span class="line">  cron.<span class="string">present:</span></span><br><span class="line">    - <span class="string">name:</span> bash <span class="regexp">/home/</span>work<span class="regexp">/script/</span>cron.sh &gt;&gt; <span class="regexp">/dev/</span><span class="literal">null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    - <span class="string">user:</span> root</span><br><span class="line">    - <span class="string">minute:</span> random</span><br><span class="line">    - <span class="string">hour:</span> <span class="string">'*/2'</span></span><br><span class="line">    - <span class="string">require:</span></span><br><span class="line">      - <span class="string">file:</span> cronScriptFile</span><br></pre></td></tr></table></figure></p>
<h2 id="关于saltstack无返回信息的问题"><strong>关于saltstack无返回信息的问题</strong></h2><p>&emsp;saltstack用一段时间后发现一个非常严重的问题。当salt-master执行命令时，部分salt-minion并没有返回任何信息，无论是成功还是失败信息都没有。这导致无法确定salt-minion是否执行了命令还是返回信息丢失，这样的不可控性对Ops来说是个非常严重的问题。<br>&emsp;为解决此问题根据<strong>jid</strong>查看salt-minion的执行情况。当salt-master执行命令时加上<strong><code>-v</code></strong>参数，让其返回任务的<code>jid</code>。若有salt-minion没有返回信息则根据此<code>jid</code>查询任务结果<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$&gt; salt -v \* cmd.run <span class="emphasis">'echo "jid test"'</span></span><br><span class="line"><span class="header">Executing job with jid 20160225103117255324</span><br><span class="line">-------------------------------------------</span></span><br><span class="line">centos7.10.0.2.222:</span><br><span class="line"><span class="code">    jid test</span></span><br><span class="line">tserver.10.0.6.5:</span><br><span class="line"><span class="code">    jid test</span></span><br><span class="line">tclient.10.0.6.6:</span><br><span class="line"><span class="code">    jid test</span></span><br><span class="line"></span><br><span class="line">$&gt; salt-run jobs.lookup<span class="emphasis">_jid 20160225103117255324</span><br><span class="line">centos7.10.0.2.222:</span><br><span class="line">    jid test</span><br><span class="line">tclient.10.0.6.6:</span><br><span class="line">    jid test</span><br><span class="line">tserver.10.0.6.5:</span><br><span class="line">    jid test</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;假若管理的salt-minion达到一定数量，可使用<strong><code>--async</code></strong>参数<strong>异步</strong>执行命令，然后根据<code>jid</code>查询执行结果。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$&gt; salt --async \* cmd.<span class="keyword">run</span> 'echo <span class="string">"jid test"</span>'</span><br><span class="line">Executed command with job ID: 20160225104129665398</span><br><span class="line"></span><br><span class="line">$&gt; salt-<span class="keyword">run</span> jobs.lookup_jid 20160225104129665398</span><br><span class="line">centos7.10.0.2.222:</span><br><span class="line">    jid <span class="keyword">test</span></span><br><span class="line">tclient.10.0.6.6:</span><br><span class="line">    jid <span class="keyword">test</span></span><br><span class="line">tserver.10.0.6.5:</span><br><span class="line">    jid <span class="keyword">test</span></span><br></pre></td></tr></table></figure></p>
<h3 id="关于jid"><strong>关于jid</strong></h3><p>&emsp;salt-master每执行一次salt命令就会产生一个Job，每个Job会有一个唯一的<code>jid</code>。<br>&emsp;<strong><code>jid</code></strong>: job id, 格式为<code>%Y%m%d%H%M%S%f</code><br>&emsp;salt-master在下发指令消息时, 会附带上产⽣的jid. salt-minion接收到指令开始执⾏时, 会在本地cachedir(默认是<code>/var/cache/salt/minion/proc</code>)下以该jid命名产生⽂件,⽤于在执⾏过程中master查看当前任务的执⾏情况. 指令执⾏完毕将结果传送给master后并删除该临时⽂件⽂件。<br>&emsp;salt-master将salt-minion的执⾏结果存放在本地<strong><code>/var/cache/salt/master/jobs</code></strong>目录下, 默认缓存24⼩时(可通过修改master配置⽂件<strong><code>keep_jobs</code></strong>选项调整)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="SaltStack安装"><strong>SaltStack安装</strong></h2><p>&emsp;各Linux版本安装详见<a href="https://docs.saltstack.com/en/latest/topics/installation]]>
    </summary>
    
      <category term="saltstack" scheme="http://yoursite.com/tags/saltstack/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django Q对象]]></title>
    <link href="http://yoursite.com/2015/11/17/Django-Q-Object/"/>
    <id>http://yoursite.com/2015/11/17/Django-Q-Object/</id>
    <published>2015-11-17T08:13:06.000Z</published>
    <updated>2016-03-16T10:21:17.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;当我们使用Django查询数据库时，一般都是使用Django提供的方法。简单的数据库查询还能应付，但一旦要执行复杂查询时变无法满足要求，于是为满足用户的复杂查询需求Django提供了<strong>Q对象</strong>。</p>
<h3 id="基础环境说明"><strong>基础环境说明</strong></h3><p>&emsp;为了更方便的学习Q对象，使用Django Shell进行交互并事先创建了Model及插入了一些数据。</p>
<ul>
<li><p>Model——<strong><code>pc/models.py</code></strong></p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class <span class="function"><span class="title">pcInfo</span><span class="params">(models.Model)</span></span>:</span><br><span class="line">       <span class="string">""</span><span class="string">"Q对象练习"</span><span class="string">""</span></span><br><span class="line">       mac = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">30</span>)</span></span></span><br><span class="line">       port = models.<span class="function"><span class="title">IntegerField</span><span class="params">()</span></span></span><br><span class="line">       city = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">255</span>)</span></span></span><br><span class="line">       isp = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">255</span>)</span></span></span><br><span class="line">       ip = models.<span class="function"><span class="title">IPAddressField</span><span class="params">()</span></span></span><br><span class="line">       comment = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">255</span>, null=True)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>数据</p>
  <figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql pc&gt; SE<span class="class">LECT  * FROM pc_pcInfo;</span></span><br><span class="line">+------+-------------------+--------+-----------------+-------------------+-------------+--------------------+</span><br><span class="line">|   id | mac               |   port | city            | isp               | ip          | comment            |</span><br><span class="line">|------+-------------------+--------+-----------------+-------------------+-------------+--------------------|</span><br><span class="line">|    1 | 00-E0-4C-68-6C-82 |  50000 | 美国-夏威夷     | Hawaiian telcom   | 192.168.1.1 | 测试               |</span><br><span class="line">|    2 | 00-E0-4C-68-41-D6 |  30006 | 澳洲-悉尼       | 大马电信          | 192.168.1.2 | modifyMinipc<span class="instruction"> check </span>|</span><br><span class="line">|    3 | 00-E0-4C-68-6C-A1 |  50002 | 马来西亚-吉隆坡 | Optus             | 192.168.1.3 | modifyMinipc<span class="instruction"> check </span>|</span><br><span class="line">|    4 | 00-E0-4C-68-5A-F2 |  30008 | 英国-伯明翰     | Virgin Media      | 192.168.1.4 |                    |</span><br><span class="line">|    5 | 00-E0-4C-68-5A-FE |  30005 | 澳洲-墨尔本     | TPG Internet      | 192.168.1.5 |                    |</span><br><span class="line">|    6 | 00-E0-4C-68-41-D4 |  30002 | 美国-拉斯维加斯 | Cox Communication | 192.168.1.6 |<span class="instruction"> check </span>             |</span><br><span class="line">|    7 | 00-E0-4C-68-6C-A4 |  40001 | 匈牙利          | UPC Hungary       | 192.168.1.7 | test               |</span><br><span class="line">|    8 | 00-E0-4C-68-6C-A7 |  40004 | 澳洲-帕斯       | TPG Internet      | 192.168.1.8 | modifyMinipc       |</span><br><span class="line">+------+-------------------+--------+-----------------+-------------------+-------------+--------------------+</span><br><span class="line">8 rows in set</span><br></pre></td></tr></table></figure>
</li>
<li><p>Django Shell</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; python manage<span class="class">.py</span> shell</span><br><span class="line">&gt;&gt;&gt; from pc<span class="class">.models</span> import pcInfo</span><br><span class="line">&gt;&gt;&gt; from django<span class="class">.db</span><span class="class">.models</span> import Q</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="基本查询"><strong>基本查询</strong></h3><p>&emsp;Q对象也能进行普通的查询<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用普通Django objects.filter()方法</span></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>result=pcInfo.objects.filter(ip__contains=<span class="string">'192.168.1.1'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> result[<span class="number">0</span>].__dict__</span><br><span class="line">&#123;<span class="string">'comment'</span>: <span class="string">u' \u6d4b\u8bd5'</span>, <span class="string">'city'</span>: <span class="string">u'\u7f8e\u56fd-\u590f\u5a01\u5937'</span>, <span class="string">'ip'</span>: <span class="string">u'192.168.1.1'</span>, <span class="string">'isp'</span>: <span class="string">u'Hawaiian telcom'</span>, <span class="string">'_state'</span>: &lt;django.db.models.base.ModelState object at <span class="number">0xb532380c</span>&gt;, <span class="string">'port'</span>: <span class="number">50000L</span>, <span class="string">'mac'</span>: <span class="string">u'00-E0-4C-68-6C-82'</span>, <span class="string">'id'</span>: <span class="number">1L</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用Q对象</span></span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>result=pcInfo.objects.filter(Q(ip__contains=<span class="string">'192.168.1.1'</span>))</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">print</span> result[<span class="number">0</span>].__dict__</span><br><span class="line">&#123;<span class="string">'comment'</span>: <span class="string">u' \u6d4b\u8bd5'</span>, <span class="string">'city'</span>: <span class="string">u'\u7f8e\u56fd-\u590f\u5a01\u5937'</span>, <span class="string">'ip'</span>: <span class="string">u'192.168.1.1'</span>, <span class="string">'isp'</span>: <span class="string">u'Hawaiian telcom'</span>, <span class="string">'_state'</span>: &lt;django.db.models.base.ModelState object at <span class="number">0xb533296c</span>&gt;, <span class="string">'port'</span>: <span class="number">50000L</span>, <span class="string">'mac'</span>: <span class="string">u'00-E0-4C-68-6C-82'</span>, <span class="string">'id'</span>: <span class="number">1L</span>&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="AND查询"><strong>AND查询</strong></h4><p>&emsp;<strong>AND查询</strong>有两种写法：1. <code>Q(...) &amp; Q(...)</code>；2. <code>Q(...), Q(...)</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pcInfo<span class="class">.objects</span><span class="class">.filter</span>(<span class="function"><span class="title">Q</span><span class="params">(ip=<span class="string">'192.168.1.1'</span>)</span></span> &amp; <span class="function"><span class="title">Q</span><span class="params">(port=<span class="number">50001</span>)</span></span>)</span><br><span class="line">&gt;&gt;&gt; []</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pcInfo<span class="class">.objects</span><span class="class">.filter</span>(<span class="function"><span class="title">Q</span><span class="params">(ip=<span class="string">'192.168.1.1'</span>)</span></span>, <span class="function"><span class="title">Q</span><span class="params">(port=<span class="number">50001</span>)</span></span>)</span><br><span class="line">&gt;&gt;&gt; []</span><br></pre></td></tr></table></figure></p>
<h4 id="OR查询"><strong>OR查询</strong></h4><p>&emsp;<strong>OR查询</strong>使用<strong><code>|</code></strong><br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; pcInfo.objects.filter(Q(ip='<span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>') | Q(port=<span class="number">40004</span>))</span><br><span class="line">&gt;&gt;&gt; <span class="annotation">[&lt;pcInfo: pcInfo object&gt;, &lt;pcInfo: pcInfo object&gt;]</span></span><br></pre></td></tr></table></figure></p>
<h4 id="AND_OR_复杂查询"><strong>AND OR 复杂查询</strong></h4><p>&emsp;实现<strong><code>(A OR B) AND C</code></strong><br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; pcInfo.objects.filter( (<span class="constant">Q</span>(ip=<span class="string">'192.168.1.5'</span>) | <span class="constant">Q</span>(port=<span class="number">30002</span>)) &amp; <span class="constant">Q</span>(port__contains=<span class="number">300</span>) )</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; [&lt;<span class="symbol">pcInfo:</span> pcInfo object&gt;, &lt;<span class="symbol">pcInfo:</span> pcInfo object&gt;]</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; result=pcInfo.objects.filter( (<span class="constant">Q</span>(ip=<span class="string">'192.168.1.5'</span>) | <span class="constant">Q</span>(port=<span class="number">30002</span>)) &amp; <span class="constant">Q</span>(port__contains=<span class="number">300</span>) )</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print result[<span class="number">0</span>].__dict_<span class="number">_</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt;t<span class="string">': u'</span><span class="string">', '</span>city<span class="string">': u'</span>\u6fb3\u6d32-\u58a8\u5c14\u672c<span class="string">', '</span>ip<span class="string">': u'</span><span class="number">192.168</span>.<span class="number">1.5</span><span class="string">', '</span>isp<span class="string">': u'</span><span class="constant">TPG</span> <span class="constant">Internet</span><span class="string">', '</span>_state<span class="string">': &lt;django.db.models.base.ModelState object at 0xb5323a4c&gt;, '</span>port<span class="string">': 30005L, '</span>mac<span class="string">': u'</span><span class="number">00</span>-<span class="constant">E0</span>-<span class="number">4</span>C-<span class="number">68</span>-<span class="number">5</span>A-<span class="constant">FE</span><span class="string">', '</span>id<span class="string">': 5L&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print result[1].__dict__</span><br><span class="line">&#123;'</span>comment<span class="string">': u'</span>check<span class="string">', '</span>city<span class="string">': u'</span>\u7f8e\u56fd-\u62c9\u65af\u7ef4\u52a<span class="number">0</span>\u65af<span class="string">', '</span>ip<span class="string">': u'</span><span class="number">192.168</span>.<span class="number">1.6</span><span class="string">', '</span>isp<span class="string">': u'</span><span class="constant">Cox</span> <span class="constant">Communication</span><span class="string">', '</span>_state<span class="string">': &lt;django.db.models.base.ModelState object at 0xb5339f2c&gt;, '</span>port<span class="string">': 30002L, '</span>mac<span class="string">': u'</span><span class="number">00</span>-<span class="constant">E0</span>-<span class="number">4</span>C-<span class="number">68</span>-<span class="number">41</span>-<span class="constant">D4</span><span class="string">', '</span>id<span class="string">': 6L&#125;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="NOT查询"><strong>NOT查询</strong></h4><p>&emsp;<strong>NOT查询</strong>使用<strong><code>~Q()</code></strong>实现<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;</span>&gt; pcInfo.objects.filter(~(<span class="constant">Q</span>(port__contains=<span class="number">3000</span>) | <span class="constant">Q</span>(port__contains=<span class="number">4000</span>)))</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; [&lt;<span class="symbol">pcInfo:</span> pcInfo object&gt;, &lt;<span class="symbol">pcInfo:</span> pcInfo object&gt;]</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; result=pcInfo.objects.filter(~(<span class="constant">Q</span>(port__contains=<span class="number">3000</span>) | <span class="constant">Q</span>(port__contains=<span class="number">4000</span>)))</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print result[<span class="number">0</span>].__dict_<span class="number">_</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt;t<span class="string">': u'</span> \u6d4b\u8bd5<span class="string">', '</span>city<span class="string">': u'</span>\u7f8e\u56fd-\u590f\u5a01\u5937<span class="string">', '</span>ip<span class="string">': u'</span><span class="number">192.168</span>.<span class="number">1.1</span><span class="string">', '</span>isp<span class="string">': u'</span><span class="constant">Hawaiian</span> telcom<span class="string">', '</span>_state<span class="string">': &lt;django.db.models.base.ModelState object at 0xb5338aac&gt;, '</span>port<span class="string">': 50000L, '</span>mac<span class="string">': u'</span><span class="number">00</span>-<span class="constant">E0</span>-<span class="number">4</span>C-<span class="number">68</span>-<span class="number">6</span>C-<span class="number">82</span><span class="string">', '</span>id<span class="string">': 1L&#125;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print result[1].__dict__</span><br><span class="line">&#123;'</span>comment<span class="string">': u'</span>modifyMinipc check<span class="string">', '</span>city<span class="string">': u'</span>\u9a6c\u6765\u897f\u4e9a-\u5409\u9686\u5761<span class="string">', '</span>ip<span class="string">': u'</span><span class="number">192.168</span>.<span class="number">1.3</span><span class="string">', '</span>isp<span class="string">': u'</span><span class="constant">Optus</span><span class="string">', '</span>_state<span class="string">': &lt;django.db.models.base.ModelState object at 0xb5338c4c&gt;, '</span>port<span class="string">': 50002L, '</span>mac<span class="string">': u'</span><span class="number">00</span>-<span class="constant">E0</span>-<span class="number">4</span>C-<span class="number">68</span>-<span class="number">6</span>C-<span class="constant">A1</span><span class="string">', '</span>id<span class="string">': 3L&#125;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="动态构建查询条件"><strong>动态构建查询条件</strong></h3><p>&emsp;若查询条件是动态构建的，则需要先创建<strong>Q对象列表</strong>，然后使用<strong><code>operator</code></strong>和<strong><code>reduce</code></strong>将<strong>Q对象列表</strong>组合起来。</p>
<h4 id="基本使用"><strong>基本使用</strong></h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import operator</span><br><span class="line"></span><br><span class="line">#创建Q对象列表</span><br><span class="line">&gt;&gt;&gt; q_list = [<span class="function"><span class="title">Q</span><span class="params">(ip=<span class="string">'192.168.1.1'</span>)</span></span>, <span class="function"><span class="title">Q</span><span class="params">(port=<span class="number">40004</span>)</span></span>]</span><br><span class="line"></span><br><span class="line">#AND查询</span><br><span class="line">&gt;&gt;&gt; pcInfo<span class="class">.objects</span><span class="class">.filter</span>(<span class="function"><span class="title">reduce</span><span class="params">(operator.and_, q_list)</span></span>)</span><br><span class="line">&gt;&gt;&gt; []</span><br><span class="line"></span><br><span class="line">#OR查询</span><br><span class="line">&gt;&gt;&gt; pcInfo<span class="class">.objects</span><span class="class">.filter</span>(<span class="function"><span class="title">reduce</span><span class="params">(operator.or_, q_list)</span></span>)</span><br><span class="line">&gt;&gt;&gt; [&lt;pcInfo: pcInfo object&gt;, &lt;pcInfo: pcInfo object&gt;]</span><br></pre></td></tr></table></figure>
<h4 id="动态添加查询条件"><strong>动态添加查询条件</strong></h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; query = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加查询条件</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; query.append((<span class="string">'ip'</span>, <span class="string">'192.168.1.1'</span>))</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; query.append((<span class="string">'port'</span>, <span class="number">40004</span>))</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; query.append((<span class="string">'port'</span>, <span class="number">30002</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建Q对象列表</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; q_list = [<span class="constant">Q</span>(x) for x in query]</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print q_list[<span class="number">0</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt;ip<span class="string">', '</span><span class="number">192.168</span>.<span class="number">1.1</span><span class="string">'))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; print q_list[1]</span><br><span class="line">&gt;&gt;&gt;port'</span>, <span class="number">40004</span>))</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print q_list[<span class="number">2</span>]</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt;port<span class="string">', 30002))</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; pcInfo.objects.filter(reduce(operator.or_, q_list))</span><br><span class="line">&gt;&gt;&gt; [&lt;pcInfo: pcInfo object&gt;, &lt;pcInfo: pcInfo object&gt;, &lt;pcInfo: pcInfo object&gt;]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; result=pcInfo.objects.filter(reduce(operator.or_, q_list))</span><br><span class="line">&gt;&gt;&gt; print result[0].__dict__</span><br><span class="line">&gt;&gt;&gt;t'</span><span class="symbol">:</span> u<span class="string">' \u6d4b\u8bd5'</span>, <span class="string">'city'</span><span class="symbol">:</span> u<span class="string">'\u7f8e\u56fd-\u590f\u5a01\u5937'</span>, <span class="string">'ip'</span><span class="symbol">:</span> u<span class="string">'192.168.1.1'</span>, <span class="string">'isp'</span><span class="symbol">:</span> u<span class="string">'Hawaiian telcom'</span>, <span class="string">'_state'</span><span class="symbol">:</span> &lt;django.db.models.base.<span class="constant">ModelState</span> object at <span class="number">0xb533ab6c</span>&gt;, <span class="string">'port'</span><span class="symbol">:</span> <span class="number">50000</span>L, <span class="string">'mac'</span><span class="symbol">:</span> u<span class="string">'00-E0-4C-68-6C-82'</span>, <span class="string">'id'</span><span class="symbol">:</span> <span class="number">1</span>L&#125;</span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt; print result[<span class="number">1</span>].__dict_<span class="number">_</span></span><br><span class="line"><span class="prompt">&gt;&gt;</span>&gt;t<span class="string">': u'</span>check<span class="string">', '</span>city<span class="string">': u'</span>\u7f8e\u56fd-\u62c9\u65af\u7ef4\u52a<span class="number">0</span>\u65af<span class="string">', '</span>ip<span class="string">': u'</span><span class="number">192.168</span>.<span class="number">1.6</span><span class="string">', '</span>isp<span class="string">': u'</span><span class="constant">Cox</span> <span class="constant">Communication</span><span class="string">', '</span>_state<span class="string">': &lt;django.db.models.base.ModelState object at 0xb533a18c&gt;, '</span>port<span class="string">': 30002L, '</span>mac<span class="string">': u'</span><span class="number">00</span>-<span class="constant">E0</span>-<span class="number">4</span>C-<span class="number">68</span>-<span class="number">41</span>-<span class="constant">D4</span><span class="string">', '</span>id<span class="string">': 6L&#125;</span><br><span class="line">&gt;&gt;&gt; print result[2].__dict__</span><br><span class="line">&#123;'</span>comment<span class="string">': u'</span>modifyMinipc<span class="string">', '</span>city<span class="string">': u'</span>\u6fb3\u6d32-\u5e15\u65af<span class="string">', '</span>ip<span class="string">': u'</span><span class="number">192.168</span>.<span class="number">1.8</span><span class="string">', '</span>isp<span class="string">': u'</span><span class="constant">TPG</span> <span class="constant">Internet</span><span class="string">', '</span>_state<span class="string">': &lt;django.db.models.base.ModelState object at 0xb533a6ec&gt;, '</span>port<span class="string">': 40004L, '</span>mac<span class="string">': u'</span><span class="number">00</span>-<span class="constant">E0</span>-<span class="number">4</span>C-<span class="number">68</span>-<span class="number">6</span>C-<span class="constant">A7</span><span class="string">', '</span>id<span class="string">': 8L&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考文章"><strong>参考文章</strong></h2><p><a href="http://www.michelepasin.org/blog/2010/07/20/the-power-of-djangos-q-objects/" target="_blank" rel="external">The power of django’s Q objects</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;当我们使用Django查询数据库时，一般都是使用Django提供的方法。简单的数据库查询还能应付，但一旦要执行复杂查询时变无法满足要求，于是为满足用户的复杂查询需求Django提供了<strong>Q对象</strong>。</p>
<h3 id="基础环境说明]]>
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django残作记]]></title>
    <link href="http://yoursite.com/2015/11/16/Django-works/"/>
    <id>http://yoursite.com/2015/11/16/Django-works/</id>
    <published>2015-11-16T14:55:53.000Z</published>
    <updated>2016-03-15T16:15:00.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;最近在整理电脑里的资料时发现了这个未完成的作品，虽然半路停了但毕竟是第一次写所以还是决定写篇博文纪念一下那些埋头的日夜。<br>&emsp;话还要从看完<a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="external">The Django Book</a>说起，当看完The Django Book后寻思要利用Django做些什么。经过考虑后，决定尝试着自己写一个日志分析展示系统。当初的考虑是Fluentd采集日志，然后存入MongoDB专门用于存日志的一种集合，后台运行Python的统计程序将统计结果存到MongoDB中，最后由Django进行数据的可视化展示。<br>&emsp;为了完成这个练习作品，还特意跑去了解前端方面的知识(HTML/CSS/jQuety/Bootstrap)，入门的时候最难毫无头绪而且身边也没有懂前端的人，只能是边Google边学边用，最终勉强能应付。不过就在写着的过程中，突然发现有<strong>ELK</strong>这个日志分析可视化开源方案，粗略了解后发觉功能还是挺完善的。虽然公司有个日志平台，但相比之下过于简陋，于是打算提议引入ELK这个系统，为此我就立马跑去研究起ELK而这个练习作品也就搁置了。目前公司已使用起ELK系统，文档还在整理，待整理完毕后发篇博文记录。<br>&emsp;以下是展示时间，毕竟是第一次写而且前端后端都弄还是挺累人的，就凑合看吧【摊手。。。</p>
<ul>
<li><p>登录界面<br>  &emsp;登录页面是根据国外的一个教程网站上的页面改的。</p>
  <center><br>  <img src="http://7xk64o.com1.z0.glb.clouddn.com/Django_Works_Login.jpeg" alt="Django_Works_Login.jpeg"><br>  </center>
</li>
<li><p>用户管理</p>
  <center><br>  <img src="http://7xk64o.com1.z0.glb.clouddn.com/Django_Works_user1.jpeg" alt="Django_Works_user1.jpeg"><br>  </center>
</li>
<li><p>添加用户</p>
  <center><br>  <img src="http://7xk64o.com1.z0.glb.clouddn.com/Django_Works_user2.jpeg" alt="Django_Works_user2.jpeg"><br>  </center>
</li>
<li><p>highcharts<br>  &emsp;为了展示日志数据，还专门去研究了一下highcharts。</p>
  <center><br>  <img src="http://7xk64o.com1.z0.glb.clouddn.com/Django_Works_highcharts.jpeg" alt="Django_Works_highcharts.jpeg"><br>  </center>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;最近在整理电脑里的资料时发现了这个未完成的作品，虽然半路停了但毕竟是第一次写所以还是决定写篇博文纪念一下那些埋头的日夜。<br>&emsp;话还要从看完<a href="http://djangobook.py3k.cn/2.0/" target="_blank]]>
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django Book笔记]]></title>
    <link href="http://yoursite.com/2015/11/15/Django-Book/"/>
    <id>http://yoursite.com/2015/11/15/Django-Book/</id>
    <published>2015-11-15T01:49:04.000Z</published>
    <updated>2016-03-15T09:04:26.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;最近在整理之前的笔记，这是之前自学Django时记录的，梳理以备查阅。教程看的是<a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="external">The Django Book中文版</a></p>
<h2 id="安装"><strong>安装</strong></h2><p>&emsp;基本环境</p>
<ul>
<li>Ubuntu14.04 LTS</li>
<li>Django1.7.1</li>
<li>Python2.7.6</li>
</ul>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; pip <span class="keyword">install</span> Django==<span class="number">1.7</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="开始项目"><strong>开始项目</strong></h2><h3 id="创建项目"><strong>创建项目</strong></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$&gt; django-admin<span class="class">.py</span> startproject <span class="function"><span class="title">mysite</span><span class="params">(项目名)</span></span>  </span><br><span class="line"></span><br><span class="line">新建目录结构</span><br><span class="line"> mysite/</span><br><span class="line">	 manage<span class="class">.py</span></span><br><span class="line">	 mysite/</span><br><span class="line">		 __init__<span class="class">.py</span></span><br><span class="line">		 settings<span class="class">.py</span></span><br><span class="line">		 urls<span class="class">.py</span></span><br><span class="line">		 wsgi.py</span><br></pre></td></tr></table></figure>
<ul>
<li><strong><strong>init</strong>.py</strong> ：让 Python 把该目录当成一个开发包 (即一组模块)所需的文件。 这是一个空文件，一般你不需要修改它。</li>
<li><strong>manage.py</strong> ：一种命令行工具，允许你以多种方式与该 Django 项目进行交互。 键入python manage.py help，看一下它能做什么。 你应当不需要编辑这个文件；在这个目录下生成它纯是为了方便</li>
<li><p><strong>settings.py</strong> ：该 Django 项目的设置或配置。 查看并理解这个文件中可用的设置类型及其默认值。</p>
  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改配置项：</span></span><br><span class="line">  <span class="title">LANGUAGE_CODE</span> = <span class="string">'zh-cn'</span></span><br><span class="line">  TIME_ZONE = <span class="string">'Asia/Shanghai'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>urls.py</strong>：Django项目的URL设置。 可视其为你的django网站的目录。 目前，它是空的。</p>
</li>
<li><strong>wsgi.py</strong>：Django工程入口</li>
</ul>
<h3 id="启动开发Web服务器"><strong>启动开发Web服务器</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#首次启动先执行</span></span><br><span class="line"><span class="variable">$&gt;</span> python manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动Web服务器</span></span><br><span class="line"><span class="variable">$&gt;</span> python manage.py runserver <span class="symbol">ip:</span>port</span><br></pre></td></tr></table></figure>
<h2 id="视图——View_&amp;_URLconf"><strong>视图——View &amp; URLconf</strong></h2><h3 id="视图"><strong>视图</strong></h3><p>&emsp;创建视图文件：<strong><code>mysite/mysite/views.py</code></strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment">#视图函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">"Hello world"</span>)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;每个视图函数至少要有一个参数，通常被叫作request。 这是一个触发这个视图、包含当前Web请求信息的对象，是类django.http.HttpRequest的一个实例。在这个示例中，我们虽然不用request做任何事情，然而它仍必须是这个视图的第一个参数。</p>
<h3 id="URLconf"><strong>URLconf</strong></h3><p>&emsp;URLconf是为了绑定视图函数和URL，当使用<code>django-admin.py startproject</code>创建项目时，该脚本会自动创建一份 URLconf(即<strong><code>urls.py</code></strong>)<br>&emsp;在添加URLconf前，需要告知Django URLconf的根目录路径。<strong><code>mysite/settings.py</code></strong>中添加<strong><code>ROOT_URLCONF = &#39;mysite.urls&#39;</code></strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls.defaults <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> mysite.views <span class="keyword">import</span> hello               #<span class="keyword">import</span>视图函数</span><br><span class="line"></span><br><span class="line">urlpatterns = patterns(<span class="string">''</span>,</span><br><span class="line">	(<span class="string">'^hello/$'</span>, hello),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<h3 id="Django处理请求过程"><strong>Django处理请求过程</strong></h3><ul>
<li>进来的请求转入/hello/</li>
<li>Django通过mysite/settings.py里的ROOT_URLCONF配置来决定根URLconf.</li>
<li>Django在URLconf中的所有URL模式中，查找第一个匹配/hello/的条目。</li>
<li>如果找到匹配，将调用相应的视图函数(mysite/views.py里的函数)</li>
<li>视图函数返回一个HttpResponse</li>
<li>Django转换HttpResponse为一个适合的HTTP response， 以Web page显示出来(带有HTTP头和body的Web Response)</li>
</ul>
<h2 id="模板——template"><strong>模板——template</strong></h2><p>&emsp;模板是Django中页面展示部分，包含HTML/CSS/JS等内容。<br>&emsp;在<strong><code>mysite/settings.py</code></strong>中指定模板路径<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">BASE_DIR = os<span class="class">.path</span><span class="class">.dirname</span>(os<span class="class">.path</span><span class="class">.dirname</span>(__file__))</span><br><span class="line">TEMPLATE_DIRS = (</span><br><span class="line">	os<span class="class">.path</span><span class="class">.join</span>(BASE_DIR, <span class="string">'templates'</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<h3 id="完整Django开发流程"><strong>完整Django开发流程</strong></h3><ul>
<li><p>编写模板文件<br>  &emsp;在项目文件夹下创建模板文件夹：<strong><code>mysite/templates</code></strong></p>
  <figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	It is now </span><span class="expression">&#123;&#123;<span class="variable">nowTime</span>&#125;&#125;</span><span class="xml">.</span><br><span class="line"> <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建视图函数<br>  &emsp;在<strong><code>mysite/views.py</code></strong>中创建视图函数。此为最基础的方法</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">from django<span class="class">.template</span><span class="class">.loader</span> import get_template</span><br><span class="line">from django<span class="class">.template</span> import Context</span><br><span class="line"></span><br><span class="line">def <span class="function"><span class="title">hourTemplate</span><span class="params">(request)</span></span>:</span><br><span class="line">   now = datetime<span class="class">.datetime</span><span class="class">.now</span>()</span><br><span class="line">   temp = <span class="function"><span class="title">get_template</span><span class="params">(<span class="string">'hourTemplate.html'</span>)</span></span>     #创建template对象</span><br><span class="line">   <span class="tag">html</span> = temp.<span class="function"><span class="title">render</span><span class="params">(Context(&#123;<span class="string">'nowTime'</span>: now&#125;)</span></span>)     #创建Context和调用<span class="function"><span class="title">render</span><span class="params">()</span></span>方法</span><br><span class="line">   return <span class="function"><span class="title">HttpResponse</span><span class="params">(html)</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>快捷调用模板：render_to_response<br> &emsp;在视图函数中可以使用快捷调用模板的函数<strong>render_to_response</strong>，此方法较为常用。</p>
 <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">hourTemplate</span><span class="params">(request)</span>:</span></span><br><span class="line">           now = datetime.datetime.now()</span><br><span class="line">           <span class="keyword">return</span> render_to_response(<span class="string">'hourTemplate.html'</span>, &#123;<span class="string">'nowTime'</span>: now&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置URL<br>  &emsp;在<strong><code>mysite/urls.py</code></strong>中添加URLconf</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysite.views <span class="keyword">import</span> hourTemplate</span><br><span class="line">   urlpatterns = patterns(</span><br><span class="line">		<span class="string">''</span>,</span><br><span class="line">		(<span class="string">r'^hourTemplate/$'</span>, hourTemplate),</span><br><span class="line">   ）</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="模板继承"><strong>模板继承</strong></h3><p>&emsp;模板还能使用<strong>标签</strong>(<code>if/else</code>、<code>for</code>、<code>ifequal/ifnotequal</code>)，具体详见<a href="http://djangobook.py3k.cn/2.0/chapter04/" target="_blank" rel="external">The Django Book 第四章</a><br>&emsp;模板还有一个非常重要的功能：<strong>模板继承</strong>，为了减少共用页面所引起的重复和冗余代码，Django解决此问题的首选方法是使用模板继承。下面通过一个实例加以说明。<br>&emsp;模板目录下有三个模板文件<strong><code>templates/base.html、now.html、later.html</code></strong></p>
<ul>
<li><p>base.html——基础模板，每个<code>block name</code>必须唯一</p>
  <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">title</span>&gt;</span></span><span class="template_tag">&#123;% <span class="keyword">block</span> title %&#125;</span><span class="xml"></span><span class="template_tag">&#123;% <span class="keyword">endblock</span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">div</span> <span class="attribute">align</span>=<span class="value">'center'</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">id</span>=<span class="value">"content1"</span>&gt;</span>Template Inherit<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">                </span><span class="template_tag">&#123;% <span class="keyword">block</span> content %&#125;</span><span class="xml"></span><span class="template_tag">&#123;% <span class="keyword">endblock</span> %&#125;</span><span class="xml"></span><br><span class="line">                </span><span class="template_tag">&#123;% <span class="keyword">block</span> footer %&#125;</span><span class="xml"></span><br><span class="line">                    <span class="tag">&lt;<span class="title">hr</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="title">p</span>&gt;</span>Thank for visitting my website<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">                </span><span class="template_tag">&#123;% <span class="keyword">endblock</span> %&#125;</span><span class="xml"></span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>now.html</p>
  <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template_tag">&#123;% <span class="keyword">extends</span> 'base.html' %&#125;</span><span class="xml"></span><br><span class="line"></span><br><span class="line"></span><span class="template_tag">&#123;% <span class="keyword">block</span> title %&#125;</span><span class="xml">This is now.html</span><span class="template_tag">&#123;% <span class="keyword">endblock</span> %&#125;</span><span class="xml"></span><br><span class="line"></span><span class="template_tag">&#123;% <span class="keyword">block</span> content %&#125;</span><span class="xml"></span><br><span class="line">	<span class="tag">&lt;<span class="title">p</span>&gt;</span>Now time is </span><span class="variable">&#123;&#123; nowTime &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><span class="template_tag">&#123;% <span class="keyword">endblock</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>later.html</p>
  <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template_tag">&#123;% <span class="keyword">extends</span> 'base.html' %&#125;</span><span class="xml"></span><br><span class="line"></span><br><span class="line"></span><span class="template_tag">&#123;% <span class="keyword">block</span> title %&#125;</span><span class="xml">This is later.html</span><span class="template_tag">&#123;% <span class="keyword">endblock</span> %&#125;</span><span class="xml"></span><br><span class="line"></span><span class="template_tag">&#123;% <span class="keyword">block</span> content %&#125;</span><span class="xml"></span><br><span class="line">	<span class="tag">&lt;<span class="title">p</span>&gt;</span>In </span><span class="variable">&#123;&#123; hours &#125;&#125;</span><span class="xml"> hour(s) later, it will be </span><span class="variable">&#123;&#123; laterTime &#125;&#125;</span><span class="xml"> <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span><span class="template_tag">&#123;% <span class="keyword">endblock</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>视图函数——mysite/views.py</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">now</span><span class="params">(request)</span>:</span></span><br><span class="line"><span class="string">"""template inherit now"""</span></span><br><span class="line">now = datetime.datetime.now()</span><br><span class="line"><span class="keyword">return</span> render_to_response(<span class="string">'now.html'</span>, &#123;<span class="string">'nowTime'</span>: now&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">later</span><span class="params">(request, hourNum)</span>:</span></span><br><span class="line"><span class="string">"""template inherit later"""</span></span><br><span class="line"><span class="keyword">try</span>: </span><br><span class="line">	hours = int(hourNum)</span><br><span class="line"><span class="keyword">except</span> Exception, e:</span><br><span class="line">	<span class="keyword">return</span> Http404, e</span><br><span class="line">hourLater = datetime.datetime.now() + datetime.timedelta(hours=hours)</span><br><span class="line"><span class="keyword">return</span> render_to_response(<span class="string">'later.html'</span>, &#123;<span class="string">'hours'</span>: hours, <span class="string">'laterTime'</span>: hourLater&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>URLconf配置</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = patterns(<span class="string">''</span>, </span><br><span class="line">		url(<span class="string">r'^now/$'</span>, now),</span><br><span class="line">		url(<span class="string">r'^later/(\d&#123;1,2&#125;)/$'</span>, later),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="模型"><strong>模型</strong></h2><p>&emsp;Django若需要与数据库交互则使用<strong>模型Model</strong>。模型负责数据库层面，app才可使用模型，project不行，所以需要先创建app。</p>
<h3 id="创建app"><strong>创建app</strong></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&gt; python manage<span class="class">.py</span> startapp appname</span><br><span class="line"></span><br><span class="line">app目录结构：</span><br><span class="line">	books/</span><br><span class="line">		 models<span class="class">.py</span></span><br><span class="line">		 migrations/</span><br><span class="line">			__init__<span class="class">.py</span></span><br><span class="line">		 views<span class="class">.py</span></span><br><span class="line">		 admin<span class="class">.py</span></span><br><span class="line">		 __init__<span class="class">.py</span></span><br><span class="line">		 tests.py</span><br></pre></td></tr></table></figure>
<h3 id="Django配置MySQL数据库"><strong>Django配置MySQL数据库</strong></h3><p>&emsp;<strong><code>mysite/setting.py</code></strong>(<code>NAME</code>中的数据库需要预先创建)<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123; </span><br><span class="line">	<span class="string">'default'</span>: &#123;</span><br><span class="line">		<span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">		<span class="string">'NAME'</span>: <span class="string">'books'</span>,</span><br><span class="line">		<span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">		<span class="string">'PASSWORD'</span>: <span class="string">'moguoliang'</span>,</span><br><span class="line">		<span class="string">'HOST'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">		<span class="string">'PORT'</span>: <span class="string">'3306'</span>,</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;测试Django连接数据库<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; python manage<span class="class">.py</span> shell</span><br><span class="line">from django<span class="class">.db</span> import connection</span><br><span class="line"><span class="attribute">cursor</span> = connection.<span class="function"><span class="title">cursor</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="编写数据库模型"><strong>编写数据库模型</strong></h3><p>&emsp;<strong><code>mysite/books/models.py</code></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from django<span class="class">.db</span> import models</span><br><span class="line"></span><br><span class="line">class <span class="function"><span class="title">Publisher</span><span class="params">(models.Model)</span></span>:</span><br><span class="line">    name = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">30</span>)</span></span></span><br><span class="line">    <span class="tag">address</span> = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">50</span>)</span></span></span><br><span class="line">    city = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">60</span>)</span></span></span><br><span class="line">    state_province = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">30</span>)</span></span></span><br><span class="line">    country = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">30</span>)</span></span></span><br><span class="line">    website = models.<span class="function"><span class="title">URLField</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class <span class="function"><span class="title">Author</span><span class="params">(models.Model)</span></span>:</span><br><span class="line">    firstName = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">30</span>)</span></span></span><br><span class="line">    lastName = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">40</span>)</span></span></span><br><span class="line">    email = models.<span class="function"><span class="title">EmailField</span><span class="params">(blank=True,verbose_name=<span class="string">'e-mail'</span>)</span></span>	#允许空白</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class <span class="function"><span class="title">Book</span><span class="params">(models.Model)</span></span>:</span><br><span class="line">    title = models.<span class="function"><span class="title">CharField</span><span class="params">(max_length=<span class="number">100</span>)</span></span></span><br><span class="line">    authors = models.<span class="function"><span class="title">ManyToManyField</span><span class="params">(Author)</span></span></span><br><span class="line">    publisher = models.<span class="function"><span class="title">ForeignKey</span><span class="params">(Publisher)</span></span></span><br><span class="line">    publicationDate = models.<span class="function"><span class="title">DateField</span><span class="params">(blank=Ture, null=True)</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="安装&amp;测试模型"><strong>安装&amp;测试模型</strong></h3><h4 id="安装模型"><strong>安装模型</strong></h4><p>&emsp;<strong><code>mysite/setting.py</code></strong><br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">INSTALLED_APPS</span> = (</span><br><span class="line">   <span class="string">'books'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p>
<h4 id="检查模型有效性"><strong>检查模型有效性</strong></h4><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; python manage.py<span class="instruction"> check </span>       </span><br><span class="line"></span><br><span class="line"><span class="comment">#python manage.py validate     #旧版本</span></span><br></pre></td></tr></table></figure>
<h3 id="执行模型"><strong>执行模型</strong></h3><p>&emsp;<strong><code>models.py</code></strong>变更后都要执行<strong><code>makemigrations</code></strong>和<strong><code>migrate</code></strong>，<strong><code>sqlmigrate</code></strong>仅用来查看SQL语句<br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 生成migrate</span></span><br><span class="line">$&gt; python manage.py makemigrations books </span><br><span class="line"><span class="preprocessor">#查看SQL语句</span></span><br><span class="line">$&gt; python manage.py sqlmigrate books <span class="number">0001</span> </span><br><span class="line"><span class="preprocessor">#执行SQL语句</span></span><br><span class="line">$&gt; python manage.py migrate</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#python manage.py syncdb     #旧版本</span></span><br></pre></td></tr></table></figure></p>
<h3 id="插入数据"><strong>插入数据</strong></h3><p>&emsp;使用Django提供的Python Shell进行插入数据测试。插入数据有两种方法：1. 逐条插入数据；2. 批量插入数据</p>
<ul>
<li><p>逐条插入</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; python manage<span class="class">.py</span> shell</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; from book<span class="class">.models</span> import Publisher</span><br><span class="line">&gt;&gt;&gt; p1 = <span class="function"><span class="title">Publisher</span><span class="params">(name=<span class="string">'test'</span>, address=<span class="string">'GaoXinYuan'</span>, city=<span class="string">'Shenzhen'</span>, state_province=<span class="string">'Guangdong'</span>, country=<span class="string">'China'</span>, website=<span class="string">'http://10.0.2.15:8000'</span>)</span></span></span><br><span class="line">&gt;&gt;&gt; p1.<span class="function"><span class="title">save</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>批量插入——objects.create()</p>
  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&gt; python manage.py shell</span><br><span class="line">&gt;&gt;&gt; from book.models import Publisher</span><br><span class="line">&gt;&gt;&gt; p1 = Publisher.objects.create(name=<span class="string">'Apress'</span>, <span class="keyword">...</span> address=<span class="string">'2855 Telegraph Avenue'</span>, <span class="keyword">...</span> city=<span class="string">'Berkeley'</span>, state_province=<span class="string">'CA'</span>, country=<span class="string">'U.S.A.'</span>, <span class="keyword">...</span> website=<span class="string">'http://www.apress.com/'</span>)</span><br><span class="line">&gt;&gt;&gt; p2 = Publisher.objects.create(name=<span class="string">"O'Reilly"</span>, <span class="keyword">...</span> address=<span class="string">'10 Fawcett St.'</span>, city=<span class="string">'Cambridge'</span>, <span class="keyword">...</span> state_province=<span class="string">'MA'</span>, country=<span class="string">'U.S.A.'</span>, <span class="keyword">...</span> website=<span class="string">'http://www.oreilly.com/'</span>)</span><br><span class="line">&gt;&gt;&gt; publisher_list = Publisher.objects.all()</span><br><span class="line">&gt;&gt;&gt; publisher_list</span><br></pre></td></tr></table></figure>
</li>
<li><p>操作数据库的常用函数方法</p>
<ul>
<li>Plulisher.objects.create()           插入数据</li>
<li>Publisher.objects.all()                 显示所有数据</li>
<li>Publisher.objects.filter(name=’Apress’)     过滤显示数据</li>
<li>Publisher.objects.get(name=”Apress”)        获取单个对象</li>
<li>Publisher.objects.order_by(“name”)          数据排序</li>
<li>Publisher.objects.order_by(“-name”)         逆向数据排序</li>
<li>Publisher.objects.filter(country=”U.S.A.”).order_by(“-name”) 连锁查询</li>
<li>Publisher.objects.order_by(‘name’)[0]       限制返回数据(limit 1)</li>
<li>Publisher.objects.filter(id=52).update(name=’Apress Publishing’) 更新数据</li>
<li>Publisher.objects.filter(country=’USA’).delete()     删除数据</li>
</ul>
</li>
</ul>
<h2 id="Django_admin管理站点"><strong>Django admin管理站点</strong></h2><ul>
<li><p>创建管理员用户</p>
  <figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> <span class="keyword">python</span> manage.py createsuperuser</span><br></pre></td></tr></table></figure>
</li>
<li><p>重置superuser密码</p>
  <figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> <span class="keyword">python</span> manage.py changepassword username</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查<strong><code>mysite/urls.py</code></strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),</span><br></pre></td></tr></table></figure>
</li>
<li><p>将模型model添加进admin管理——<strong><code>mysite/book/admin.py</code></strong></p>
  <figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib import admin</span><br><span class="line"><span class="keyword">from</span> book.models import Publisher, Author, Book</span><br><span class="line"># <span class="keyword">Register</span> your models here.</span><br><span class="line">admin.site.<span class="keyword">register</span>(Publisher)</span><br><span class="line">admin.site.<span class="keyword">register</span>(Author)</span><br><span class="line">admin.site.<span class="keyword">register</span>(Book)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="表单"><strong>表单</strong></h2><h3 id="获取request对象数据"><strong>获取request对象数据</strong></h3><p>&emsp;视图函数<code>hello(request)</code>中的第一个参数是一个<strong>HttpRequest对象</strong>，我们可以通过此对象获取一些有用信息。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> HttpResponse(<span class="string">"Hello world"</span>)</span><br></pre></td></tr></table></figure></p>
<p>&emsp;HttpRequest对象包含当前请求URL的一些信息：</p>
<ul>
<li>request.path：除域名以外的请求路径，以正斜杠开头。例如：”/hello/“</li>
<li>request.get_host()：主机名（比如，通常所说的域名）。    例如：”127.0.0.1:8000” or “www.example.com”</li>
<li>request.get_full_path()：请求路径，可能包含查询字符串。例如：”/hello/?print=true”</li>
<li>request.is_secure()：如果通过HTTPS访问，则此方法返回True; 否则返回False。    </li>
</ul>
<h3 id="HTTP_Header信息"><strong>HTTP Header信息</strong></h3><p>&emsp;<strong><code>request.META</code></strong>是一个Python字典，包含了所有本次HTTP请求的Header信息<br>&emsp;利用request.META获取HTTP Header信息：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ua_display_good2</span><span class="params">(request)</span>:</span></span><br><span class="line">   ua = request.META.get(<span class="string">'HTTP_USER_AGENT'</span>, <span class="string">'unknown'</span>)</span><br><span class="line">   <span class="keyword">return</span> HttpResponse(<span class="string">"Your browser is %s"</span> % ua)</span><br></pre></td></tr></table></figure></p>
<h4 id="利用模板列出所有HTTP_Header信息实例"><strong>利用模板列出所有HTTP Header信息实例</strong></h4><ul>
<li><p>创建模板——<strong><code>mysite/templates/displayHeaderTemp.html</code></strong></p>
  <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span></span><span class="template_tag">&#123;% <span class="keyword">block</span> title %&#125;</span><span class="xml"></span><span class="template_tag">&#123;% <span class="keyword">endblock</span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">body</span>&gt;</span> </span><br><span class="line">		<span class="tag">&lt;<span class="title">ul</span>&gt;</span> </span><br><span class="line">			</span><span class="template_tag">&#123;% <span class="keyword">for</span> tkey, tvalue <span class="keyword">in</span> headDict.iteritems %&#125;</span><span class="xml"></span><br><span class="line">				<span class="tag">&lt;<span class="title">li</span>&gt;</span></span><span class="variable">&#123;&#123;tkey&#125;&#125;</span><span class="xml">: </span><span class="variable">&#123;&#123;tvalue&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">			</span><span class="template_tag">&#123;% <span class="keyword">endfor</span> %&#125;</span><span class="xml"></span><br><span class="line">		<span class="tag">&lt;/<span class="title">ul</span>&gt;</span> </span><br><span class="line">	<span class="tag">&lt;/<span class="title">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>添加视图函数——<strong><code>mysite/views.py</code></strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render_to_response</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">displayHeaderTemp</span><span class="params">(request)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> render_to_response(<span class="string">'displayHeaderTemp.html'</span>, &#123;<span class="string">'title'</span>: <span class="string">'displayHeaderTemplate'</span>, <span class="string">'headDict'</span>: request.META&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置URL——<strong><code>mysite/urls.py</code></strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysite.views <span class="keyword">import</span> displayHeaderTemp</span><br><span class="line">urlpatterns = patterns(</span><br><span class="line">    url(<span class="string">r'^displayHeaderTemp/$'</span>, displayHeaderTemp),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="获取表单提交的数据"><strong>获取表单提交的数据</strong></h3><ul>
<li><strong><code>request.GET</code></strong>：获取用户通过GET方法提交的表单数据(参数URL中可见)</li>
<li><strong><code>request.POST</code></strong>：获取用户通过POST方法提交的表单数据</li>
</ul>
<h4 id="实例一"><strong>实例一</strong></h4><p>&emsp;用户通过searchForm页面GET方法提交表单数据，跳转到search页面，通过request.GET获取用户提交数据并在页面显示</p>
<ul>
<li><p>创建模板——<strong><code>templates/searchForm.html</code></strong></p>
  <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">html</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="title">head</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">title</span>&gt;</span>search form<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="title">head</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;<span class="title">body</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">"/search/"</span> <span class="attribute">method</span>=<span class="value">"get"</span> <span class="attribute">accept-charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"q"</span> <span class="attribute">value</span>=<span class="value">""</span>&gt;</span> </span><br><span class="line">           <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"Search &amp;rarr;"</span>&gt;</span> </span><br><span class="line">       <span class="tag">&lt;/<span class="title">form</span>&gt;</span> </span><br><span class="line">   <span class="tag">&lt;/<span class="title">body</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建视图——<strong><code>books/views.py</code></strong><br>  &emsp;<code>books/views.py</code>是在books这个app里的视图，非<code>mysite/views.py</code></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render, render_to_response</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchForm</span><span class="params">(request)</span>:</span></span><br><span class="line">	 <span class="keyword">return</span> render_to_response(<span class="string">'searchForm.html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(request)</span>:</span></span><br><span class="line">	 <span class="keyword">if</span> <span class="string">'q'</span> <span class="keyword">in</span> request.GET:</span><br><span class="line">			message = <span class="string">"You search for: %s"</span> % request.GET[<span class="string">'q'</span>]</span><br><span class="line">	 <span class="keyword">else</span>:</span><br><span class="line">			message = <span class="string">"You sumit an empty form."</span></span><br><span class="line">	  <span class="keyword">return</span> HttpResponse(message)</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置URL——<strong><code>mysite/urls.py</code></strong><br>  &emsp;因为searchForm会跳转到search，url配置中必须有search及相对于的视图函数</p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> books <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = patterns(<span class="string">''</span>, </span><br><span class="line">       url(<span class="string">r'^searchForm/'</span>, views.searchForm),</span><br><span class="line">       url(<span class="string">r'^search/'</span>, views.search),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="实例二"><strong>实例二</strong></h4><p>&emsp;利用Django提交表单发送邮件</p>
<ul>
<li><p>邮件设置——<strong><code>mysite/setting.py</code></strong></p>
  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#email setting</span></span><br><span class="line"><span class="comment">#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'</span></span><br><span class="line">EMAIL_HOST = 'smtp.163.com'</span><br><span class="line">EMAIL_PORT = 25</span><br><span class="line">EMAIL_HOST_USER = 'xxxxx<span class="comment">@163.com'</span></span><br><span class="line">EMAIL_HOST_PASSWORD = '<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>'</span><br><span class="line">EMAIL_USE_TLS = True</span><br><span class="line"><span class="comment">#EMAIL_SUBJECT_PREFIX = u'Django邮件测试'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试利用Django发送邮件<br>  &emsp;返回<code>1</code>则成功，<code>0</code>则失败</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; python manage<span class="class">.py</span> shell</span><br><span class="line">&gt;&gt;&gt; from django<span class="class">.core</span><span class="class">.mail</span> import send_mail</span><br><span class="line">&gt;&gt;&gt; <span class="function"><span class="title">send_mail</span><span class="params">(<span class="string">'DjangoMail'</span>,<span class="string">'test'</span>,<span class="string">'autodeploy@163.com'</span>, [<span class="string">'221bmogl@gmail.com'</span>], fail_silently=True)</span></span></span><br></pre></td></tr></table></figure>
<p>  send_mail()函数参数解释：</p>
<ul>
<li>send_mail(subject, message, from_email, recipient_list, fail_silently=False, auth_user=None,auth_password=None, connection=None)</li>
<li><p>subject, message, from_email and recipient_list 这四个参数是必须的。</p>
</li>
<li><p>subject: 字符串，表示邮件标题。</p>
</li>
<li>message: 字符串，表示邮件内容。</li>
<li>from_email: 字符串，表示发件邮箱。</li>
<li>recipient_list: 字符串列表，列表中每个成员都是一个邮箱地址，而且每个收件人都会在 “收件人/To:” 栏看到出现在 recipient_list 中的其他收件人。</li>
<li>fail_silently: （可选）布尔值。为 False 时， send_mail 会抛出 smtplib.SMTPException 异常。 smtplib 文档列出了所有可能的异常。 这些异常都是 SMTPException 的子类。</li>
<li>auth_user: （可选）SMTP服务器的认证用户名。没提供该参数的情况下，Django会使用 EMAIL_HOST_USER 配置项的设置。</li>
<li>auth_password: （可选）SMTP服务器的认证密码，没提供该参数的情况下，Django会使用EMAIL_HOST_PASSWORD 配置项的设置。</li>
<li>connection: （可选）发送邮件的后端。没提供该参数的情况下，Django会使用默认后端的实例。可查看 Email backends 了解更多细节。</li>
</ul>
</li>
<li><p>创建模板——<strong><code>templates/contactForm.html</code></strong></p>
  <figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"content-type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>Contact us<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">h1</span> <span class="attribute">id</span>=<span class="value">"content1"</span>&gt;</span>Contact us<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">	</span><span class="template_tag">&#123;% <span class="keyword">if</span> error %&#125;</span><span class="xml"></span><br><span class="line">		<span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">		</span><span class="template_tag">&#123;% <span class="keyword">for</span> eachError <span class="keyword">in</span> error %&#125;</span><span class="xml"></span><br><span class="line">		<span class="tag">&lt;<span class="title">li</span>&gt;</span> </span><span class="variable">&#123;&#123;eachError&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">		</span><span class="template_tag">&#123;% <span class="keyword">endfor</span> %&#125;</span><span class="xml"></span><br><span class="line">		<span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line">	</span><span class="template_tag">&#123;% <span class="keyword">endif</span> %&#125;</span><span class="xml"></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">action</span>=<span class="value">""</span> <span class="attribute">method</span>=<span class="value">"post"</span> <span class="attribute">accept-charset</span>=<span class="value">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处需要</span></span><span class="template_tag">&#123;% <span class="keyword">csrf_token</span> %&#125;</span><span class="xml"><span class="comment">、不然会CSRF验证失败! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span> <span class="attribute">style</span>=<span class="value">"color: #ff0000;"</span>&gt;</span></span><span class="template_tag">&#123;% <span class="keyword">csrf_token</span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Subject: <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"subject"</span> <span class="attribute">value</span>=<span class="value">"</span></span></span><span class="variable">&#123;&#123;subject&#125;&#125;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Your e-mail(optional): <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"email"</span> <span class="attribute">value</span>=<span class="value">"</span></span></span><span class="variable">&#123;&#123;email&#125;&#125;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Message: <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">name</span>=<span class="value">"message"</span> <span class="attribute">rows</span>=<span class="value">"8"</span> <span class="attribute">cols</span>=<span class="value">"40"</span>&gt;</span></span><span class="variable">&#123;&#123;message&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"Continue &amp;rarr;"</span>&gt;</span><span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>创建视图函数——<strong><code>mysite/views.py</code></strong></p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">def <span class="function"><span class="title">contact</span><span class="params">(request)</span></span>:</span><br><span class="line">error = []</span><br><span class="line">   <span class="keyword">if</span> request<span class="class">.method</span> == <span class="string">'POST'</span>:</span><br><span class="line">       <span class="keyword">if</span> not request<span class="class">.POST</span><span class="class">.get</span>(<span class="string">'subject'</span>):</span><br><span class="line">           error.<span class="function"><span class="title">append</span><span class="params">(<span class="string">'Enter a subject'</span>)</span></span></span><br><span class="line">       <span class="keyword">if</span> not request<span class="class">.POST</span><span class="class">.get</span>(<span class="string">'message'</span>):</span><br><span class="line">           error.<span class="function"><span class="title">append</span><span class="params">(<span class="string">'Enter a message'</span>)</span></span></span><br><span class="line">       <span class="keyword">if</span> request<span class="class">.POST</span><span class="class">.get</span>(<span class="string">'email'</span>) and <span class="string">'@'</span> not <span class="keyword">in</span> request<span class="class">.POST</span>[<span class="string">'email'</span>]:</span><br><span class="line">           error.<span class="function"><span class="title">append</span><span class="params">(<span class="string">'Enter a valid email address:'</span>)</span></span></span><br><span class="line">       <span class="keyword">if</span> not error:</span><br><span class="line">           emailMessage = <span class="string">': '</span>.<span class="function"><span class="title">join</span><span class="params">([request.POST.get(<span class="string">'email'</span>, <span class="string">'UserEmailEmpty'</span>)</span></span>, request<span class="class">.POST</span>[<span class="string">'message'</span>]])</span><br><span class="line">           send_mail(</span><br><span class="line">               request<span class="class">.POST</span>[<span class="string">'subject'</span>],</span><br><span class="line">               emailMessage,</span><br><span class="line">               <span class="string">'xxxxx@163.com'</span>,</span><br><span class="line">               [<span class="string">'fatesai@gmail.com'</span>],</span><br><span class="line">               fail_silently=True,</span><br><span class="line">               ) </span><br><span class="line">               <span class="id">#return</span> <span class="function"><span class="title">HttpResponseRedirect</span><span class="params">(<span class="string">'/contact/thanks/'</span>, RequestContext(request)</span></span>)</span><br><span class="line">               return <span class="function"><span class="title">HttpResponseRedirect</span><span class="params">(<span class="string">'/contact/thanks/'</span>)</span></span></span><br><span class="line">   return <span class="function"><span class="title">render_to_response</span><span class="params">(<span class="string">'contactForm.html'</span>, RequestContext(request, &#123;<span class="string">'error'</span>: error&#125;)</span></span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p>URL设置——<strong><code>mysite/urls.py</code></strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysite.views <span class="keyword">import</span> contact, thanks</span><br><span class="line">urlpatterns = patterns(<span class="string">''</span>,</span><br><span class="line">	 url(<span class="string">r'^contactus/'</span>, contact),</span><br><span class="line">	url(<span class="string">r'^contact/thanks/'</span>, thanks)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;最近在整理之前的笔记，这是之前自学Django时记录的，梳理以备查阅。教程看的是<a href="http://djangobook.py3k.cn/2.0/" target="_blank" rel="external">The Django Book中文版<]]>
    </summary>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DDOS浅记]]></title>
    <link href="http://yoursite.com/2015/11/11/ddos/"/>
    <id>http://yoursite.com/2015/11/11/ddos/</id>
    <published>2015-11-11T14:29:11.000Z</published>
    <updated>2017-03-05T06:05:28.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;<a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A" target="_blank" rel="external">DDOS(Distributed Denial of Service)</a>，分布式拒绝服务攻击是目前互联网上主流的攻击方式，也是最难防御的攻击方式。之前就已经有了解，只是最近刚刚好整理相关方面的资料，顺便简单记录一下。</p>
<h3 id="SYN_Flood"><strong>SYN Flood</strong></h3><p>&emsp;<strong>SYN Flood</strong>既SYN 洪水攻击，是DDOS攻击方式中最为经典的一种，利用TCP三次握手的设计缺陷，通过发送含有虚假源IP地址的SYN报文，使得服务端永远无法完成三次握手，一直处于<strong>SYN_RECV</strong>状态无法释放资源，直到占满系统协议栈等待队列无法新建连接导致拒绝服务。(关于TCP三次握手详见<a href="https://moguol.github.io/2015/07/16/review-tcp-ip-3/" target="_blank" rel="external">这里</a>)</p>
<ol>
<li>client发送<code>SYN</code>报文(虚假源IP地址)</li>
<li>server接受到包含虚假源IP地址的SYN报文后，返回<code>SYN+ACK</code>报文进入<code>SYN_RECV</code>状态等待client的<code>ACK</code>报文</li>
<li><del>client接受到server的<code>SYN+ACK</code>报文，返回<code>ACK</code>报文</del>。由于攻击者使用的SYN报文为虚假源IP地址，所以client是无法收到<code>SYN+ACK</code>报文的，故此步骤无法执行，从而造成server一直等待此步的<code>ACK</code>报文。</li>
</ol>
<p>&emsp;<strong>防御</strong>：SYN Flood可以通过调整内核的参数对其攻击起到一定的缓解作用，但修改内核参数的做法仅在攻击流量小的时候才有效果，当攻击流量大时是抵挡不住的。</p>
<ul>
<li><code>/proc/sys/net/ipv4/tcp_syncookies</code>：开启SYN Cookie(1开启)</li>
<li><code>/proc/sys/net/ipv4/tcp_max_syn_backlog</code>：SYN最大队列长度</li>
<li><code>/proc/sys/net/ipv4/tcp_synack_retries</code>：SYN+ACK最大重试次数</li>
</ul>
<p>&emsp;除了调整内核参数外，对于SYN Flood常见的防御方法有如下三种：</p>
<ul>
<li><strong>SYN Cookies</strong>：当启用了SYN Cookies后server在收到client的<code>SYN</code>包并回复<code>SYN+ACK</code>包时，并不会专门分配存储空间而是根据client的<code>SYN</code>包计算出cookie值，此cookie值将代替原有随机产生的序列号作为<code>SYN+ACK</code>包的序列号回复给client，当client回复<code>ACK</code>包时，核对cookie(SYN+ACK序列号)和确认序号，匹配则完成三次握手，不匹配则丢弃。</li>
<li><strong>SYN Proxy</strong>：SYN Proxy是在client和server之间做一个”代理转发”。proxy先伪装成server接受client的SYN握手请求，当成功建立三次握手后(表明client是正常而非攻击者)proxy在伪装成client向server进行三次握手建立连接，然后转发数据。如此一来，一次通信就由原来的三次握手变成了六次握手而且序列号也需要做相应的调整。</li>
<li><strong>首包丢弃</strong>：对client首次发送的<code>SYN</code>进行丢弃处理，如果是正常client会在一定时间内重新尝试握手，假若等待超时后没收到重传的SYN包则判断此client非法，加入黑名单。</li>
</ul>
<h3 id="UDP_Flood/DNS_Query_Flood"><strong>UDP Flood/DNS Query Flood</strong></h3><p>&emsp;<strong>UDP Flood</strong>通常是制造大量伪造源地址的UDP包对提供使用UDP协议的服务器进行流量攻击致使服务器及其网络瘫痪，而其中又以<strong>DNS Query Flood</strong>攻击最为常见。DNS Query Flood主要是针对DNS服务器，通过向DNS服务器发起大量的域名查询请求从而让服务器或其网络瘫痪，为使攻击更有效果，攻击者会伪装源IP、源端口、查询ID等，对需要解析的域名会进行随机的伪造从而降低DNS缓存的命中率达到攻击效果最大化。</p>
<h3 id="CC攻击"><strong>CC攻击</strong></h3><p>&emsp;<strong>CC攻击</strong>其实是<strong>HTTP Flood</strong>攻击，通过对Web服务器发起大量真实的HTTP请求使得服务器无法同时间处理并发量巨大的请求而导致服务瘫痪来达到攻击目的。粗暴的CC攻击是利用大量真实并发的HTTP请求来达到效果，有点以本伤人的味道。然而简单粗暴的CC攻击需要大量的”肉鸡”或匿名代理服务器，为了以最小的攻击量达到最大的攻击效果，针对不同Web服务器业务的针对性CC攻击杀伤力才巨大，同时也是最难防御的。针对性的对攻击目标Web服务进行分析，找出业务上的缺陷，如某个请求会触发数据库查询等，针对性的对缺陷进行攻击。CC攻击之所以难防御就是因为其不具备容易防御的攻击特性。<br>&emsp;<strong>防御</strong>：对于CC攻击目前并没有一个普遍且有效的防御方式，只能缓解而无法彻底防御。用好<strong>缓存</strong>是较为有效的办法，比如图片等静态资源可以使用CDN做缓存，对于不复杂的数据查询可用Redis、Memcache做缓存减少对数据库的查询压力，减少业务上的缺陷提高并发能力，优化SQL性能等等。</p>
<h3 id="慢速连接攻击"><strong>慢速连接攻击</strong></h3><p>&emsp;一般的DDOS攻击都是以大流量为主，通过发送大量报文将目标服务器或网络压垮导致服务瘫痪无法正常提供服务。然而，<strong>慢速连接攻击</strong>却反其道而行之，攻击者会操控肉鸡先与目标服务器正常建立HTTP连接，然后将<code>HTTP HEADER</code>中<code>Connection</code>设置为<strong><code>keep-alive</code></strong>并设置一个较大的<strong><code>content-length</code></strong>，每隔一段时间只发送几个字节的数据，服务器一直等待接收剩余数据而保持连接，此种慢速连接不断累积增加直到导致新的连接请求无法被处理，以此达到让服务器拒绝服务的目的。<br>&emsp;<strong>慢速连接攻击</strong>发展至今已有很多变种，常见的有以下三种类型：</p>
<ul>
<li><strong>慢速Header</strong>：服务器在处理HTTP请求之前需要先接收请求的<code>HTTP Header</code>，而HTTP协议规定，一个正常的HTTP请求要以<strong><code>\r\n\r\n</code></strong>结尾用以表示请求结束，服务器可以开始正式处理此HTTP请求。<strong>慢速Header</strong>利用此特性，慢速不断的发送只带有<strong><code>\r\n</code></strong>的<strong><code>HTTP Header</code></strong>，由于服务器没有收到<strong><code>\r\n\r\n</code></strong>结尾的<code>HTTP Header</code>便一直等待。</li>
<li><strong>慢速Body</strong>：攻击者会先建立一个正常的HTTP连接，然后发起一个<strong><code>HTTP POST</code></strong>请求，此请求的<strong><code>Content-length</code></strong>设置为较大的值，再以很低的速度发送很小的数据，使得服务器一直保持连接无法释放资源。</li>
<li><strong>慢速Read</strong>：攻击者在建立正常HTTP连接后会发送一个<strong><code>Read</code></strong>请求(比如请求下载一个较大的文件)，然后故意通告一个极小的TCP接收窗口(甚至通告为零窗口)，让服务器认为此请求的客户端繁忙，服务器便会以非常缓慢的频率和数据量很小的发送请求的文件，使得服务端资源一直被占用而无法释放。</li>
</ul>
<p>&emsp;<strong>防御</strong>：针对<strong>慢速连接攻击</strong>的特点，常见的防御思路有：</p>
<ul>
<li>限制HTTP请求的最大时间，超过最大连接时间则判断为异常请求。</li>
<li>周期性统计传输报文数量，一个周期内传输的报文数量过少则判断为异常请求。</li>
</ul>
<h3 id="DRDOS(分布式反射DOS攻击)"><strong>DRDOS(分布式反射DOS攻击)</strong></h3><p>&emsp;<strong>DRDOS</strong>攻击有点借刀杀人的味道。攻击者伪装被攻击目标的IP，向开放特定服务的服务器发出请求，服务器接收到请求后根据源IP(攻击者伪装)响应请求内容给被攻击目标。大致过程如下所示：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击者————&gt;(发送源<span class="literal">IP</span>为被攻击目标<span class="literal">IP</span>的请求包)————&gt;开放特定服务的服务器————&gt;(服务器接收请求，根据包的源<span class="literal">IP</span>响应请求给被攻击目标)————&gt;被攻击目标</span><br></pre></td></tr></table></figure></p>
<p>&emsp;一开始这种攻击方式并没有什么太吸引人的地方，攻击力也不强。一般的TCP反射，由于被攻击目标和开放特定服务器之间并没有建立TCP握手，在被攻击目标收到响应会立刻回复<strong><code>RST</code></strong>将连接重置。最主要的一点是攻击者制造的攻击流量和被攻击目标接收的流量是一样的。所以一开始DRDOS并没有流行起来，但一旦DRDOS攻击被附加了<strong>流量放大</strong>属性后，其攻击的威力瞬间提升，攻击者只需要用较小的流量便能获得几倍或几十倍的攻击流量。<br>&emsp;目前DRDOS攻击常见的利用协议有：NTP、Chargen、DNS、SNMP等等。大多都是基于UDP的反射型攻击，基于TCP的反射型攻击也有但目前的主流还是集中在UDP类型的反射攻击上。</p>
<ul>
<li><strong>NTP反射流量放大</strong>：DRDOS攻击利用NTP协议，主要是NTP协议有一个<strong>monlist</strong>功能，此功能是列出最近同步过时间的600个主机列表。所以只有攻击者伪装IP发送一个较小的monlist请求，NTP服务器便会响应一个包含600个主机列表的大数据包，攻击者以此来进行流量的反射放大。</li>
<li><strong>DNS反射流量放大</strong>：DNS协议的利用主要是使用<strong>ANY</strong>类型的域名查询请求。</li>
</ul>
<p>&emsp;<strong>防御</strong>：DRDOS攻击最主要的威胁还是在附加<strong>流量放大</strong>后，本质上也是流量攻击的一种。对于大流量的攻击，需要先有较大的处理流量的带宽。其次是利用CDN、智能DNS等手段将流量分散。伴随流量放大的DRDOS攻击会有一个明显的攻击特征，比如利用NTP流量放大攻击，被利用的NTP服务的源端口一般都是UDP 123；利用DNS流量放大的攻击，一般是UDP 53。可以在网络边缘针对源端口进行流量的拦截限制。</p>
<h3 id="链路泛洪"><strong>链路泛洪</strong></h3><p>&emsp;链路泛洪的攻击方式并不直接攻击目标对象而是转为击垮目标的上级网络链路为目的。有时候攻击目标防御措施较为完善，不易攻破。那么攻击者会选择对目标的上级网络链路进行攻击，击溃或堵塞目标的上级网络链路使得正常的流量无法到达目标，从而间接的达到让目标无法提供服务器的目的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;<a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A" target="_blank" rel="external">DDOS(]]>
    </summary>
    
      <category term="ddos" scheme="http://yoursite.com/tags/ddos/"/>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
  </entry>
  
</feed>