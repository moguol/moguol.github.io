<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Hexo]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-03-02T10:51:22.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[John Doe]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Docker笔记]]></title>
    <link href="http://yoursite.com/2016/02/02/docker/"/>
    <id>http://yoursite.com/2016/02/02/docker/</id>
    <published>2016-02-02T09:32:55.000Z</published>
    <updated>2016-03-02T10:51:22.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装Docker"><strong>安装Docker</strong></h2><ul>
<li>系统版本：CentOS 7 64bit</li>
<li>内核版本：3.10.0-229.el7.x86_64</li>
<li>Docker版本：docker-1.8.2-10.el7.centos.x86_64</li>
</ul>
<p>&emsp;安装Docker<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> yum install docker</span><br><span class="line"></span><br><span class="line"><span class="variable">$&gt;</span> docker -v</span><br><span class="line"><span class="constant">Docker </span>version <span class="number">1.8</span>.<span class="number">2</span>-el7.centos, build a01dc02/<span class="number">1.8</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure></p>
<h2 id="基础概念"><strong>基础概念</strong></h2><h3 id="镜像(image)"><strong>镜像(image)</strong></h3><ul>
<li>镜像(image)是容器(container)运行时的只读模板，一个镜像(image)由<strong>多个只读层(read-only layer)</strong>组成。(可借用Photoshop的图层概念方便理解)</li>
<li>Docker使用<strong>统一文件系统(union file system)</strong>将多个<strong>只读层(read-only layer)</strong>整合成一个独立的文件系统。</li>
<li>镜像(image)是Docker的<strong>构造</strong>部分。<br><img src="http://7xk64o.com1.z0.glb.clouddn.com/docker_image_layer.png" alt="镜像只读图"><br><a href="http://7xk64o.com1.z0.glb.clouddn.com/docker_image_layer.png" target="_blank" rel="external">图片来源</a></li>
</ul>
<h3 id="容器(container)"><strong>容器(container)</strong></h3><ul>
<li>Docker利用容器(container)来运行应用，容器(container)包含应用运行时所需的所有环境。</li>
<li>容器(container)是在镜像(image)的基础上创建而来，不同容器(container)间是相互隔离的。</li>
<li>容器(container) = 镜像(image) + 可读写层(read-write layer)<br>  可读写层位于镜像的上层，是Docker的最上层</li>
<li>容器(container)中应用的进程对文件进行的创建、修改和删除等操作都是作用于<strong>可读写层(read-write layer)</strong></li>
<li>容器(container)可<strong>运行</strong>、<strong>开始</strong>、<strong>停止</strong>、<strong>移动</strong>、<strong>删除</strong>。</li>
<li>容器(container)是Docker的<strong>运行</strong>部分。</li>
</ul>
<h3 id="仓库(repository)"><strong>仓库(repository)</strong></h3><ul>
<li>仓库(repository)为存放镜像(image)的地方。</li>
<li>仓库(repository)分<strong>公有仓库</strong>和<strong>私有仓库</strong>。目前最大的公有仓库为<a href="https://hub.docker.com/" target="_blank" rel="external">Docker Hub</a></li>
<li>仓库(repository)是Docker的<strong>分发</strong>部分。</li>
</ul>
<h3 id="Namespace"><strong>Namespace</strong></h3><p>&emsp;Namespace是Linux Kernel提供的一种<strong>内核级别</strong>的资源隔离机制。Linux的地址空间分为<strong>user space</strong>和<strong>kernel space</strong>，每个进程在user space中独立拥有自己的地址空间且进程间互相隔离不可知。当进程需要使用到kernel相关的资源时都是通过调用kernel api进入kernel space使用kernel提供的服务(从<strong>用户态</strong>切换到<strong>内核态</strong>)。进程在user space中是相互独立隔离的，但在kernel space则是共享内核资源的，内核中有许多全局共享使用的资源，如IP、路由表、hostname、init进程、PID和GID等等。为了在kernel space中对内核全局资源(IP、PID等)实现隔离，Linux　Kernel提供了Namespace机制。<br>&emsp;<strong>mount namespace</strong>是最早出现的namespace，于2002年开始产生，用于隔离文件系统相关资源。随着container的产生与发展，截止<code>kernel 3.8</code>已存在<strong><code>6</code></strong>个不同类型的namespace，用于隔离不同的内核全局资源。</p>
<ul>
<li><strong>UTS Namespace</strong><br>  &emsp;UTS Namespace(UNIX Time-sharing System)，用于隔离hostname和domain name。Docker容器拥有独立的UTS Namespace，默认使用<strong>CONTAINER ID</strong>作为hostname。</li>
<li><strong>Mount Namespace</strong><br>  &emsp;Mount Namespace通过隔离文件系统挂载点实现隔离文件系统，不同Mount Namespace中的文件结构发生变化互不影响。在创建Mount Namespace时会将当前文件结构复制给新的Mount Namespace，新的Mount Namespace中的所有mount操作仅对此Mount Namespace起作用。</li>
<li><strong>IPC Namespace</strong><br>  &emsp;IPC Namespace(Inter-Process Communication)，IPC是Linux进程间通信的一种方式，IPC有共享内存、命名管道等方法实现进程间的相互通信。隔离IPC后，只有在同一个IPC Namespace下的进程才能直接通信。</li>
<li><strong>PID Namespace</strong><br>  &emsp;PID Namespace，主要就用于隔离PID。每个PID Namespace的第一个进程为<code>PID=1</code>，功能和<strong>init进程</strong>一样，比如接管孤儿进程等。<br>  &emsp;Namespace允许嵌套，每个Namespace只能影响自身Namespace和子Namespace。</li>
<li><strong>Network Namespace</strong><br>  &emsp;Network Namespace，用于网络资源的隔离，如：网络设备、IP、路由表、iptables和端口(socket)等等。</li>
<li><strong>User Namespace</strong><br>  &emsp;User Namespace，用于隔离UID、GID和秘钥等资源。</li>
</ul>
<h3 id="CGroups"><strong>CGroups</strong></h3><p>&emsp;CGroups是Linux Kernel提供的一种限制、记录资源的机制，所限制的资源包括CPU、Memory、IO等等。<br>&emsp;CGroups通过VFS和上层进行交互，CGroups自定义伪文件系统并定义用于限制各资源的文件。CGroups通过挂载伪文件系统，设置、读取用于限制各资源的文件来限制任务对资源的使用。<br>&emsp;CGroups提供<code>4</code>个主要功能：</p>
<ul>
<li><strong>Resource Limitation(资源限制)</strong>：例如限制某程序最多能使用的内存空间、只能使用CPU的哪些核心等等。</li>
<li><strong>Prioritization(优先级分配)</strong>：设置优先级，优先级越高能获得越多的资源。</li>
<li><strong>Accounting(资源统计)</strong>：统计资源使用量，主要目的用于计费。</li>
<li><strong>Control(进程控制)</strong>：能对进程组执行挂起、恢复等操作。</li>
</ul>
<p>&emsp;CGroups基础概念：</p>
<ul>
<li><strong>task(任务)</strong>：表示一个系统进程。每个子系统目录下会有<code>tasks</code>文件(例如memory子系统：<code>/sys/fs/cgroup/memory/tasks</code>)，文件内容为限制的进程PID。</li>
<li><strong>control group(控制组)</strong>：CGroups对资源的限制以control group(控制组)为单位进行。一个任务加入某control group，表示任务需要按照此control group的限制规则来使用资源。</li>
<li><strong>subsystem(子系统)</strong>：subsystem(子系统)既资源控制器。不同subsystem(子系统)对不同资源进行限制，目前CGroups有以下subsystem(子系统)<strong><code>/sys/fs/cgroup/</code></strong>：<ul>
<li>blkio：限制块设备(磁盘、SSD、光盘)的IO。</li>
<li>cpu：控制task(任务)对CPU的使用。</li>
<li>cpuacct：自动生成task(任务)使用cpu的报告。</li>
<li>cpuset：为task(任务)分配独立cpu(多核)和内存。</li>
<li>devices：控制task(任务)是否允许访问设备。</li>
<li>memory：控制task(任务)能使用多少内存并自动生成使用报告。</li>
<li>freezer：挂起或恢复task(任务)</li>
<li>net_cls：使用classid标记网络数据包</li>
<li>hugetlb：对HugeTLB系统进行限制</li>
<li>perf_event：运行task(任务)进行统一性能测试</li>
</ul>
</li>
<li><strong>hierarchy(层级树)</strong>：hierarchy由control group以树状目录结构，每个hierarchy通过绑定对应的subsystem进行资源调度。一个系统可存在多个hierarchy。</li>
</ul>
<p>&emsp;关系图如下<br>&emsp;&emsp;整个灰色框是一个<strong>hierarchy</strong><br>&emsp;&emsp;<code>/cpu_mem_cg</code>包含<strong><code>cpu</code></strong>和<strong><code>memory</code></strong>的两个<strong>subsystem</strong>(表明一个hierarchy可包含多个subsystem)<br>&emsp;&emsp;<code>/cg1</code>、<code>/cg2</code>是不同的<strong>control group</strong><br>&emsp;&emsp;<code>/cg1</code>、<code>/cg2</code>目录下会有一个<strong><code>tasks</code></strong>文件，里面存放属于此<strong>control group</strong>的<strong>task</strong>(tasks文件内容为PID)</p>
<center><br><img src="http://7xk64o.com1.z0.glb.clouddn.com/CGroups-relationships.png" alt="CGroups-relationships"><br><a href="https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Resource_Management_Guide/sec-Relationships_Between_Subsystems_Hierarchies_Control_Groups_and_Tasks.html" target="_blank" rel="external">图片来源</a><br></center>

<h3 id="AUFS"><strong>AUFS</strong></h3><p>&emsp;上面在<strong>镜像(image)</strong>中提到Docker使用<strong>统一文件系统(union file system)</strong>将多个<strong>只读层(read-only layer)</strong>整合成独立的文件系统。更加具体来说Docker是使用一种名为<strong>AUFS(Advance union file system)</strong>的union file system。<strong>UFS</strong>有很多种，比如：aufs、btrfs、vfs和devicemapper等等。简单而言，<strong>UFS</strong>就是将不同路径的目录联合挂载到同一个目录下。<br>&emsp;<strong>AUFS</strong>特性：</p>
<ul>
<li>联合<br>  可将多个目录联合挂载到同一个目录下。只显示联合目录内容并不改变源目录。<br>  <strong><code>mount</code></strong>挂载时，越写在前面的目录优先级越高(若多目录中存在相同名称的文件则挂载优先级高目录下的文件)。默认第一个目录权限为<strong><code>rw</code></strong>，之后的目录权限都为<strong><code>ro</code></strong>。</li>
<li>branch<br>  各个需要被联合(union)的子目录，Docker中也可理解为层(layer)。</li>
<li>copy on write<br>  若需要对联合目录下的内容做修改时，查找已union的branch中是否存在此文件，若存在则选择<strong>可写(rw)</strong>且优先级最高的branch并将文件copy到此branch后再修改。</li>
<li>whiteout<br>  用于隐藏下层branch文件。在上层目录创建<strong>.wh.<filename></filename></strong>，可隐藏下层的<filename>文件。</filename></li>
</ul>
<p>&emsp;通过具体实例了解<strong>AUFS</strong>：<br>&emsp;由于CentOS 7默认并不支持AUFS而且要安装也比较麻烦(CentOS系列实现分层镜像用的是DeviceMapper技术，Ubuntu使用AUFS实现)，所以实验环境在<strong>Ubuntu 14.04</strong>上进行，Ubuntu默认没安装AUFS，需要先安装<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo apt-<span class="keyword">get</span> install aufs-tools</span><br></pre></td></tr></table></figure></p>
<p>&emsp;先创建<strong><code>4</code></strong>个目录：<code>ro_a</code>、<code>ro_b</code>、<code>rw_c</code>和<code>union</code>。创建<strong><code>2</code></strong>个文件：<code>ro_a/a.txt</code>、<code>ro_b/b.txt</code></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$&gt; tree</span><br><span class="line">.</span><br><span class="line">├── ro_a</span><br><span class="line">│   └── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">├── ro_b</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">├── rw_c</span><br><span class="line">└── union</span><br><span class="line"><span class="number">4</span> directories, <span class="number">2</span> files</span><br></pre></td></tr></table></figure>
<p>&emsp;将目录<code>rw_c</code>、<code>ro_a</code>和<code>ro_b</code> union mount到<code>union</code>目录。第一个branch为<code>rw_c</code>(可读写)，第二、三分别为<code>ro_a</code>、<code>ro_b</code>(只读)<br>&emsp;成功union mount后在<code>union</code>目录可看到其余目录的文件。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$&gt; sudo mount -t aufs -o br=rw_c=rw:ro_a=ro:ro_b=ro <span class="attribute">none</span> union</span><br><span class="line"></span><br><span class="line">$&gt; tree</span><br><span class="line">.</span><br><span class="line">├── ro_a</span><br><span class="line">│   └── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">├── ro_b</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">├── rw_c</span><br><span class="line">└── union</span><br><span class="line">    ├── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">    └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line"><span class="number">4</span> directories, <span class="number">4</span> files</span><br></pre></td></tr></table></figure></p>
<p>&emsp;对union mount后的文件<code>union/b.txt</code>进行修改。AUFS会查找优先级高且可读写的branch进行操作(<code>rw_c</code>)，而且由于<strong>copy on write</strong>特性会将源文件<code>ro_b/b.txt</code>文件copy到<code>rw_c</code>目录下再做修改。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$&gt; echo <span class="string">'aufs test'</span> &gt;&gt; union/<span class="tag">b</span><span class="class">.txt</span></span><br><span class="line"></span><br><span class="line">$&gt; tree</span><br><span class="line">.</span><br><span class="line">├── ro_a</span><br><span class="line">│   └── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">├── ro_b</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">├── rw_c</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">└── union</span><br><span class="line">    ├── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">    └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line"><span class="number">4</span> directories, <span class="number">5</span> files</span><br><span class="line"></span><br><span class="line">#源branch保持不变</span><br><span class="line">$&gt; cat ro_b/<span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">ro_b <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line"></span><br><span class="line">#复制ro_b/<span class="tag">b</span>.txt到rw_c/<span class="tag">b</span>.txt并修改</span><br><span class="line">$&gt; cat rw_c/<span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">ro_b <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">aufs test</span><br></pre></td></tr></table></figure></p>
<p>&emsp;在<code>rw_c</code>目录创建<strong><code>.wh.a.txt</code></strong>文件用于屏蔽<code>ro_a/a.txt</code><br>&emsp;源目录文件<code>ro_a/a.txt</code>并不会受到任何影响，但在union mount的目录<code>union</code>下会无法看见<code>union/a.txt</code>文件<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$&gt; touch rw_c/<span class="class">.wh</span><span class="class">.a</span><span class="class">.txt</span></span><br><span class="line">$&gt; tree</span><br><span class="line">.</span><br><span class="line">├── ro_a</span><br><span class="line">│   └── <span class="tag">a</span><span class="class">.txt</span></span><br><span class="line">├── ro_b</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">├── rw_c</span><br><span class="line">│   └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line">└── union</span><br><span class="line">    └── <span class="tag">b</span><span class="class">.txt</span></span><br><span class="line"><span class="number">4</span> directories, <span class="number">4</span> files</span><br></pre></td></tr></table></figure></p>
<h3 id="DeviceMapper"><strong>DeviceMapper</strong></h3><p>&emsp;Docker最开始是使用AUFS实现分层镜像，但由于AUFS并没有被接纳入Linux内核主干(被linus拒绝接纳多次)，仅有Ubuntu对AUFS支持导致兼容性差。对于非Ubuntu的系统为了解决此问题，使用了<strong>DeviceMapper</strong>代替AUFS实现分层镜像。<br>&emsp;DeviceMapper有三个重要的基础概念：<strong>Mapped Device</strong>——&gt;<strong>Mapping Table</strong>——&gt;<strong>Target Device</strong></p>
<ul>
<li><strong>Mapped Device</strong><br>  映射出的逻辑设备。<strong>Mapped Device</strong>通过<strong>Mapping Table</strong>中的映射关系和<strong>Target Device</strong>建立映射。</li>
<li><strong>Mapping Table</strong><br>  保存<strong>Mapped Device</strong>逻辑地址的起始及范围、<strong>Target Device</strong>物理设备的地址偏移量及类型等信息。</li>
<li><strong>Target Device</strong><br>  底层设备。<strong>Target Device</strong>可以是实际的物理块设备，也可以是映射后的<strong>Mapped Device</strong>设备。<br>  DeviceMapper在内核中通过模块化的 Target Driver 插件实现对 IO 请求的过滤或者重新定向等工作，当前已经实现的插件包括软Raid、加密、多路径、镜像、快照等。其中<strong>Thin Provisioning Snapshot</strong>是Docker使用的重要模块。</li>
</ul>
<h4 id="Thin_Provisioning"><strong>Thin Provisioning</strong></h4><p>&emsp;Docker使用<strong>Thin Provisioning</strong>的<strong>Snapshot</strong>技术实现分层镜像，从而解决非Ubuntu系列Linux不原生支持AUFS的问题。<br>&emsp;由于<strong>DeviceMapper</strong>的<strong>Thin Provisioning Snapshot</strong>挺复杂且还处于实验阶段，待我再研究清楚后补上。可参考<a href="http://coolshell.cn/articles/17200.html" target="_blank" rel="external">此篇文章</a>做详细了解。</p>
<h2 id="Docker_镜像(images)"><strong>Docker 镜像(images)</strong></h2><p>&emsp;镜像(image)是Docker的重要构成部分，Docker运行容器(container)时需要本地存在相应的镜像(image)。镜像(image)可自己制作，也可从仓库(repository)中下载。</p>
<h3 id="获取镜像"><strong>获取镜像</strong></h3><p>&emsp;从Docker Hub上获取<code>CentOS 7</code>的镜像<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动Docker进程</span></span><br><span class="line"><span class="variable">$&gt;</span> systemctl start  docker.service		/	service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看公有仓库中的镜像</span></span><br><span class="line"><span class="variable">$&gt;</span> docker search centos		/		docker search ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载镜像</span></span><br><span class="line"><span class="variable">$&gt;</span> docker pull docker.io/centos</span><br><span class="line"><span class="variable">$&gt;</span> docker pull ubuntu</span><br></pre></td></tr></table></figure></p>
<h3 id="删除镜像"><strong>删除镜像</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line"><span class="variable">$&gt;</span> docker images</span><br><span class="line"><span class="constant">REPOSITORY </span>         <span class="constant">TAG </span>                <span class="constant">IMAGE ID </span>           <span class="constant">CREATED </span>            <span class="constant">VIRTUAL SIZE</span></span><br><span class="line">docker.io/ubuntu    latest              af88597ec24b        <span class="number">3</span> days ago          <span class="number">187.9</span> <span class="constant">MB</span></span><br><span class="line">docker.io/centos    latest              <span class="number">60</span>e65a8e403<span class="number">0</span>        <span class="number">2</span> weeks ago         <span class="number">196.6</span> <span class="constant">MB</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据镜像ID删除镜像</span></span><br><span class="line"><span class="variable">$&gt;</span> docker rmi af88597ec24b</span><br></pre></td></tr></table></figure>
<h3 id="修改tag"><strong>修改tag</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker tag af88597ec24b <span class="symbol">ubuntu:</span><span class="number">14.04</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&gt;</span> docker images</span><br><span class="line"><span class="constant">REPOSITORY </span>         <span class="constant">TAG </span>                <span class="constant">IMAGE ID </span>           <span class="constant">CREATED </span>            <span class="constant">VIRTUAL SIZE</span></span><br><span class="line">docker.io/ubuntu    latest              af88597ec24b        <span class="number">3</span> days ago          <span class="number">187.9</span> <span class="constant">MB</span></span><br><span class="line">docker.io/centos    latest              <span class="number">60</span>e65a8e403<span class="number">0</span>        <span class="number">2</span> weeks ago         <span class="number">196.6</span> <span class="constant">MB</span></span><br><span class="line">ubuntu              <span class="number">14.04</span>               af88597ec24b        <span class="number">3</span> days ago          <span class="number">187.9</span> <span class="constant">MB</span></span><br></pre></td></tr></table></figure>
<h3 id="修改/更新镜像"><strong>修改/更新镜像</strong></h3><p>&emsp;在<code>ubuntu14.04</code>镜像上安装vim</p>
<ul>
<li><p>启动容器(container)</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="command">run</span> -ti ubuntu:<span class="number">14.04</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装vim<br>  <code>48febfe7fbd7</code>容器(container)ID，之后<code>commit</code>更新需要用到</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root<span class="variable">@48febfe7fbd7</span><span class="symbol">:/</span><span class="comment"># apt-get install vim</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用commit更新镜像</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker commit -m <span class="string">'install vim'</span> -<span class="tag">a</span> <span class="string">'mogl'</span> <span class="number">48</span>febfe7fbd7 ubuntu:<span class="number">14.04</span><span class="class">.vim</span></span><br><span class="line">eb39a2d496eda77331a6f6efb041473125d40d3f7f51077b100604be3e3cdf39</span><br></pre></td></tr></table></figure>
<ul>
<li><code>-m</code>：提交信息</li>
<li><code>-a</code>：更新的用户信息</li>
<li><code>48febfe7fbd7</code>：容器(container)ID。<code>ID为容器(container)ID而并非镜像(image)ID</code></li>
<li><code>ubuntu:14.04.vim</code>：tag名称</li>
</ul>
</li>
<li><p>查看修改结果</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">ubuntu              <span class="number">14.04</span><span class="class">.vim</span>           eb39a2d496ed        <span class="number">30</span> seconds ago      <span class="number">231</span> MB</span><br><span class="line">docker.io/ubuntu    latest              af88597ec24b        <span class="number">3</span> days ago          <span class="number">187.9</span> MB</span><br><span class="line">ubuntu              <span class="number">14.04</span>               af88597ec24b        <span class="number">3</span> days ago          <span class="number">187.9</span> MB</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用新镜像</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="command">run</span> -<span class="keyword">it</span> ubuntu:<span class="number">14.04</span>.vim</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="导出镜像"><strong>导出镜像</strong></h3><p>&emsp;将已有的镜像导出到本地<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker save -o ubuntu14.<span class="number">04</span><span class="class">.vim</span><span class="class">.tar</span> ubuntu:<span class="number">14.04</span>.vim</span><br></pre></td></tr></table></figure></p>
<h3 id="导入镜像"><strong>导入镜像</strong></h3><p>&emsp;导入使用<code>docker save</code>导出的镜像<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker load &lt; ubuntu14.<span class="number">04</span><span class="class">.vim</span><span class="class">.tar</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Dockerfile_创建镜像"><strong>Dockerfile 创建镜像</strong></h3><p>&emsp;使用<strong>Dockerfile</strong>创建镜像<br>&emsp;<strong>Dockerfile</strong>一般包含四部分：</p>
<ul>
<li>基础镜像</li>
<li>维护者信息</li>
<li>镜像操作指令</li>
<li>容器启动执行命令</li>
</ul>
<p>&emsp;<strong>Dockerfile</strong>指令：</p>
<ul>
<li>FROM<br>  指定基础镜像，若本地缺少镜像则自动从公有库下载镜像<br>  <code>FROM</code>指定必须是Dockerfile的非注释第一个指令<br>  若<code>FROM</code>没有指定<code>tag</code>，默认使用<strong><code>last</code></strong></li>
<li>MAINTAINER<br>  维护者信息</li>
<li>RUN<br>  <code>RUN</code>会在<code>FROM</code>指定的镜像中执行命令，执行完后提交(commit)。<code>docker run image</code>——&gt;<code>RUN command</code>——&gt;<code>docker commit container_id</code><br>  后续<code>RUN</code>都在之前<code>RUN</code>已提交(commit)的镜像基础上进行。<br>  <code>RUN</code>的书写格式分两种：<ul>
<li><strong><code>RUN command</code></strong>    (此方式运行在<code>/bin/sh -c</code>的shell中)</li>
<li><strong><code>RUN [&quot;command&quot;, &quot;param1&quot;, &quot;param2&quot;]</code></strong></li>
</ul>
</li>
<li>CMD<br>  在容器(container)启动时添加一个默认命令。<br>  一个Dockerfile只能有一个<code>CMD</code>，若出现多个<code>CMD</code>则只有最后一个生效。<br>  若用户启动容器(container)时指定了运行的命令，则会覆盖掉 CMD 指定的命令。<br>  <code>CMD</code> 和　<code>RUN</code> 区别：<br>  &emsp;<code>CMD</code>只在容器(container)启动时执行，在使用<code>docker build</code>创建镜像时并不会执行。<br>  &emsp;<code>RUN</code>只在<code>docker build</code>创建镜像时执行，一旦创建完镜像，一切与<code>RUN</code>无关。</li>
<li>EXPOSE<br>  对外映射端口</li>
<li>ENV<br>  设置环境变量</li>
<li>ADD<br>  <code>ADD src dest</code><br>  复制<code>src</code>文件到容器<code>dest</code>。<code>src</code>可指定远程文件URLS。</li>
<li>COPY<br>  和<code>ADD</code>作用相同，但<code>src</code>不能指定远程文件。</li>
<li>ENTRYPOINT<br>  指定容器(container)启动后执行的命令，并且不可被<code>docker run</code>提供的参数覆盖(<code>CMD</code>可被覆盖)</li>
<li>VOLUME<br>  创建挂载点</li>
<li>USER<br>  指定容器(container)运行时的用户/UID(<code>CMD</code>、<code>RUN</code>、<code>ENTRYPOINT</code>使用<code>USER</code>指定的用户运行)</li>
<li>WORKDIR<br>  指定<code>CMD</code>、<code>RUN</code>、<code>ENTRYPOINT</code>的工作目录</li>
<li>ONBUILD</li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mkdir centos7_nginx &amp;&amp; cd centos7_nginx</span><br><span class="line">$&gt; vim Dockerfile</span><br><span class="line"></span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span></span><br><span class="line"><span class="comment"># Dockerfile to build Nginx Installed Containers</span></span><br><span class="line"><span class="comment"># Based on CentOS 7</span></span><br><span class="line"><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span><span class="comment">######</span></span><br><span class="line"><span class="comment"># Set the base image to Ubuntu</span></span><br><span class="line">FROM <span class="attribute">centos</span>:<span class="number">7</span></span><br><span class="line"><span class="comment"># File Author / Maintainer</span></span><br><span class="line">MAINTAINER mogl &lt;fatesai<span class="property">@gmail</span>.com&gt;</span><br><span class="line"><span class="comment"># EPEL</span></span><br><span class="line"><span class="comment">#RUN echo "deb http://archive.ubuntu.com/ubuntu/ raring main universe" &gt;&gt; /etc/apt/sources.list</span></span><br><span class="line">RUN mkdir -p <span class="regexp">/home/work/software/</span> &amp;&amp; cd <span class="regexp">/home/work/software/</span></span><br><span class="line">RUN wget <span class="attribute">http</span>:<span class="regexp">//</span>dl.fedoraproject.org/pub/epel/<span class="number">7</span>/x86_64/e/epel-release-<span class="number">7</span>-<span class="number">5.</span>noarch.rpm &amp;&amp; rpm -ivh epel-release-<span class="number">7</span>-<span class="number">5.</span>noarch.rpm</span><br><span class="line"><span class="comment"># Copy script</span></span><br><span class="line">ADD Sysinit7.sh <span class="regexp">/home/work/software/</span></span><br><span class="line"><span class="comment"># Install Nginx</span></span><br><span class="line">RUN echo <span class="string">"C"</span>|bash /home/work/software/Sysinit7.sh &amp;&gt;&gt; /tmp/nginx_install.log</span><br><span class="line"><span class="comment"># Expose ports</span></span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line"><span class="comment"># Set the default command to execute</span></span><br><span class="line"><span class="comment"># when starting a new container</span></span><br><span class="line">ENTRYPOINT /usr/local/nginx/sbin/nginx -t &amp;&gt; /dev/<span class="literal">null</span> &amp;&amp; /usr/local/nginx/sbin/nginx</span><br><span class="line"></span><br><span class="line">$&gt; docker build -t=<span class="string">"centos7:nginx"</span> /root/centos7.nginx</span><br></pre></td></tr></table></figure>
<h2 id="Docker_容器(container)"><strong>Docker 容器(container)</strong></h2><p>&emsp;容器(container)是应用及应用运行时所需的环境。</p>
<h3 id="创建并启动容器"><strong>创建并启动容器</strong></h3><p>&emsp;使用<strong><code>docker run</code></strong>创建并启动容器。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker run -ti  <span class="symbol">ubuntu:</span><span class="number">14.04</span> /bin/bash</span><br><span class="line">root<span class="variable">@f4bbade713e0</span><span class="symbol">:/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;创建并启动容器(container)，启动Bash终端并运行用户进行交互</p>
<ul>
<li><strong><code>-t</code></strong>：分配伪终端</li>
<li><strong><code>-i</code></strong>：容器标准输入保持打开</li>
<li><strong><code>f4bbade713e0</code></strong>：容器ID</li>
</ul>
<p>&emsp;<strong><code>docker run</code></strong>其实是<strong><code>docker create</code></strong>和<strong><code>docker start</code></strong>的组合，即<code>docker run = docker create + docker start</code>。这一点类似与<strong>Git</strong>中<strong><code>git pull</code></strong>和<strong><code>git fetch</code></strong>、<strong><code>git merge</code></strong>的关系。<br>&emsp;<strong><code>docker run</code></strong>内部流程：</p>
<ul>
<li>检查指定的镜像(images)是否存在本地，不存在则<code>docker pull</code>从公有库中下载镜像(images)</li>
<li><code>docker create</code>使用镜像(images)创建容器(container)，在镜像(images)的只读层(read-only layer)上(镜像栈顶部)添加一层可读写层(read-write layer)</li>
<li>从宿主机接口桥接虚拟接口到容器(container)中并从地址池分配IP给容器(container)</li>
<li><code>docker start</code>启动应用进程</li>
</ul>
<h3 id="启动已停止容器"><strong>启动已停止容器</strong></h3><p>&emsp;当用<code>docker run</code>创建并启动容器(container)后，退出容器(container)则容器处于<code>Existed</code>状态。可用<strong><code>docker start</code></strong>来启动此容器。</p>
<ul>
<li><p>查看退出容器(container)<br>  &emsp;注意<strong>STATUS</strong>，此时为<strong>Existed</strong>状态</p>
  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker ps -l</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES</span><br><span class="line">f4bbade713e0        ubuntu:<span class="number">14.04</span>.vim    <span class="string">"/bin/bash"</span>         <span class="number">46</span> <span class="built_in">seconds</span> ago      Exited (<span class="number">0</span>) <span class="number">2</span> <span class="built_in">seconds</span> ago                       high_brattain</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动已停止容器(container)</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker start f4bbade713e<span class="number">0</span></span><br><span class="line">f4bbade713e<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&gt;</span> docker ps -l</span><br><span class="line"><span class="constant">CONTAINER ID </span>       <span class="constant">IMAGE </span>              <span class="constant">COMMAND </span>            <span class="constant">CREATED </span>            <span class="constant">STATUS </span>             <span class="constant">PORTS </span>              <span class="constant">NAMES</span></span><br><span class="line">f4bbade713e<span class="number">0</span>        <span class="symbol">ubuntu:</span><span class="number">14.04</span>.vim    <span class="string">"/bin/bash"</span>         <span class="number">23</span> minutes ago      <span class="constant">Up </span><span class="number">24</span> seconds                           high_brattain</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入启动后的容器(container)</p>
<ul>
<li><p><strong><code>docker attach</code></strong><br>  &emsp;使用<strong><code>docker attach</code></strong>命令进入容器(container)，若直接<code>Ctrl + d</code>退出时容器(container)会自动停止(<code>UP</code>——&gt;<code>Existed</code>)。若要退出容器并保持容器运行则需要按<strong><code>Ctrl + p + q</code></strong></p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker attach f4bbade713e<span class="number">0</span></span><br><span class="line">root<span class="variable">@f4bbade713e0</span><span class="symbol">:/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>docker exec</code></strong><br>  &emsp;<strong><code>docker exec</code></strong>命令也可进入容器(container)且直接<code>Ctrl + d</code>退出后容器不会停止</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker exec -it f4bbade713e<span class="number">0</span> /bin/bash</span><br><span class="line">root<span class="variable">@f4bbade713e0</span><span class="symbol">:/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="导出容器"><strong>导出容器</strong></h3><p>&emsp;<strong><code>docker export</code></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker ps -<span class="tag">a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">f4bbade713e0        ubuntu:<span class="number">14.04</span><span class="class">.vim</span>    <span class="string">"/bin/bash"</span>         <span class="number">47</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">17</span> minutes ago                       high_brattain</span><br><span class="line">dfc9ce350449        centos:nginx        <span class="string">"/bin/bash"</span>         <span class="number">7</span> hours ago         Exited (<span class="number">0</span>) <span class="number">49</span> minutes ago                       cocky_colden</span><br><span class="line"></span><br><span class="line">$&gt; docker export f4bbade713e0 &gt; ubuntu14.<span class="number">04</span><span class="class">.vim</span><span class="class">.tar</span></span><br></pre></td></tr></table></figure></p>
<h3 id="导入容器"><strong>导入容器</strong></h3><p>&emsp;<strong><code>docker import</code></strong><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; cat ubuntu14<span class="number">.04</span>.vim.tar | docker <span class="keyword">import</span> - <span class="string">ubuntu:</span><span class="number">14.04</span>.vim.<span class="keyword">import</span></span><br></pre></td></tr></table></figure></p>
<h3 id="删除容器"><strong>删除容器</strong></h3><p>&emsp;<strong><code>docker rm</code></strong>(删除镜像是<code>docker rmi</code>)<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker ps -<span class="tag">a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">f4bbade713e0        ubuntu:<span class="number">14.04</span><span class="class">.vim</span>    <span class="string">"/bin/bash"</span>         <span class="number">47</span> minutes ago      Exited (<span class="number">0</span>) <span class="number">17</span> minutes ago                       high_brattain</span><br><span class="line">dfc9ce350449        centos:nginx        <span class="string">"/bin/bash"</span>         <span class="number">7</span> hours ago         Exited (<span class="number">0</span>) <span class="number">49</span> minutes ago                       cocky_colden</span><br><span class="line"></span><br><span class="line">$&gt; docker rm f4bbade713e0</span><br><span class="line">f4bbade713e0</span><br><span class="line"></span><br><span class="line">$&gt; docker ps -<span class="tag">a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES</span><br><span class="line">dfc9ce350449        centos:nginx        <span class="string">"/bin/bash"</span>         <span class="number">7</span> hours ago         Exited (<span class="number">0</span>) <span class="number">54</span> minutes ago                       cocky_colden</span><br></pre></td></tr></table></figure></p>
<h2 id="Docker_数据管理"><strong>Docker 数据管理</strong></h2><p>&emsp;Docker管理数据主要有两种方式：</p>
<ul>
<li>数据卷（Data volume）</li>
<li>数据卷容器（Data volume container）</li>
</ul>
<h3 id="数据卷(Data_Volume)"><strong>数据卷(Data Volume)</strong></h3><p>&emsp;为了能保存和共享容器(container)间的数据，Docker提出<strong>数据卷(Data Volume)</strong>的概念。</p>
<ul>
<li>可绕过统一文件系统(union file system)，数据以文件或目录形式<strong>保存在宿主机文件系统上</strong>，供多个容器(container)之间共享与重用数据。</li>
<li>对数据卷(Data Volume)的修改立即生效</li>
<li>更新数据卷(Data Volume)不影响镜像(images)</li>
<li>数据卷(Data Volume)只要有容器(container)使用就会一直存在</li>
</ul>
<h4 id="创建数据卷(Data_Volume)"><strong>创建数据卷(Data Volume)</strong></h4><p>&emsp;创建数据卷(Data Volume)有两种方式：</p>
<ul>
<li><p>在Dockerfile中使用<code>VOLUME</code>指定</p>
  <figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME /<span class="built_in">path</span>/to/<span class="built_in">dir</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>docker run</code>执行时使用<strong><code>-v</code></strong>参数指定</p>
<ul>
<li><p>创建数据卷</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker run -it -v /data/docker_volume/ <span class="symbol">ubuntu:</span><span class="number">14.04</span> /bin/bash</span><br><span class="line">root<span class="variable">@24eb5121c1e4</span><span class="symbol">:/</span><span class="comment">#</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>获取数据卷在宿主机上对于的路径</p>
  <figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker inspect 24eb5121c1e4</span><br><span class="line"><span class="keyword">...</span> <span class="keyword">...</span></span><br><span class="line">    <span class="string">"Mounts"</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="string">"Name"</span>: <span class="string">"ec85ea5ebcf1317001d251030c15d666917862757272fa2998c0b111141917b8"</span>,</span><br><span class="line">			<span class="string">"Source"</span>: <span class="string">"/var/lib/docker/volumes/ec85ea5ebcf1317001d251030c15d666917862757272fa2998c0b111141917b8/_data"</span>,</span><br><span class="line">			<span class="string">"Destination"</span>: <span class="string">"/data/docker_volume"</span>,</span><br><span class="line">			<span class="string">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">			<span class="string">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">			<span class="string">"RW"</span>: true</span><br><span class="line">		&#125;</span><br><span class="line">	],</span><br><span class="line"><span class="keyword">...</span> <span class="keyword">...</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="挂载宿主目录作为数据卷(Data_Volume)"><strong>挂载宿主目录作为数据卷(Data Volume)</strong></h4><p>&emsp;创建数据卷(Data Volume)后还需要用<code>docker inspect</code>查找对于的宿主目录比较麻烦，直接挂载宿主目录到容器(container)中能方便数据的管理。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker run -it -v <span class="regexp">/data/</span><span class="string">docker_volume:</span><span class="regexp">/www ubuntu:14.04 /</span>bin/bash</span><br></pre></td></tr></table></figure></p>
<p>&emsp;将宿主机上的<code>/data/docker_volume</code>目录挂载到容器(container)的<code>/www</code>目录。</p>
<ul>
<li>宿主目录必须为<strong>绝对路径</strong></li>
<li>挂载到容器(container)中的目录(<code>/www</code>)默认为<strong><code>rw</code></strong>。可设置挂载为只读<code>-v /data/docker_volume:/www:ro</code></li>
</ul>
<h3 id="数据卷容器(Data_Volume_Container)"><strong>数据卷容器(Data Volume Container)</strong></h3><p>&emsp;数据卷容器(Data Volume Container)，即容器(container)创建了数据卷(Data Volume)，此数据卷(Data Volume)专提供给其他容器(container)进行挂载，数据卷容器常用于容器(container)间共享持续更新数据。</p>
<h4 id="创建数据卷容器"><strong>创建数据卷容器</strong></h4><p>&emsp;创建一个数据卷容器(Data Volume Container)并命名为<code>dbdata</code>。(数据卷容器完全可不运行，避免浪费资源)<br>    <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker run -v <span class="regexp">/data/</span>dbdata --name dbdata <span class="string">ubuntu:</span><span class="number">14.04</span> echo <span class="string">"Data-only container"</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>-v /data/dbdata</code>：创建数据卷(Data Volume)</li>
<li><code>--name dbdata</code>：命名此容器(container)为<code>dbdata</code></li>
<li><code>ubuntu:14.04</code>：指定镜像(image)。一般如果用作数据库的话并不会使用系统镜像或最小化镜像(busybox/scratch)，而是直接使用<strong>数据库镜像</strong>。</li>
<li><code>echo &quot;Data-only container&quot;</code>：指定容器执行的命令。作用有二：其一是容器执行完命令后自动退出，数据卷容器不运行；其二是当使用<code>docker ps -a</code>命令查看容器时方便指定容器的用途</li>
</ul>
<h4 id="共享数据卷容器的数据卷"><strong>共享数据卷容器的数据卷</strong></h4><p>&emsp;使用<strong><code>--volumes-from</code></strong>挂载容器(container)中的数据卷(Data Volume)到自身容器(container)中。<br>    <figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="command">run</span> -<span class="keyword">it</span> -d <span class="comment">--volumes-from dbdata --name db1 centos:7 /bin/bash</span></span><br><span class="line">[root@a29120ba32fa /]<span class="comment"># ll /data/</span></span><br><span class="line">total <span class="number">0</span></span><br><span class="line">drwxr-xr-x. <span class="number">2</span> root root <span class="number">36</span> Jan <span class="number">12</span> <span class="number">07</span>:<span class="number">26</span> dbdata</span><br></pre></td></tr></table></figure></p>
<h4 id="备份、恢复数据卷"><strong>备份、恢复数据卷</strong></h4><ul>
<li><p>备份数据卷</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker run --rm --volumes-from dbdata -v <span class="variable">$(</span>pwd)<span class="symbol">:/data/backup</span> <span class="symbol">ubuntu:</span><span class="number">14.04</span> tar zcf /data/backup/backup.tar.gz /data/dbdata</span><br></pre></td></tr></table></figure>
<ul>
<li><code>docker run --rm</code>：创建并运行一个新容器(container)，<strong><code>--rm</code></strong>表示执行完命令后自动删除该容器</li>
<li><code>--volumes-from dbdata</code>：从名为<strong><code>dbdata</code></strong>的数据卷容器中挂载其数据卷到到新容器上(<code>dbdata</code>数据卷容器上的数据卷为<code>/data/dbdata</code>，就是备份此数据卷)</li>
<li><code>-v $(pwd):/data/backup</code>：将宿主机上的当前目录<code>$(pwd)</code>挂载到新容器的<code>/data/backup</code>目录</li>
<li><code>ubuntu:14.04</code>：新容器是基于<code>ubuntu:14.04</code>镜像创建的</li>
<li><code>tar zcf /data/backup/backup.tar.gz /data/dbdata</code>：将新容器中<code>/data/dbdata</code>数据卷目录进行打包压缩备份成<code>/data/backup/backup.tar.gz</code></li>
</ul>
</li>
<li><p>恢复数据卷<br>  &emsp;创建一个带数据卷的新容器，并将备份的数据卷数据恢复</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> docker run -it -d -v /data/dbdata --name recover_db <span class="symbol">ubuntu:</span><span class="number">14.04</span> /bin/bash</span><br><span class="line"><span class="variable">$&gt;</span> docker run --rm --volumes-from recover_db -v <span class="variable">$(</span>pwd)<span class="symbol">:/data/backup</span> <span class="symbol">ubuntu:</span><span class="number">14.04</span> tar zxf /data/backup/backup.tar.gz -<span class="constant">C </span>/</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="删除数据卷"><strong>删除数据卷</strong></h4><p>&emsp;数据卷只要有容器使用便会一直存在，而且在将用到某数据卷的所有容器删除后数据卷并不会自动被删除。若要彻底删除数据卷必须在删除最后一个还挂载着它的容器时使用<strong><code>docker rm -v</code></strong>命令来指定同时删除关联的容器。<br>&emsp;<code>docker run --rm</code>在执行完命令后会自动删除容器，另外也会取消该容器和数据卷的关系。</p>
<h2 id="Docker_网络配置"><strong>Docker 网络配置</strong></h2><h3 id="容器互联"><strong>容器互联</strong></h3><p>&emsp;Docker允许容器(container)间相互连接以交换信息。容器互联需要用到容器名称，所以在启动容器时需要使用<strong>—name</strong>参数为容器自定义容器名。<br>&emsp;容器互联使用<strong><code>--link</code></strong>参数建立连接。</p>
<ul>
<li><p>创建数据库容器<br>  &emsp;使用数据库镜像创建数据库容器，将新容器命名为<code>db</code></p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="keyword">run</span> -<span class="keyword">d</span> --name <span class="keyword">db</span> docker.io/mysql</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建web应用容器并建立连接<br>  &emsp;<strong><code>--link</code></strong>参数的格式为 <strong><code>--link name:alias</code></strong>，<code>name</code>是要连接容器的名称，<code>alias</code>是此连接的别名。</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="keyword">run</span> -<span class="keyword">d</span> -P --name web --link <span class="keyword">db</span>:web_to_db ubuntu:14.04</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Docker_网络模式"><strong>Docker 网络模式</strong></h3><p>&emsp;容器(container)有<strong>4</strong>种网络模式，可在启动容器时通过<strong><code>--net</code></strong>参数指定：<strong><code>docker run --net=network_mode</code></strong></p>
<ul>
<li><strong>host模式</strong>：<strong><code>docker run --net=host</code></strong></li>
<li><strong>container模式</strong>：<strong><code>docker run --net=container:container_name/container_id</code></strong></li>
<li><strong>bridge模式</strong>：<strong><code>docker run</code></strong>／<strong><code>docker run --net=bridge</code></strong>，bridge模式为默认模式</li>
<li><strong>none模式</strong>：<strong><code>docker run --net=none</code></strong></li>
</ul>
<h4 id="host_模式"><strong>host 模式</strong></h4><p>&emsp;host模式，在容器启动时并不会独立创建<strong>Network Namespace</strong>给容器而是和宿主机共用一个<strong>Network Namespace</strong>。简单来说就是容器并没有一个隔离的网络环境而是使用宿主机的网络环境。host模式中除了网络外其余的资源都是实现隔离的。</p>
<h4 id="container_模式"><strong>container 模式</strong></h4><p>&emsp;container模式，指定新建的容器和已存在的容器共享一个<strong>Network Namespace</strong>，新建的容器没有自身的网卡和IP而是和指定的容器共享IP和端口范围。container模式中除了网络外其余的资源也是隔离的，两个容器间的进程可通过<strong><code>lo</code></strong>设备通信。</p>
<h4 id="none_模式"><strong>none 模式</strong></h4><p>&emsp;none模式，容器拥有独立的<strong>Network Namespace</strong>但没有进行任何的网络设置，容器内只有<code>lookback</code>设备，没有网卡、IP和路由等信息。用户可根据需求进行添加和配置。</p>
<h4 id="bridge_模式"><strong>bridge 模式</strong></h4><p>&emsp;bridge模式，此模式为容器的默认模式。<br>&emsp;当Docker启动时，Docker会在宿主机上创建<strong><code>docker0</code></strong>虚拟接口，并会随机分配一个本地未被占用的私有IP地址(常见地址<code>172.17.42.1/16</code>)。<br>&emsp;当容器(container)启动时，会创建一个<strong><code>veth pair</code></strong>设备，<strong><code>veth pair</code></strong>是<strong>一对</strong>虚拟接口。从一个<code>veth</code>接口发出的数据必会直接到达此接口的<code>peer veth</code>。由于此特性，<strong><code>veth pair</code></strong>常用于连接两个网络接口，两个接口设备之间会形成虚拟链路用于完成数据的进出。Docker创建的<strong><code>veth pair</code></strong>，一端为容器(container)内的网络接口，通常是<code>eth0</code>，<code>eth0</code>的IP与<code>docker0</code>的IP属于同一网段确保通信正常；另一端则在宿主机上并被挂载到<strong><code>docker0</code></strong>设备上，通常为<strong><code>vethxxxxxxx</code></strong>。<br>&emsp;Docker网络设备关系如下图所示，<a href="http://dockerpool.com/static/books/docker_practice/advanced_network/README.html" target="_blank" rel="external">图片来源</a><br><img src="http://7xk64o.com1.z0.glb.clouddn.com/docker_network_interface.png" alt="docker_network_interface.png"></p>
<p>&emsp;启动两个容器(container)后宿主机上网络设备情况：<br><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$&gt; ifconfig</span><br><span class="line">docker0: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet <span class="number">172.17</span><span class="number">.42</span><span class="number">.1</span>  netmask <span class="number">255.255</span><span class="number">.0</span><span class="number">.0</span>  broadcast <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">		<span class="keyword">...</span> <span class="keyword">...</span></span><br><span class="line">enp1s0: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet <span class="number">10.0</span><span class="number">.2</span><span class="number">.222</span>  netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>  broadcast <span class="number">10.0</span><span class="number">.2</span><span class="number">.255</span></span><br><span class="line">		<span class="keyword">...</span> <span class="keyword">...</span></span><br><span class="line">lo: flags=<span class="number">73</span>&lt;UP,LOOPBACK,RUNNING&gt;  mtu <span class="number">65536</span></span><br><span class="line">        inet <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>  netmask <span class="number">255.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">		<span class="keyword">...</span> <span class="keyword">...</span></span><br><span class="line">veth273d670: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet6 fe80::d81b:1aff:fe8c:<span class="number">2850</span>  prefixlen <span class="number">64</span>  scopeid <span class="number">0x20</span>&lt;link&gt;</span><br><span class="line">		<span class="keyword">...</span> <span class="keyword">...</span></span><br><span class="line">veth490482d: flags=<span class="number">4163</span>&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="number">1500</span></span><br><span class="line">        inet6 fe80::f880:ebff:fe8c:e5bc  prefixlen <span class="number">64</span>  scopeid <span class="number">0x20</span>&lt;link&gt;</span><br><span class="line">		<span class="keyword">...</span> <span class="keyword">...</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;通过<strong><code>brctl show</code></strong>命令查看挂载在<code>docker0</code>上的<code>veth</code>的设备情况<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; brctl show</span><br><span class="line">bridge <span class="property">name</span>     bridge <span class="property">id</span>               STP enabled     interfaces</span><br><span class="line">docker0         <span class="number">8000.0242809</span>a1ff9       no              veth273d670</span><br><span class="line">                                                                			veth490482d</span><br></pre></td></tr></table></figure></p>
<h3 id="端口映射"><strong>端口映射</strong></h3><p>&emsp;端口映射用在<strong>bridge模式</strong></p>
<h4 id="随机端口映射"><strong>随机端口映射</strong></h4><p>&emsp;为了使外部能访问到容器(container)内，需要在宿主机和容器中做端口映射。<br>&emsp;可在启动容器(container)时使用<strong><code>-P</code></strong>参数进行端口映射，<strong><code>-P</code></strong>参数能让Docker随机映射宿主机的<code>49000~49900</code>的某个端口到容器(container)内部开放的端口。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker <span class="keyword">run</span> -<span class="keyword">d</span> -P ubuntu:14.04 python <span class="keyword">app</span>.py</span><br></pre></td></tr></table></figure></p>
<h4 id="指定端口映射"><strong>指定端口映射</strong></h4><p>&emsp;<strong><code>-p</code></strong>参数默认映射<code>TCP</code>，若想映射<code>UDP</code>则需指定<strong><code>-p 80:5225/udp</code></strong><br>&emsp;格式：<strong><code>-p hostPort:containerPort</code></strong>、<strong><code>-p ip:hostPort:containerPort</code></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; docker run --name nginx -it -d -<span class="tag">p</span> <span class="number">80</span>:<span class="number">5225</span> centos:nginx</span><br><span class="line">$&gt; docker ps -<span class="tag">a</span></span><br><span class="line">CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                     PORTS                          NAMES</span><br><span class="line"><span class="number">5107099</span>c0d1a        centos:nginx         <span class="string">"/bin/bash"</span>              <span class="number">49</span> minutes ago      Up <span class="number">1</span> seconds               <span class="number">80</span>/tcp, <span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">80</span>-&gt;<span class="number">5225</span>/tcp   nginx</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装Docker"><strong>安装Docker</strong></h2><ul>
<li>系统版本：CentOS 7 64bit</li>
<li>内核版本：3.10.0-229.el7.x86_64</li>
<li>Docker版本：docker-1.]]>
    </summary>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Elasticsearch使用小结]]></title>
    <link href="http://yoursite.com/2016/01/06/elasticsearch/"/>
    <id>http://yoursite.com/2016/01/06/elasticsearch/</id>
    <published>2016-01-06T03:33:00.000Z</published>
    <updated>2016-03-02T09:14:59.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Elasticsearch_集群配置"><strong>Elasticsearch 集群配置</strong></h2><p>&emsp;同一个集群中<code>cluster.name</code>相同。Elasticsearch能通过多播发现节点，具有相同<code>cluster.name</code>的Elasticsearch实例自动组成集群，但为了快速发现及避免网络拓扑变化带来的问题，一般会在主节点使用<code>discovery.zen.ping.unicast.hosts</code>指定其他节点。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$&gt; vim /usr/local/elasticsearch/config/elasticsearch<span class="class">.yml</span></span><br><span class="line"></span><br><span class="line">path<span class="class">.data</span>: /data</span><br><span class="line">path<span class="class">.logs</span>: /var/wwwlog/elasticsearch</span><br><span class="line">path<span class="class">.plugins</span>: /usr/local/elasticsearch/plugins</span><br><span class="line">network<span class="class">.host</span>: <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">http<span class="class">.port</span>: <span class="number">9200</span></span><br><span class="line">bootstrap<span class="class">.mlockall</span>: true</span><br><span class="line">indices<span class="class">.fielddata</span><span class="class">.cache</span><span class="class">.size</span>: <span class="number">75%</span></span><br><span class="line">indices<span class="class">.breaker</span><span class="class">.fielddata</span><span class="class">.limit</span>: <span class="number">85%</span></span><br><span class="line">threadpool<span class="class">.search</span><span class="class">.queue_size</span>: <span class="number">10000</span></span><br><span class="line"></span><br><span class="line">#集群配置_主节点</span><br><span class="line">cluster<span class="class">.name</span>: elasticsearch_cluster_mogl</span><br><span class="line">node<span class="class">.name</span>: <span class="string">"master_node_10.0.6.6"</span></span><br><span class="line">node<span class="class">.master</span>: true</span><br><span class="line">node<span class="class">.data</span>: true</span><br><span class="line">discovery<span class="class">.zen</span><span class="class">.ping</span><span class="class">.multicast</span><span class="class">.enabled</span>: false</span><br><span class="line">discovery<span class="class">.zen</span><span class="class">.ping</span><span class="class">.unicast</span><span class="class">.hosts</span>: [<span class="string">"10.0.6.5"</span>, <span class="string">"10.0.1.155"</span>]</span><br></pre></td></tr></table></figure>
<h2 id="Elasticsearch启动_&amp;_停止"><strong>Elasticsearch启动 &amp; 停止</strong></h2><ul>
<li><p><strong>启动</strong></p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/elasticsearch/bin/elasticsearch <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>停止</strong><br>  &emsp;可通过<strong><code>kill</code></strong>命令，也可通过ES的API停止。如果有集群(多于一个节点)，最好通过API停止。</p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> kill &lt;<span class="constant">PID&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集群通过ES的API停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭所有节点</span></span><br><span class="line"><span class="variable">$&gt;</span> curl -<span class="constant">XPOST </span>‘<span class="symbol">http:</span>/<span class="regexp">/localhost:9200/</span><span class="constant">_cluster/</span>nodes/<span class="constant">_shutdown’</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#关闭本地节点</span></span><br><span class="line"><span class="variable">$&gt;</span> curl -<span class="constant">XPOST </span><span class="string">'http://localhost:9200/_cluster/nodes/_local/_shutdown'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>集群重启</strong><br>  &emsp;当Elasticsearch需要升级或更改配置时，需要重启Elasticsearch集群。若希望整个集群持续提供服务则需要进行<strong>Rolling restart</strong>逐个节点进行重启，但逐个重启Elasticsearch节点会造成Elasticsearch对分片的重新分配，这样会带来很大的IO和带宽压力而且由于重启的时间会异常漫长(需要重新计算分片等)。因此在使用<strong>Rolling restart</strong>前需要<strong>关闭分片自动分配机制</strong></p>
<ol>
<li><p>关闭分片自动分配机制</p>
 <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT 'http:<span class="comment">//localhost:9200/_cluster/settings' -d '&#123;</span></span><br><span class="line">	<span class="string">"transient"</span> : &#123;</span><br><span class="line">		<span class="string">"cluster.routing.allocation.enable"</span> : <span class="string">"none"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure>
</li>
<li><p>集群逐个节点进行操作：停止Elasticsearch、修改配置/升级Elasticsearch、启动Elasticsearch </p>
</li>
<li>待所有节点都配置完启动成功后，切记要重新开启分片自动分配机制 <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT 'http:<span class="comment">//localhost:9200/_cluster/settings' -d '&#123;</span></span><br><span class="line">	<span class="string">"transient"</span> : &#123;</span><br><span class="line">		<span class="string">"cluster.routing.allocation.enable"</span> : <span class="string">"all"</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p><strong>集群恢复优化</strong><br>  &emsp;若集群由于特殊原因全部停止而需要重新启动时，则需要考虑节点新增时分片的频繁变动导致的问题。需要对集群恢复做优化配置，具体参考<a href="https://www.elastic.co/guide/en/elasticsearch/guide/current/important-configuration-changes.html#_recovery_settings" target="_blank" rel="external">此文档</a></p>
  <figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#每个节点添加配置(假设有10个节点)</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 集群中的N个节点启动后,才允许进行恢复处理</span></span><br><span class="line">gateway.recover_after_nodes: <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 设置初始化恢复过程的超时时间,超时时间从上一个配置中配置的N个节点启动后算起</span></span><br><span class="line">gateway.recover_after_time: <span class="number">5</span>m</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">## 设置这个集群中期望有多少个节点.一旦这N个节点启动(并且recover_after_nodes也符合),立即开始恢复过程(不等待recover_after_time超时)</span></span><br><span class="line">gateway.expected_nodes: <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#minimum_master_nodes: 2</span></span><br></pre></td></tr></table></figure>
<p>  以上配置表示：至少等待8个节点上线。8个节点上线后，等待5分钟，或者10个节点上线后，才进行数据恢复，这取决于哪个条件先达到。</p>
</li>
</ul>
<h2 id="Elasticsearch_API"><strong>Elasticsearch API</strong></h2><ul>
<li><p><strong>查看集群健康度</strong></p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">http:</span><span class="comment">//localhost:9200/_cluster/health?pretty</span></span><br></pre></td></tr></table></figure>
<p>  &emsp;需要重点关注<strong>status</strong></p>
<ul>
<li>green：主分片和副本分片都可用</li>
<li>yellow：所有主分片可用，副本分片存在异常。当集群节点只有一个时，集群status为yellow，因为只有一个节点副本分片无法分配。</li>
<li>red：存在不可用的主分片。当Elasticsearch在启动时会检查主分片，有时会因为数据量较大需要较长时间。只需等所有主分片都检测加载且没问题后status会自动变化。在启动Elasticsearch时最好调用命令查看状态，关注集群启动情况。</li>
</ul>
</li>
<li><p><strong>查看所有索引大小及状态</strong><br>  &emsp;查看所有索引的大小和状态(open/close)</p>
  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">curl</span> <span class="string">'http://localhost:9200/_cat/indices?bytes=kb'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>删除索引</strong></p>
  <figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> curl -<span class="constant">XDELETE </span><span class="string">'http://localhost:9200/logstash-2015.*'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>插入数据</strong></p>
  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; curl -XPUT 'http:<span class="comment">//localhost:9200/twitter/tweet/1' -d '&#123;</span></span><br><span class="line">	<span class="string">"user"</span> : <span class="string">"kimchy"</span>,</span><br><span class="line">	<span class="string">"post_date"</span> : <span class="string">"2009-11-15T14:12:12"</span>,</span><br><span class="line">	<span class="string">"message"</span> : <span class="string">"trying out Elastic Search"</span></span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Elasticsearch_优化配置"><strong>Elasticsearch 优化配置</strong></h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ES_MIN_MEM</span></span><br><span class="line">ES_MAX_MEM</span><br></pre></td></tr></table></figure>
<p>&emsp;修改文件<strong><code>/usr/local/elasticsearch/bin/elasticsearch.in.sh</code></strong><br>&emsp;内存在32G以内的系统中，尽可能的给大，两个值保持一致。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">indices<span class="class">.fielddata</span><span class="class">.cache</span><span class="class">.size</span>: <span class="number">75%</span></span><br><span class="line">indices<span class="class">.breaker</span><span class="class">.fielddata</span><span class="class">.limit</span>: <span class="number">85%</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>indices.fielddata.cache.size</strong><br>  设置字段缓存大小。当对字段进行排序或聚合时，会将使用到的字段都加载进内存以提高访问速度。将字段都载入内存非常消耗资源，故应确保<code>fielddata.cache</code>的大小足够大以保证结果能被缓存。ES默认缓存大小为无限大，之所以要设置缓存大小是为了防止缓存数据过大导致OOM。</li>
<li><strong>indices.breaker.fielddata.limit</strong><br>  限制字段缓存大小。设置此值为了防止查询缓存字段过大。若需要加载到内存的缓存结果大于<code>indices.fielddata.cache.size</code>且小于<code>indices.breaker.fielddata.limit</code>，ES会接受查询并缓存结果。但数据量大于<code>indices.breaker.fielddata.limit</code>ES便会拒绝查询并抛出异常。</li>
</ul>
<p>&emsp;<code>indices.breaker.fielddata.limit</code>和<code>indices.breaker.fielddata.limit</code>的关系类似于<code>soft nofile</code>和<code>hard nofile</code>。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">threadpool<span class="class">.search</span><span class="class">.queue_size</span>: <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<p>&emsp;控制待处理请求队列大小。当Kibana需要同时查询多个数据或查询数据量比较大时需要增大此值以满足需求。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bootstrap.<span class="string">mlockall:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>&emsp;不让JVM写入SWAP，避免降低ES的性能</p>
<h2 id="Curator"><strong>Curator</strong></h2><p>&emsp;使用<strong>Curator</strong>对旧索引进行close/open/delete。<br>&emsp;对于旧索引使用率不高但占用大量资源，对旧索引进行close或delete有利于优化Elasticsearch集群。</p>
<ul>
<li><p><strong>安装</strong></p>
  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> elasticsearch-curator</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用</strong></p>
  <figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">curator</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">timeout</span> <span class="comment">36000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">localhost</span> <span class="comment">close</span> <span class="comment">indices</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">time</span><span class="literal">-</span><span class="comment">unit</span> <span class="comment">days</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">timestring</span> <span class="comment">'%Y</span><span class="string">.</span><span class="comment">%m</span><span class="string">.</span><span class="comment">%d'</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix</span> <span class="comment">test1</span><span class="literal">-</span></span><br><span class="line"><span class="comment">curator</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">timeout</span> <span class="comment">36000</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">localhost</span> <span class="comment">close</span> <span class="comment">indices</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">older</span><span class="literal">-</span><span class="comment">than</span> <span class="comment">30</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">time</span><span class="literal">-</span><span class="comment">unit</span> <span class="comment">days</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">timestring</span> <span class="comment">'%Y</span><span class="string">.</span><span class="comment">%m</span><span class="string">.</span><span class="comment">%d'</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">prefix</span> <span class="comment">test2_</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>&emsp;关闭前缀为<code>test1-</code>的所有索引<br>&emsp;关闭前缀为<code>test2_</code>且旧于<code>30</code>天的索引</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Elasticsearch_集群配置"><strong>Elasticsearch 集群配置</strong></h2><p>&emsp;同一个集群中<code>cluster.name</code>相同。Elasticsearch能通过多播发现节点，具有相同<c]]>
    </summary>
    
      <category term="EFK/ELK" scheme="http://yoursite.com/tags/EFK-ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ElastAlert]]></title>
    <link href="http://yoursite.com/2016/01/03/elastalert/"/>
    <id>http://yoursite.com/2016/01/03/elastalert/</id>
    <published>2016-01-03T14:24:37.000Z</published>
    <updated>2016-02-29T15:07:06.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;使用EFK(Elasticsearch、Fluentd、Kibana)对日志进行收集分析可视化后，希望通过分析日志能从中发现异常并报警。Elasticsearch有提供此功能的产品<a href="https://www.elastic.co/products/watcher" target="_blank" rel="external">Watcher</a>，但需要收费。开源的方案中有<a href="https://github.com/Yelp/elastalert" target="_blank" rel="external">ElastAlert</a>，于是花了点时间实验。经过一段时间使用后，感觉效果并不太好(或许是自己还没有玩透吧)，功能挺全面但配置较麻烦而且误报不少(可能我配置参数没调好吧)，关键是具参考价值高的资料不多(<a href="https://elastalert.readthedocs.org/en/latest/" target="_blank" rel="external">官方文档</a>、<a href="http://engineeringblog.yelp.com/2015/10/elastalert-alerting-at-scale-with-elasticsearch.html" target="_blank" rel="external">开发团队博客</a>)。不过既然试用了，还是简单记录一下备忘。</p>
<h2 id="安装"><strong>安装</strong></h2><p>&emsp;详细的最新文档参考<a href="https://elastalert.readthedocs.org/en/latest/index.html" target="_blank" rel="external">Elastalert官方文档</a></p>
<h4 id="环境依赖"><strong>环境依赖</strong></h4><ul>
<li>pip</li>
<li>Elasticsearch 1.*</li>
<li>ISO8601 timestamped data</li>
<li>Python 2.6</li>
</ul>
<h4 id="安装Elastalert"><strong>安装Elastalert</strong></h4><p>&emsp;CentOS 6默认安装的<code>setuptools</code>版本为<code>0.16</code>，但mock需要<code>0.17</code>以上版本，所以需要升级<code>setuptools</code><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install libyaml-devel <span class="keyword">python</span>-devel <span class="keyword">python</span>-setuptools <span class="keyword">python</span>-pip</span><br><span class="line">pip install --upgrade setuptools==<span class="number">17.1</span>.<span class="number">1</span></span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/Yelp/elastalert.git</span><br><span class="line"><span class="keyword">cd</span> elastalert</span><br><span class="line">pip install -<span class="keyword">r</span> requirements.txt</span><br><span class="line"><span class="keyword">python</span> setup.<span class="keyword">py</span> install</span><br></pre></td></tr></table></figure></p>
<h2 id="配置"><strong>配置</strong></h2><h3 id="配置Elasticsearch"><strong>配置Elasticsearch</strong></h3><p>&emsp;ElastAlert可将自身信息及数据等存入Elasticsearch方便审计和debug，此为可选项但作者强烈推荐使用。使用<code>elastalert-create-index</code>创建相关内容。<br>&emsp;默认index的名称为<code>elastalert_status</code>，若自定义后在ElastAlert的配置文件需要做相关修改，<code>config.yaml</code>——<code>writeback_index</code><br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; elastalert-<span class="keyword">create</span>-<span class="keyword">index</span></span><br><span class="line"><span class="keyword">New</span> <span class="keyword">index</span> name (<span class="keyword">Default</span> elastalert_status)</span><br><span class="line">Name <span class="keyword">of</span> existing <span class="keyword">index</span> <span class="keyword">to</span> <span class="keyword">copy</span> (<span class="keyword">Default</span> None)</span><br><span class="line"><span class="keyword">New</span> <span class="keyword">index</span> elastalert_status created</span><br><span class="line">Done!</span><br></pre></td></tr></table></figure></p>
<h3 id="ElastAlert主配置文件"><strong>ElastAlert主配置文件</strong></h3><p>&emsp;拷贝模板配置文件后按照自己情况修改<code>cp config.yaml.example config.yaml</code><br>&emsp;常用配置详解<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rules_folder</span>: you_rules_folder_name</span><br><span class="line"><span class="attribute">run_every</span>:</span><br><span class="line">  <span class="attribute">minutes</span>: <span class="number">5</span></span><br><span class="line"><span class="attribute">buffer_time</span>:</span><br><span class="line">  <span class="attribute">minutes</span>: <span class="number">6</span></span><br><span class="line"><span class="attribute">es_host</span>: localhost</span><br><span class="line"><span class="attribute">es_port</span>: <span class="number">9200</span></span><br><span class="line"><span class="attribute">writeback_index</span>: elastalert_status</span><br><span class="line"><span class="attribute">alert_time_limit</span>:</span><br><span class="line">  <span class="attribute">days</span>: <span class="number">1</span></span><br><span class="line"><span class="attribute">max_query_size</span>: <span class="number">20000</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>rules_folder</strong>：存放规则的目录，默认为<code>example_rules</code>。ElastAlert会自动加载该目录下所有的<code>yaml</code>规则文件。</li>
<li><strong>run_every</strong>：每隔多少时间查询Elasticsearch。默认5分钟。<br>  ElastAlert的时间可选项<ul>
<li>weeks</li>
<li>days</li>
<li>hours</li>
<li>minutes</li>
<li>seconds</li>
</ul>
</li>
<li><strong>buffer_time</strong>：设置查询的时间范围。默认45分钟。</li>
<li><strong>es_host</strong>/<strong>es_port</strong>: Elasticsearch</li>
<li><strong>writeback_index</strong>：ElastAlert将查询相关信息存到Elasticsearch的index名称。通过<code>elastalert-create-index</code>命令创建</li>
<li><strong>alert_time_limit</strong>：ElastAlert查询的有效范围时间。默认查询2天。</li>
<li><strong>max_query_size</strong>：ElastAlert最大查询数据量。默认<code>10000</code>。此选项需要稍微注意一下，若项目访问量很大，在<strong>buffer_time</strong>内数据量超过<code>10000</code>则需调整<strong>buffer_time</strong>或<strong>max_query_size</strong>，否则会因为查询量超过<code>10000</code>导致某些时间段无数据而频繁发生误报。</li>
</ul>
<h3 id="ElastAlert监控规则"><strong>ElastAlert监控规则</strong></h3><p>&emsp;ElastAlert的规则都是以<code>yaml</code>文件格式存储在<strong><code>rules_folder</code></strong>目录下。ElastAlert会加载<strong><code>rules_folder</code></strong>目录下所有的规则文件，并监控文件变化。当规则文件发生变动时会自动加载规则。<br>&emsp;ElastAlert默认有多种规则，每种规则都有其各自的配置项。详细内容查看<a href="https://elastalert.readthedocs.org/en/latest/ruletypes.html#ruletypes" target="_blank" rel="external">ElastAlert官方规则文档</a><br>&emsp;默认规则类型有：</p>
<ul>
<li><strong>any</strong>：一旦匹配就触发报警</li>
<li><strong>blacklist</strong>：<code>compare_key</code>里的内容在<code>blacklist</code>上则触发报警</li>
<li><strong>whitelist</strong>：<code>compare_key</code>里的内容不在<code>blacklist</code>上则触发报警</li>
<li><strong>change</strong>：相同<code>query_key</code>，<code>compare_key</code>里的内容，在<code>timeframe</code>范围内有变化则触发报警</li>
<li><strong>frequency</strong>：在满足<code>filter</code>的条件下，<code>timeframe</code>时间内有<code>num_events</code>个记录则触发报警</li>
<li><strong>spike</strong>：在<code>filter</code>条件下，两个<code>timeframe</code>范围内数据量相差比超过<code>spike_height</code>则触发报警。<code>spike_type</code>设置具体涨跌方向是<code>up</code>/<code>down</code>/<code>both</code>。<code>threshold_ref</code>、<code>threshold_cur</code>可设置上下限。</li>
<li><strong>flatline</strong>：<code>timeframe</code>时间范围内，数据量小于<code>threshold</code>则触发报警</li>
<li><strong>new term</strong>：<code>terms_window_size</code>时间范围内最多出现<code>terms_size</code>个新的<code>fields</code>，多于则触发报警</li>
<li><strong>cardinality</strong>：在<code>filter</code>条件下，<code>timeframe</code>时间范围内<strong>不重复</strong>的<code>cardinality_field</code>值超过<code>max_cardinality</code>或者低于<code>min_cardinality</code>则触发报警</li>
</ul>
<p>&emsp;<strong>ElastAlert的规则中的<code>name</code>必须唯一，ElastAlert启动时会检查所有规则中的<code>name</code>字段，若发现不唯一则报错无法启动。</strong></p>
<h3 id="ElastAlert报警"><strong>ElastAlert报警</strong></h3><p>&emsp;ElastAlert提供多种报警方式，详见<a href="https://elastalert.readthedocs.org/en/latest/ruletypes.html#alerts" target="_blank" rel="external">ElastAlert报警方式官方文档</a>。此处主要介绍<strong><code>Email</code></strong><br>&emsp;<strong><code>Email</code></strong>方式使用<strong>SMTP</strong>协议，只要在<strong>规则文件</strong>中添加<code>SMTP</code>相关内容即可<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">smtp_host</span>: <span class="string">SMTP_HOST</span></span><br><span class="line"><span class="attribute">smtp_port</span>: <span class="string">SMTP_PORT</span></span><br><span class="line"><span class="attribute">smtp_auth_file</span>: <span class="string">/path/to/smtp_auth.txt</span></span><br><span class="line"><span class="attribute">from_addr</span>: <span class="string">email_from_address</span></span><br><span class="line"><span class="attribute">email_reply_to</span>: <span class="string">ElastAlert</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong><code>smtp_auth_file</code></strong>是以<code>yaml</code>格式记录用户和密码(注意<code>:</code>后有空格)<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span>: <span class="string">username</span></span><br><span class="line"><span class="attribute">password</span>: <span class="string">password</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;Email报警例子<br>&emsp;邮件内容可自定义，详见<a href="https://elastalert.readthedocs.org/en/latest/ruletypes.html?highlight=alert_text_type#alert-content" target="_blank" rel="external">ElastAlert自定义邮件内容</a><br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">alert:</span></span><br><span class="line">- <span class="string">"email"</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#收件人列表</span></span><br><span class="line"><span class="label">email:</span></span><br><span class="line">- <span class="string">"mogl@yourdomain.com"</span></span><br><span class="line">- <span class="string">"test@yourdomain.com"</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#Email邮件内容自定义</span></span><br><span class="line"><span class="label">alert_text:</span> <span class="string">"At &#123;0&#125;. http状态码200在1分钟内多于2000个"</span></span><br><span class="line"><span class="label">alert_text_args:</span></span><br><span class="line">- <span class="string">"@timestamp"</span></span><br><span class="line"><span class="label">alert_text_type:</span> alert_text_only</span><br></pre></td></tr></table></figure></p>
<h2 id="ElastAlert规则测试_&amp;_启动"><strong>ElastAlert规则测试 &amp; 启动</strong></h2><p>&emsp;ElastAlert提供<strong><code>elastalert-test-rule</code></strong>命令用于测试规则<br>&emsp;执行<code>elastalert-test-rule</code>命令时仅测试规则是否正确，若想真实触发报警则需加上<code>--alert</code>参数<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elastalert-test-rule /path/<span class="keyword">to</span>/your_elastalert_rules.yaml <span class="comment">--alert</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;ElastAlert在终端中启动<br>&emsp;自动加载所有规则。<code>--verbose</code>观察详细过程，若使用<code>--debug</code>参数不会触发alert<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">python</span> -<span class="keyword">m</span> elastalert.elastalert --<span class="keyword">verbose</span> --config /path/<span class="keyword">to</span>/config.yaml</span><br></pre></td></tr></table></figure></p>
<p>&emsp;仅测试具体规则</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m elastalert<span class="class">.elastalert</span> --verbose --config /path/to/config<span class="class">.yaml</span> --rule /path/to/your_elastalert_rule.yaml</span><br></pre></td></tr></table></figure>
<p>&emsp;ElastAlert启动时默认的起始检查时间为<code>present</code>，ElastAlert允许修改起始检测时间<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m elastalert.elastalert --verbose --config /<span class="built_in">path</span>/to/config.yaml --<span class="built_in">start</span> `<span class="built_in">date</span> +<span class="envvar">%Y-%</span>m-<span class="envvar">%dT%</span>H:<span class="envvar">%M:%</span>S%z`</span><br></pre></td></tr></table></figure></p>
<h3 id="Supervisor管理ElastAlert"><strong>Supervisor管理ElastAlert</strong></h3><p>&emsp;ElastAlert自身并没有提供守护进程运行方式，官方建议使用<strong>Supervisor</strong>来管理ElastAlert。<br>&emsp;<strong>Supervisor</strong>配置文件<strong><code>supervisord.conf</code></strong><br><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line"><span class="variable">file=</span>/var/run/elastalert_supervisor.sock</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line"><span class="variable">logfile=</span>/var/wwwlog/elastalert/supervisord.log</span><br><span class="line"><span class="variable">logfile_maxbytes=</span><span class="number">100</span>MB</span><br><span class="line"><span class="variable">logfile_backups=</span><span class="number">5</span></span><br><span class="line"><span class="variable">loglevel=</span>debug</span><br><span class="line"><span class="variable">nodaemon=</span><span class="constant">false</span></span><br><span class="line"><span class="variable">directory=</span>%(here)s</span><br><span class="line"></span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.<span class="variable">rpcinterface_factory =</span> supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line"><span class="variable">serverurl=</span>unix:///var/run/elastalert_supervisor.sock</span><br><span class="line"></span><br><span class="line">[program:elastalert]</span><br><span class="line"><span class="variable">command=</span>/usr/local/elastalert/elastalert.sh</span><br><span class="line"><span class="variable">process_name=</span>elastalert</span><br><span class="line"><span class="variable">autorestart=</span><span class="constant">true</span></span><br><span class="line"><span class="variable">startsecs=</span><span class="number">15</span></span><br><span class="line"><span class="variable">stopsignal=</span>INT</span><br><span class="line"><span class="variable">stopasgroup=</span><span class="constant">true</span></span><br><span class="line"><span class="variable">killasgroup=</span><span class="constant">true</span></span><br><span class="line"><span class="variable">stderr_logfile=</span>/var/wwwlog/elastalert/elastalert.log</span><br><span class="line"><span class="variable">stderr_logfile_maxbytes=</span><span class="number">100</span>MB</span><br><span class="line"><span class="variable">stderr_logfile_backups=</span><span class="number">5</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>/usr/local/elastalert/elastalert.sh</code>启动脚本<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">/usr/bin/python /usr/<span class="built_in">local</span>/elastalert/elastalert/elastalert.py --verbose --config /usr/<span class="built_in">local</span>/elastalert/config.yaml --start $(date +%Y-%m-%dT%H:%M:%S%z)</span><br></pre></td></tr></table></figure></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; chmod a+x <span class="regexp">/usr/</span>local<span class="regexp">/elastalert/</span>elastalert.sh</span><br></pre></td></tr></table></figure>
<p>&emsp;启动Supervisor<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行supervisord</span></span><br><span class="line">supervisord -c /usr/<span class="built_in">local</span>/elastalert/supervisord.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载配置文件</span></span><br><span class="line">supervisorctl -c /usr/<span class="built_in">local</span>/elastalert/supervisord.conf update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制所有进程</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elastalert</span><br><span class="line">supervisorctl start all</span><br><span class="line">supervisorctl stop all</span><br><span class="line">supervisorctl restart all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制目标进程</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/elastalert</span><br><span class="line">supervisorctl stop elastalert</span><br><span class="line">supervisorctl start elastalert</span><br><span class="line">supervisorctl restart elastalert</span><br></pre></td></tr></table></figure></p>
<h2 id="ElastAlert规则配置实例"><strong>ElastAlert规则配置实例</strong></h2><h4 id="frequency"><strong>frequency</strong></h4><p>&emsp;<code>code</code>是<code>field</code>，根据存入Elasticsearch的字段而定，此处的日志中http code定义<code>code</code>(日志由fluentd收集)<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">es_host:</span> localhost</span><br><span class="line"><span class="string">es_port:</span> <span class="number">9200</span></span><br><span class="line"><span class="string">smtp_host:</span> YOUR_SMTP_HOST</span><br><span class="line"><span class="string">smtp_auth_file:</span> <span class="regexp">/path/</span>to/smtp_auth.txt</span><br><span class="line"><span class="string">from_addr:</span> ElastAlert<span class="annotation">@yourdomain</span>.com</span><br><span class="line"><span class="string">email_reply_to:</span> ElastAlert</span><br><span class="line"><span class="string">name:</span> project_code_frequency</span><br><span class="line"><span class="string">type:</span> frequency</span><br><span class="line"><span class="string">index:</span> project*</span><br><span class="line"><span class="string">num_events:</span> <span class="number">180</span></span><br><span class="line"><span class="string">timeframe:</span></span><br><span class="line"><span class="label">  minutes:</span> <span class="number">1</span></span><br><span class="line"><span class="string">filter:</span></span><br><span class="line">- <span class="string">range:</span></span><br><span class="line"><span class="label">	code:</span></span><br><span class="line"><span class="label">	  from:</span> <span class="number">400</span></span><br><span class="line"><span class="label">	  to:</span> <span class="number">599</span></span><br><span class="line"><span class="string">alert:</span></span><br><span class="line">- <span class="string">"email"</span></span><br><span class="line"><span class="string">email:</span></span><br><span class="line">- <span class="string">"mogl@yourdomain.com"</span></span><br><span class="line"><span class="string">alert_text:</span> <span class="string">"At &#123;0&#125;. http异常状态码4XX-5XX在1分钟内多于180"</span></span><br><span class="line"><span class="string">alert_text_args:</span></span><br><span class="line">- <span class="string">"@timestamp"</span></span><br><span class="line"><span class="string">alert_text_type:</span> alert_text_only</span><br><span class="line"><span class="string">use_local_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<h4 id="cardinality"><strong>cardinality</strong></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">es_host:</span> localhost</span><br><span class="line"><span class="string">es_port:</span> <span class="number">9200</span></span><br><span class="line"><span class="string">index:</span> project*</span><br><span class="line"><span class="string">smtp_host:</span> YOUR_SMTP_HOST</span><br><span class="line"><span class="string">smtp_auth_file:</span> <span class="regexp">/path/</span>to/smtp_auth.txt</span><br><span class="line"><span class="string">from_addr:</span> ElastAlert<span class="annotation">@yourdomain</span>.com</span><br><span class="line"><span class="string">email_reply_to:</span> ElastAlert</span><br><span class="line"><span class="string">name:</span> project_ip_cardinality</span><br><span class="line"><span class="string">type:</span> cardinality</span><br><span class="line"><span class="string">cardinality_field:</span> <span class="string">"ip"</span></span><br><span class="line"><span class="string">max_cardinality:</span> <span class="number">2000</span></span><br><span class="line"><span class="string">timeframe:</span></span><br><span class="line"><span class="label">  minutes:</span> <span class="number">1</span></span><br><span class="line"><span class="string">filter:</span></span><br><span class="line">- <span class="string">term:</span></span><br><span class="line"><span class="label">	code:</span> <span class="number">200</span></span><br><span class="line"><span class="string">alert:</span></span><br><span class="line">- <span class="string">"email"</span></span><br><span class="line"><span class="string">email:</span></span><br><span class="line">- <span class="string">"mogl@yourdomain.com"</span></span><br><span class="line"><span class="string">alert_text:</span> <span class="string">"At &#123;0&#125;. 独立IP在1分钟内多于2000个"</span></span><br><span class="line"><span class="string">alert_text_args:</span></span><br><span class="line">- <span class="string">"@timestamp"</span></span><br><span class="line"><span class="string">alert_text_type:</span> alert_text_only</span><br><span class="line"><span class="string">use_local_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<h4 id="flatline"><strong>flatline</strong></h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">es_host:</span> localhost</span><br><span class="line"><span class="string">es_port:</span> <span class="number">9200</span></span><br><span class="line"><span class="string">smtp_host:</span> YOUR_SMTP_HOST</span><br><span class="line"><span class="string">smtp_auth_file:</span> <span class="regexp">/path/</span>to/smtp_auth.txt</span><br><span class="line"><span class="string">from_addr:</span> ElastAlert<span class="annotation">@yourdomain</span>.com</span><br><span class="line"><span class="string">email_reply_to:</span> ElastAlert</span><br><span class="line"><span class="string">name:</span> project_pv_flatline</span><br><span class="line"><span class="string">type:</span> flatline</span><br><span class="line"><span class="string">index:</span> project*</span><br><span class="line"><span class="string">threshold:</span> <span class="number">500</span></span><br><span class="line"><span class="string">timeframe:</span></span><br><span class="line"><span class="label">  minutes:</span> <span class="number">1</span></span><br><span class="line"><span class="string">alert:</span></span><br><span class="line">- <span class="string">"email"</span></span><br><span class="line"><span class="string">email:</span></span><br><span class="line">- <span class="string">"mogl@yourdomain.com"</span></span><br><span class="line"><span class="string">alert_text:</span> <span class="string">"At &#123;0&#125;. PV在1分钟内少于500"</span></span><br><span class="line"><span class="string">alert_text_args:</span></span><br><span class="line">- <span class="string">"@timestamp"</span></span><br><span class="line"><span class="string">alert_text_type:</span> alert_text_only</span><br><span class="line"><span class="string">use_local_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;使用EFK(Elasticsearch、Fluentd、Kibana)对日志进行收集分析可视化后，希望通过分析日志能从中发现异常并报警。Elasticsearch有提供此功能的产品<a href="https://www.elastic.co/products/]]>
    </summary>
    
      <category term="EFK/ELK" scheme="http://yoursite.com/tags/EFK-ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EFK自动化实践记录]]></title>
    <link href="http://yoursite.com/2015/12/29/auto-EFK/"/>
    <id>http://yoursite.com/2015/12/29/auto-EFK/</id>
    <published>2015-12-29T02:27:22.000Z</published>
    <updated>2016-02-29T07:20:02.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;自从使用EFK(Elasticsearch/Fluentd/Kibana)日志系统对各项目的日志进行采集、分析及可视化展示后，逐渐发现添加配置是件繁琐的事情。于是构想对从添加配置到可视化过程中可自动化的部分，初步针对以下方面进行自动化减轻工作负担，让日志的采集、分析和可视化更轻松方便：</p>
<ol>
<li>自动添加Fluentd配置<br> &emsp;日志需要采集则需要在日志生成端对Fluentd进行配置，并且汇聚端同样需要添加相关的Fluentd配置。手动添加既繁琐又容易出错，所以这部分需要交由程序完成。</li>
<li>自动添加Kibana图表<br> &emsp;Fluentd采集日志存入Elasticsearch后，要在Kibana上可视化则需要添加各种图表，添加完图表后还需要添加Dashboard将图表统一添加进Dashboard方便查看。这个过程只是添加一个项目就已经比较繁琐，若需要同时添加多个项目则需要浪费很多时间进行添加图表及Dashboard。这部分是必须自动完成的，手动操作过于耗时耗力。</li>
</ol>
<p>&emsp;针对以上两点，主要通过<code>Shell</code>及<code>Python</code>程序完成自动添加Fluentd配置和Kibana图表的工作，简要流程如下：</p>
<ul>
<li>在Fluentd汇聚端使用<code>Flask</code>Python框架写接口，负责接收传递过来的参数并调用<code>Shell</code>脚本添加Fluentd汇聚端配置及添加Kibana图表。</li>
<li>在日志生成端利用<code>Shell</code>脚本获取输入参数，将参数组合成<code>JSON</code>格式并<code>POST</code>提交给<code>Flask</code>接口。</li>
</ul>
<h3 id="自动添加Fluentd配置"><strong>自动添加Fluentd配置</strong></h3><ul>
<li>日志生成端获取配置Fluentd的<strong><code>tag</code></strong>，组合成<code>JSON</code>格式后<code>POST</code>提交到<code>Python</code>接口</li>
<li><code>Python</code>接口接收<strong><code>tag</code></strong>，调用本地脚本添加汇聚端Fluentd配置。检查Fluentd配置是否正确、重新加载配置文件、返回结果<code>code</code>给客户端脚本</li>
<li>判断服务端返回结果<code>code</code>，成功则添加客户端Fluentd配置</li>
</ul>
<p>客户端脚本部分代码：</p>
<p>&emsp;因为Elasticsearch的<strong>Indices名不能存在大写字母</strong>，所以统一所有<strong>tag</strong>的字母均为小写字母<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入tag(字母必须小写且不包含空格): "</span> FLUENTD_TAG_TMP</span><br><span class="line"><span class="built_in">read</span> -p <span class="string">"请输入日志路径: "</span> LOG_PATH</span><br><span class="line"></span><br><span class="line">FLUENTD_TAG=<span class="string">"`echo <span class="variable">$FLUENTD_TAG_TMP</span>|awk '&#123;gsub(/ +/,"</span>_<span class="string">",<span class="variable">$0</span>);print tolower(<span class="variable">$0</span>)&#125;'`"</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;调用<code>Python</code>接口，<code>POST</code>请求接口将数据以<code>JSON</code>格式提交，添加服务端Fluentd配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"调用服务端接口添加配置文件......"</span></span><br><span class="line">FLUENTD_RESULT=<span class="string">"`curl -s -X POST -H "</span>Content-Type: application/json<span class="string">" -d '&#123;"</span>auth_key<span class="string">":"</span><span class="string">'$AUTH_KEY'</span><span class="string">", "</span>fluentd_tag<span class="string">":"</span><span class="string">'$FLUENTD_TAG'</span><span class="string">", "</span>action_<span class="built_in">type</span><span class="string">":0&#125;' <span class="variable">$POST_URL</span>`"</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$FLUENTD_RESULT</span>"</span> <span class="keyword">in</span></span><br><span class="line">	<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31m服务端添加配置成功\033[0m"</span></span><br><span class="line">		AddFluentdConfig</span><br><span class="line">		ReloadFluentd</span><br><span class="line">		CallKibanaAPI</span><br><span class="line">		;;</span><br><span class="line">	<span class="number">1</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31m认证失败\033[0m"</span></span><br><span class="line">		<span class="built_in">exit</span> <span class="number">6</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="number">2</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31m服务端配置文件已存在\033[0m"</span></span><br><span class="line">		<span class="built_in">read</span> -p <span class="string">"是否继续添加客户端配置(y/n): "</span> FLAG</span><br><span class="line">		<span class="keyword">if</span> [[ <span class="variable">$FLAG</span> == <span class="string">'y'</span> ]]; <span class="keyword">then</span></span><br><span class="line">			AddFluentdConfig</span><br><span class="line">			ReloadFluentd</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="built_in">exit</span> <span class="number">7</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="number">3</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31m服务端配置文件发现错误，请手动检查服务端配置\033[0m"</span></span><br><span class="line">		<span class="built_in">exit</span> <span class="number">8</span></span><br><span class="line">		;;</span><br><span class="line">	<span class="number">4</span>)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31mPOST参数错误\033[0m"</span></span><br><span class="line">		<span class="built_in">exit</span> <span class="number">9</span></span><br><span class="line">		;;</span><br><span class="line">	*)</span><br><span class="line">		<span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\033[0;40;31mError: <span class="variable">$FLUENTD_RESULT</span>.\033[0m"</span></span><br><span class="line">		<span class="built_in">exit</span> <span class="number">10</span></span><br><span class="line">		;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>Python</code>接口接收参数，调用本地脚本添加服务端Fluentd配置<br>&emsp;<code>Python</code>接口使用<code>Flask</code>轻量框架，以守护进程方式运行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoEFKDaemon</span><span class="params">(Daemon)</span>:</span></span><br><span class="line">    <span class="string">"""自动添加Fluentd/Kibana配置"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""overwrite class Daemon's function run()"""</span></span><br><span class="line">        app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">        <span class="decorator">@app.route('/autoEFK', methods=['POST'])</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">autoAddEFKConfig</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="string">"""添加Fluentd配置 &amp; 调用Elasticsearch接口使Kibana画图"""</span></span><br><span class="line">            <span class="comment">#接收POST参数。action_type=0 添加Fluentd；action_type=1 Kibana绘图</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                auth_key = request.json[<span class="string">'auth_key'</span>]</span><br><span class="line">                fluentd_tag = request.json[<span class="string">'fluentd_tag'</span>]</span><br><span class="line">                action_type = int(request.json[<span class="string">'action_type'</span>])</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">return</span> str(<span class="number">4</span>)</span><br><span class="line">            fluentd_bash_script = os.path.join(sys.path[<span class="number">0</span>], <span class="string">'script/autoAddFluentd.sh'</span>)</span><br><span class="line">            kibana_bash_script = os.path.join(sys.path[<span class="number">0</span>], <span class="string">'script/autoAddKibana.sh'</span>)</span><br><span class="line">            <span class="comment">#简单验证</span></span><br><span class="line">            <span class="keyword">if</span> auth_key != <span class="string">'HVlbnRkCg=='</span>:</span><br><span class="line">                <span class="keyword">return</span> str(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">#调用Fluentd shell脚本</span></span><br><span class="line">            <span class="keyword">if</span> action_type == <span class="number">0</span>:</span><br><span class="line">                shellReslulCode = subprocess.call([<span class="string">'bash'</span>, fluentd_bash_script, fluentd_tag])</span><br><span class="line">                <span class="keyword">return</span> str(shellReslulCode)</span><br><span class="line">            <span class="keyword">elif</span> action_type == <span class="number">1</span>:</span><br><span class="line">                shellReslulCode = subprocess.call([<span class="string">'bash'</span>, kibana_bash_script, fluentd_tag])</span><br><span class="line">                <span class="keyword">return</span> str(shellReslulCode)</span><br><span class="line"></span><br><span class="line">        app.run(host=<span class="string">'0.0.0.0'</span>, port=<span class="number">23333</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="Kibana自动绘图"><strong>Kibana自动绘图</strong></h3><p>&emsp;Kibana自身并不提供API，所以想要通过程序使得Kibana自动绘图则需要通过调用Elasticsearch的API。因为Kibana使用Elasticsearch的index来存储<code>Visualizations</code>和<code>Dashboard</code>等信息，在Kibana的配置文件中有相关配置。该index目录在Elasticsearch的indices目录下，默认的目录名称为<strong><code>.kibana</code></strong>。</p>
<figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$&gt; vim /usr/local/kibana/config/kibana.yml</span><br><span class="line"></span><br><span class="line"># Kibana <span class="keyword">uses</span> an <span class="keyword">index</span> <span class="keyword">in</span> Elasticsearch <span class="keyword">to</span> store saved searches, visualizations</span><br><span class="line"># <span class="keyword">and</span> dashboards. It will <span class="keyword">create</span> a <span class="keyword">new</span> <span class="keyword">index</span> <span class="keyword">if</span> it doesn<span class="string">'t already exist.</span><br><span class="line">kibana_index: ".kibana"</span><br><span class="line"></span><br><span class="line">$&gt; ls -ltha /data/elasticsearch/nodes/0/indices/</span><br><span class="line">drwxr-xr-x.  8 root root 4.0K 11月 27 09:12 logstash-2015.11.27</span><br><span class="line">drwxr-xr-x.  8 root root 4.0K 11月 26 09:00 logstash-2015.11.26</span><br><span class="line">drwxr-xr-x.  4 root root 4.0K 11月 23 10:42 .kibana</span></span><br></pre></td></tr></table></figure>
<p>&emsp;可以通过Elasticsearch的API查看及创建Kibana相关数据。有关Kibana最重要的数据有：<strong><code>index-pattern</code></strong>、<strong><code>visualization</code></strong>和<strong><code>dashboard</code></strong>。通过curl可直接查看相关数据<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#查看所有不同类型的数据</span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/_search?type=index-pattern&amp;pretty'</span></span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/_search?type=visualization&amp;pretty'</span></span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/_search?type=dashboard&amp;pretty'</span></span><br><span class="line"></span><br><span class="line">#查看具体类型下具体实例的数据</span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/index-pattern/your_index-pattern_name?pretty'</span></span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/visualization/your_visualization_name?pretty'</span></span><br><span class="line">curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/dashboard/your_dashboard_name?pretty'</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;查看名为<strong><code>logstash-*</code></strong>的<strong>index-pattern</strong>数据<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$&gt; curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/index-pattern/logstash-*?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">".kibana"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"index-pattern"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"logstash-*"</span>,</span><br><span class="line">  <span class="string">"_version"</span> : <span class="number">15</span>,</span><br><span class="line">  <span class="string">"found"</span> : true,</span><br><span class="line">  <span class="string">"_source"</span>:&#123;<span class="string">"title"</span>:<span class="string">"logstash-*"</span>,<span class="string">"timeFieldName"</span>:<span class="string">"@timestamp"</span>,<span class="string">"fields"</span>:<span class="string">"[&#123;\"</span>name\<span class="string">":\"</span>_index\<span class="string">",\"</span>type\<span class="string">":\"</span>string\<span class="string">",\"</span>count\<span class="string">":0,\"</span>scripted\<span class="string">":false,\"</span>indexed\<span class="string">":false,\"</span>analyzed\<span class="string">":false,\"</span>doc_values\<span class="string">":false&#125;,......&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;假如请求一个并不存在的index-pattern，则会返回如下信息<strong><code>&quot;found&quot; : false</code></strong>，可用于判断数据是否已存在于Kibana中。<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$&gt; curl -XGET 'http:<span class="comment">//localhost:9200/.kibana/index-pattern/test*?pretty'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span> : <span class="string">".kibana"</span>,</span><br><span class="line">  <span class="string">"_type"</span> : <span class="string">"index-pattern"</span>,</span><br><span class="line">  <span class="string">"_id"</span> : <span class="string">"test*"</span>,</span><br><span class="line">  <span class="string">"found"</span> : <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;获得数据格式后便可构造数据，通过程序创建Kibana相关数据。比如需要创建<code>index-pattern</code>数据结构和<strong><code>logstash-*</code></strong> <strong>相同</strong>的新index-pattern，新index-pattern的名称为<code>test*</code>，只需要将<strong>_source</strong>的内容做适当修改并提交给Elasticsearch便可：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; curl -<span class="type">XPUT</span> 'http://localhost:<span class="number">9200</span>/.kibana/index-pattern/test-*?pretty' -d '&#123;<span class="string">"title"</span>:<span class="string">"test-*"</span>,<span class="string">"timeFieldName"</span>:<span class="string">"@timestamp"</span>,<span class="string">"fields"</span>:<span class="string">"[&#123;\"name\":\"_index\",\"type\":\"string\",\"count\":0,\"scripted\":false,\"indexed\":false,\"analyzed\":false,\"doc_values\":false&#125;,......&#125;'</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;创建<code>visualization</code>和<code>dashboard</code>方法相同。<code>index-pattern</code>、<code>visualization</code>和<code>dashboard</code>之间相互依赖，注意修改数据中相关联的部分即可。<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">index</span>-pattern————&gt;visualization————&gt;dashboard</span><br></pre></td></tr></table></figure></p>
<h2 id="改进"><strong>改进</strong></h2><p>&emsp;目前初步实现利用脚本程序完成日志的采集、分析和可视化流程，但仍有可改进的地方。</p>
<ol>
<li>利用SaltStack进行统一的配置管理。若项目增多需要管理的配置文件便会增加，为方便统一管理配置文件需要使用额外的工具进行管理。</li>
<li>操作的Web界面化。目前只实现运行脚本添加配置，为更进一步方便添加、管理配置，可开发拥有Web界面操作及结合SaltStack的管理系统。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;自从使用EFK(Elasticsearch/Fluentd/Kibana)日志系统对各项目的日志进行采集、分析及可视化展示后，逐渐发现添加配置是件繁琐的事情。于是构想对从添加配置到可视化过程中可自动化的部分，初步针对以下方面进行自动化减轻工作负担，让日志的采集、]]>
    </summary>
    
      <category term="EFK/ELK" scheme="http://yoursite.com/tags/EFK-ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[EFK日志系统——Fluentd代替Logstash & GeoIP地图]]></title>
    <link href="http://yoursite.com/2015/12/28/EFK/"/>
    <id>http://yoursite.com/2015/12/28/EFK/</id>
    <published>2015-12-28T13:08:38.000Z</published>
    <updated>2016-02-28T13:56:56.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装"><strong>安装</strong></h2><ul>
<li>Elasticsearch、Kibana详见<a href="https://moguol.github.io/2015/12/21/ELK/" target="_blank" rel="external">Elasticsearch、Kibana安装</a></li>
<li>Fluentd详见<a href="https://moguol.github.io/2015/12/20/fluentd/" target="_blank" rel="external">Fluentd安装</a></li>
<li><p>Fluentd插件</p>
<ul>
<li><p>fluent-plugin-secure_forward、fluent-plugin-elasticsearch<br>  secure_forward插件可选，也可用内置的forward插件</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; td-agent-gem install fluent-<span class="keyword">plugin</span>-secure-forward fluent-<span class="keyword">plugin</span>-elasticsearch</span><br></pre></td></tr></table></figure>
</li>
<li><p>fluent-plugin-geoip<br>  此插件也可选，如果不需要统计IP位置，Kibana不需要地图可忽略。</p>
  <figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#若没安装EPEL，则需事先安装</span></span><br><span class="line"><span class="preprocessor">#$&gt; rpm -Uvh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span></span><br><span class="line"><span class="preprocessor">#$&gt; rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-6.rpm</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#若安装EPEL后yum报错Error: Cannot retrieve metalink for repository: epel. Please verify its path and try again。须更新ca</span></span><br><span class="line"><span class="preprocessor">#yum --disablerepo="epel" -y update ca-certificates</span></span><br><span class="line"></span><br><span class="line">$&gt; yum install geoip-devel</span><br><span class="line">$&gt; td-agent-gem install fluent-plugin-geoip</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="Fluentd配置"><strong>Fluentd配置</strong></h2><p>&emsp;如果之前对Fluentd没有了解，可先看看<a href="http://localhost:4000/2015/12/20/fluentd/" target="_blank" rel="external">此篇博客文章</a>有个大概的认识。<br>&emsp;Fluentd Collector(A)收集日志转发到Fluentd Aggregator(B)，再通过插件<code>fluent-plugin-elasticsearch</code>存入Elasticsearch<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access.<span class="function"><span class="title">log</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-tail</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-secure_forward</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-secure_forward</span><span class="params">(B)</span></span>——&gt;<span class="function"><span class="title">Fluentd-elasticsearch</span><span class="params">(B)</span></span>——&gt;Elasticsearch——&gt;Kibana</span><br></pre></td></tr></table></figure></p>
<h3 id="Fluentd_Aggregator"><strong>Fluentd Aggregator</strong></h3><p>&emsp;日志汇聚端配置<code>/etc/td-agent/td-agent.conf</code><br>&emsp;若传输需要加密，则需要先生成证书和key，详见<a href="http://localhost:4000/2015/12/20/fluentd/" target="_blank" rel="external">此博客文章</a><br>&emsp;auth验证也是可选的<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="literal">source</span>&gt;</span><br><span class="line">  <span class="built_in">type</span> secure_forward</span><br><span class="line">  port <span class="number">22222</span></span><br><span class="line">  shared_key secret_string</span><br><span class="line">  self_hostname logs_server.fluent</span><br><span class="line"></span><br><span class="line">  secure <span class="keyword">false</span></span><br><span class="line">  <span class="comment">#若传输内容需要加密则用此配置</span></span><br><span class="line">  <span class="comment">#secure true</span></span><br><span class="line">  <span class="comment">#ca_cert_path        /etc/td-agent/ca/ca_cert.pem</span></span><br><span class="line">  <span class="comment">#ca_private_key_path /etc/td-agent/ca/ca_key.pem</span></span><br><span class="line">  <span class="comment">#ca_private_key_passphrase  passphrase_for_private_CA_secret_key</span></span><br><span class="line"></span><br><span class="line">  authentication yes</span><br><span class="line">  &lt;<span class="keyword">user</span>&gt;</span><br><span class="line">    username your_usrname</span><br><span class="line">    <span class="literal">password</span> your_password</span><br><span class="line">  &lt;/<span class="keyword">user</span>&gt;</span><br><span class="line">&lt;/<span class="literal">source</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;match efk_test.**&gt;</span><br><span class="line">  <span class="built_in">type</span> elasticsearch</span><br><span class="line">  <span class="keyword">host</span> localhost</span><br><span class="line">  port <span class="number">9200</span></span><br><span class="line">  index_name fluentd</span><br><span class="line">  include_tag_key <span class="keyword">true</span></span><br><span class="line">  tag_key @log_name</span><br><span class="line">  type_name nginx</span><br><span class="line">  logstash_format <span class="keyword">true</span></span><br><span class="line">  logstash_prefix node1   	<span class="comment">#Elasticsearch存储indices的前缀(必须小写)，默认值为：logstash</span></span><br><span class="line">  utc_index <span class="keyword">false</span></span><br><span class="line">  flush_interval <span class="number">10</span>s</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="Fluentd_Collector"><strong>Fluentd Collector</strong></h3><p>&emsp;日志收集客户端配置<code>/etc/td-agent/td-agent.conf</code><br>&emsp;若传输内容需要加密，则需从汇聚端将证书拷贝到客户端<br>&emsp;auth验证可选，若汇聚端没有设置则不需要<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;source&gt;</span></span><br><span class="line">    type          tail</span><br><span class="line">    tag           efk_test</span><br><span class="line">    path          /var/wwwlog/efk_test/access.log</span><br><span class="line">    pos_file      /tmp/efk_test.fluentd.pos</span><br><span class="line">    format        /^(?<span class="variable">&lt;ip&gt;</span>[^ ]<span class="keyword">*</span>) \[(?<span class="variable">&lt;time&gt;</span>[^\]]<span class="keyword">*</span>)\] <span class="string">"(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^ ]*) +\S*)?"</span> (?<span class="variable">&lt;code&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;size&gt;</span>[^ ]<span class="keyword">*</span>) <span class="string">"(?&lt;referer&gt;[^\"]*)"</span> <span class="string">"(?&lt;agent&gt;[^\"]*)"</span> (?<span class="variable">&lt;forward&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;reqlen&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;reqtime&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;backend&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;domain&gt;</span>[^ ]<span class="keyword">*</span>)/</span><br><span class="line">    time_format   %d/%b/%Y:%H:%M:%S %z</span><br><span class="line"><span class="variable">&lt;/source&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;match efk_test.**&gt;</span></span><br><span class="line">  type secure_forward</span><br><span class="line">  shared_key secret_string</span><br><span class="line">  self_hostname node1.fluentd</span><br><span class="line"></span><br><span class="line">  secure false</span><br><span class="line">  <span class="comment">#若传输内容需要加密则用此配置</span></span><br><span class="line">  <span class="comment">#secure true</span></span><br><span class="line">  <span class="comment">#ca_cert_path        /etc/td-agent/ca/ca_cert.pem</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">&lt;server&gt;</span></span><br><span class="line">    host logs_server.fluentd</span><br><span class="line">    port 22222</span><br><span class="line">    username your_usrname</span><br><span class="line">    password your_password</span><br><span class="line">  <span class="variable">&lt;/server&gt;</span></span><br><span class="line"><span class="variable">&lt;/match&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="GeoIP"><strong>GeoIP</strong></h2><p>&emsp;通过GeoIP库查询地理位置，并通过Kibana地图展示<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">access.<span class="function"><span class="title">log</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-tail</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-secure_forward</span><span class="params">(A)</span></span>——&gt;<span class="function"><span class="title">Fluentd-secure_forward</span><span class="params">(B)</span></span>——&gt;<span class="function"><span class="title">Fluentd-geoip</span><span class="params">(B)</span></span>——&gt;<span class="function"><span class="title">Fluentd-elasticsearch</span><span class="params">(B)</span></span>——&gt;Elasticsearch——&gt;Kibana</span><br></pre></td></tr></table></figure></p>
<h3 id="Elasticsearch经纬格式配置"><strong>Elasticsearch经纬格式配置</strong></h3><p>&emsp;<strong>在配置Fluentd之前必须做此步骤!</strong>否则Kibana找不到<strong><code>geo_point</code></strong>类型字段无法在世界地图上展示。<br>&emsp;<code>fluent-plugin-geoip</code>插件在存储经纬字段时使用的是<strong><code>string</code></strong>类型(Fluentd默认存入Elasticsearch的字段类型都是<strong><code>string</code></strong>)，但Kibana规定必须使用<strong><code>geo_point</code></strong>类型字段。所以在Elasticsearch存储时必须将经纬字段设置成<strong><code>geo_point</code></strong>。最简单的办法是通过Elasticsearch的模板映射来解决。</p>
<p>&emsp;添加Elasticsearch模板<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl -X PUT <span class="string">http:</span><span class="comment">//localhost:9200/_template/geoip_type_template -d'&#123;</span></span><br><span class="line">  <span class="string">"template"</span>: <span class="string">"*"</span>,</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"geoip_nginx"</span>: &#123;</span><br><span class="line">      <span class="string">"properties"</span>: &#123;</span><br><span class="line">        <span class="string">"geoip_location"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"geo_point"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="string">'</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;添加名为<code>geoip_type_template</code>的模板，模板的应用对象为所有已存在的模板<code>*</code>，对存在<code>type_name</code>为<code>geoip_nginx</code>的数据，将字段<code>geoip_location</code>的类型设置为<code>geo_point</code><br>&emsp;若Elasticsearch生成indices，可调用Elasticsearch API查看mapping映射类型<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET <span class="string">localhost:</span><span class="number">9200</span><span class="regexp">/indices_name/</span>_mapping</span><br></pre></td></tr></table></figure></p>
<h3 id="Fluentd_Aggregator配置"><strong>Fluentd Aggregator配置</strong></h3><p>&emsp;<a href="https://dev.maxmind.com/geoip/legacy/geolite/" target="_blank" rel="external">免费版GeoIP库下载地址</a><br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="literal">source</span>&gt;</span><br><span class="line">  <span class="built_in">type</span> secure_forward</span><br><span class="line">  port <span class="number">22222</span></span><br><span class="line">  shared_key secret_string</span><br><span class="line">  self_hostname logs_server.fluent</span><br><span class="line"></span><br><span class="line">  secure <span class="keyword">false</span></span><br><span class="line">  <span class="comment">#若传输内容需要加密则用此配置</span></span><br><span class="line">  <span class="comment">#secure true</span></span><br><span class="line">  <span class="comment">#ca_cert_path        /etc/td-agent/ca/ca_cert.pem</span></span><br><span class="line">  <span class="comment">#ca_private_key_path /etc/td-agent/ca/ca_key.pem</span></span><br><span class="line">  <span class="comment">#ca_private_key_passphrase  passphrase_for_private_CA_secret_key</span></span><br><span class="line"></span><br><span class="line">  authentication yes</span><br><span class="line">  &lt;<span class="keyword">user</span>&gt;</span><br><span class="line">    username your_usrname</span><br><span class="line">    <span class="literal">password</span> your_password</span><br><span class="line">  &lt;/<span class="keyword">user</span>&gt;</span><br><span class="line">&lt;/<span class="literal">source</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;match geoip.**&gt;</span><br><span class="line">  <span class="built_in">type</span> geoip</span><br><span class="line">  geoip_lookup_key  <span class="literal">ip</span>   	<span class="comment">#设置ip地址所在的key值</span></span><br><span class="line">  geoip_database    <span class="string">"/etc/td-agent/geoipdb/GeoLiteCity.dat"</span> 	<span class="comment">#指定geoip库</span></span><br><span class="line"></span><br><span class="line">  &lt;record&gt;</span><br><span class="line">    country  $<span class="keyword">&#123;</span>country_code[<span class="string">'ip'</span>]<span class="keyword">&#125;</span></span><br><span class="line">    geoip_location	$<span class="keyword">&#123;</span>latitude[<span class="string">'ip'</span>]<span class="keyword">&#125;</span>,$<span class="keyword">&#123;</span>longitude[<span class="string">'ip'</span>]<span class="keyword">&#125;</span>		<span class="comment">#geo_point类型字段</span></span><br><span class="line">  &lt;/record&gt;</span><br><span class="line"></span><br><span class="line">  remove_tag_prefix    geoip.</span><br><span class="line">  <span class="literal">tag</span>   es.$<span class="keyword">&#123;</span><span class="literal">tag</span><span class="keyword">&#125;</span></span><br><span class="line"></span><br><span class="line">  skip_adding_null_record   <span class="keyword">true</span>	<span class="comment">#跳过IP库查找不到的记录。false则会在查找不到的记录中添加'&#123;country:null, geoip_location null&#125;'</span></span><br><span class="line">  log_level info</span><br><span class="line">  flush_interval   <span class="number">5</span>s</span><br><span class="line">&lt;/match&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;match es.**&gt;</span><br><span class="line">  <span class="built_in">type</span> elasticsearch</span><br><span class="line">  <span class="keyword">host</span> localhost</span><br><span class="line">  port <span class="number">9200</span></span><br><span class="line">  index_name fluentd</span><br><span class="line">  include_tag_key <span class="keyword">true</span></span><br><span class="line">  tag_key @log_name</span><br><span class="line">  logstash_format <span class="keyword">true</span></span><br><span class="line">  type_name geoip_nginx		<span class="comment">#geoip_type_template模板根据此type_name匹配</span></span><br><span class="line">  logstash_prefix node1   	<span class="comment">#Elasticsearch存储indices的前缀(必须小写)，默认值为：logstash</span></span><br><span class="line">  utc_index <span class="keyword">false</span></span><br><span class="line">  flush_interval <span class="number">10</span>s</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="Fluentd_Collector配置"><strong>Fluentd Collector配置</strong></h3><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;source&gt;</span></span><br><span class="line">    type          tail</span><br><span class="line">    tag           geoip</span><br><span class="line">    path          /var/wwwlog/efk_test/access.log</span><br><span class="line">    pos_file      /tmp/efk_test.fluentd.pos</span><br><span class="line">    format        /^(?<span class="variable">&lt;ip&gt;</span>[^ ]<span class="keyword">*</span>) \[(?<span class="variable">&lt;time&gt;</span>[^\]]<span class="keyword">*</span>)\] <span class="string">"(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^ ]*) +\S*)?"</span> (?<span class="variable">&lt;code&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;size&gt;</span>[^ ]<span class="keyword">*</span>) <span class="string">"(?&lt;referer&gt;[^\"]*)"</span> <span class="string">"(?&lt;agent&gt;[^\"]*)"</span> (?<span class="variable">&lt;forward&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;reqlen&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;reqtime&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;backend&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;domain&gt;</span>[^ ]<span class="keyword">*</span>)/</span><br><span class="line">    time_format   %d/%b/%Y:%H:%M:%S %z</span><br><span class="line"><span class="variable">&lt;/source&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;match geoip.**&gt;</span></span><br><span class="line">  type secure_forward</span><br><span class="line">  shared_key secret_string</span><br><span class="line">  self_hostname node1.fluentd</span><br><span class="line"></span><br><span class="line">  secure false</span><br><span class="line">  <span class="comment">#若传输内容需要加密则用此配置</span></span><br><span class="line">  <span class="comment">#secure true</span></span><br><span class="line">  <span class="comment">#ca_cert_path        /etc/td-agent/ca/ca_cert.pem</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">&lt;server&gt;</span></span><br><span class="line">    host logs_server.fluentd</span><br><span class="line">    port 22222</span><br><span class="line">    username your_usrname</span><br><span class="line">    password your_password</span><br><span class="line">  <span class="variable">&lt;/server&gt;</span></span><br><span class="line"><span class="variable">&lt;/match&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="展示"><strong>展示</strong></h2><p>&emsp;图为某接口的日志统计情况，目前只有初步统计图，更详细的数据图有待添加。<br><img src="http://7xk64o.com1.z0.glb.clouddn.com/EFK_GeoIP.jpeg" alt="EFK_GeoIP.jpeg"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装"><strong>安装</strong></h2><ul>
<li>Elasticsearch、Kibana详见<a href="https://moguol.github.io/2015/12/21/ELK/" target="_blank" rel="e]]>
    </summary>
    
      <category term="EFK/ELK" scheme="http://yoursite.com/tags/EFK-ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Elasticsearch、Logstash、Kibana]]></title>
    <link href="http://yoursite.com/2015/12/21/ELK/"/>
    <id>http://yoursite.com/2015/12/21/ELK/</id>
    <published>2015-12-21T12:02:12.000Z</published>
    <updated>2016-02-28T13:27:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="基础环境"><strong>基础环境</strong></h2><ul>
<li>CentOS release 6.4 (Final) 64bit</li>
<li>jdk-8u45-linux-x64</li>
<li>Elasticsearch 1.7.1</li>
<li>Kibana-4.1.1-linux-x64</li>
<li>Logstash-1.5.4-1/Logstash-forwarder-0.4.0-1.x86_64</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/java</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JAVA_HOME</span>/lib/dt.jar</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=/usr/<span class="built_in">local</span>/java/jre</span><br><span class="line"></span><br><span class="line">[root@mogl ~]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.8.0_45"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_45-b14)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">25.45</span>-b02, mixed mode)</span><br></pre></td></tr></table></figure>
<h2 id="Elasticsearch"><strong>Elasticsearch</strong></h2><h3 id="安装"><strong>安装</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> wget <span class="symbol">https:</span>/<span class="regexp">/download.elastic.co/elasticsearch</span><span class="regexp">/elasticsearch/elasticsearch</span>-<span class="number">1.7</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="variable">$&gt;</span> tar -zxf elasticsearch-<span class="number">1.7</span>.<span class="number">1</span>.tar.gz</span><br><span class="line"><span class="variable">$&gt;</span> mv elasticsearch-<span class="number">1.7</span>.<span class="number">1</span> /usr/local/elasticsearch</span><br></pre></td></tr></table></figure>
<h3 id="配置"><strong>配置</strong></h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$&gt; vim /usr/local/elasticsearch/config/elasticsearch<span class="class">.yml</span></span><br><span class="line"></span><br><span class="line">path<span class="class">.data</span>: /data</span><br><span class="line">path<span class="class">.logs</span>: /var/wwwlog/elasticsearch</span><br><span class="line">path<span class="class">.plugins</span>: /usr/local/elasticsearch/plugins</span><br><span class="line">network<span class="class">.host</span>: <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line">http<span class="class">.port</span>: <span class="number">9200</span></span><br><span class="line">bootstrap<span class="class">.mlockall</span>: true</span><br><span class="line">indices<span class="class">.fielddata</span><span class="class">.cache</span><span class="class">.size</span>: <span class="number">75%</span></span><br><span class="line">indices<span class="class">.breaker</span><span class="class">.fielddata</span><span class="class">.limit</span>: <span class="number">85%</span></span><br><span class="line">threadpool<span class="class">.search</span><span class="class">.queue_size</span>: <span class="number">10000</span></span><br><span class="line">discovery<span class="class">.zen</span><span class="class">.ping</span><span class="class">.multicast</span><span class="class">.enabled</span>: false</span><br><span class="line"></span><br><span class="line"><span class="id">#Cluster</span></span><br><span class="line"><span class="id">#node</span><span class="class">.name</span>: <span class="string">"master_node_10.0.6.6"</span></span><br><span class="line"><span class="id">#node</span><span class="class">.master</span>: true</span><br><span class="line"><span class="id">#node</span><span class="class">.data</span>: true</span><br><span class="line"><span class="id">#discovery</span><span class="class">.zen</span><span class="class">.ping</span><span class="class">.unicast</span><span class="class">.hosts</span>: [<span class="string">"10.0.6.5"</span>, <span class="string">"10.0.1.155"</span>]</span><br></pre></td></tr></table></figure>
<p>&emsp;根据自身机器内存情况调整JVM内存大小，原则上是越大越好但需要预留足够的内存给系统，此规则也是根据实际情况而定并非铁律。<br>&emsp;配置文件：<strong><code>/usr/local/elasticsearch/bin/elasticsearch.in.sh</code></strong><br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">ES_MIN_MEM=<span class="value"><span class="number">10</span>g</span></span></span><br><span class="line"><span class="setting">ES_MAX_MEM=<span class="value"><span class="number">10</span>g</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="启动_&amp;_停止"><strong>启动 &amp; 停止</strong></h3><h4 id="启动"><strong>启动</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; /usr/<span class="built_in">local</span>/elasticsearch/bin/elasticsearch <span class="operator">-d</span></span><br></pre></td></tr></table></figure>
<h4 id="停止"><strong>停止</strong></h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#停止本地节点</span></span><br><span class="line"><span class="variable">$&gt;</span> curl -<span class="constant">XPOST </span><span class="string">'http://localhost:9200/_cluster/nodes/_local/_shutdown'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#停止集群所有节点</span></span><br><span class="line"><span class="variable">$&gt;</span> curl -<span class="constant">XPOST </span><span class="string">'http://localhost:9200/_shutdown'</span></span><br></pre></td></tr></table></figure>
<h4 id="检验"><strong>检验</strong></h4><p>&emsp;启动Elasticsearch后访问<code>http://yourip:9200</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="regexp">/usr/</span>local<span class="regexp">/elasticsearch/</span>bin/elasticsearch -d</span><br><span class="line"></span><br><span class="line">$&gt; curl -XGET <span class="string">http:</span><span class="comment">//127.0.0.1:9200</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"status"</span> : <span class="number">200</span>,</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"Vindaloo"</span>,</span><br><span class="line">  <span class="string">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</span><br><span class="line">  <span class="string">"version"</span> : &#123;</span><br><span class="line">    <span class="string">"number"</span> : <span class="string">"1.7.1"</span>,</span><br><span class="line">    <span class="string">"build_hash"</span> : <span class="string">"b88f43fc40b0bcd7f173a1f9ee2e97816de80b19"</span>,</span><br><span class="line">    <span class="string">"build_timestamp"</span> : <span class="string">"2015-07-29T09:54:16Z"</span>,</span><br><span class="line">    <span class="string">"build_snapshot"</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"lucene_version"</span> : <span class="string">"4.10.4"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"tagline"</span> : <span class="string">"You Know, for Search"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Kibana"><strong>Kibana</strong></h2><h3 id="安装-1"><strong>安装</strong></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useradd kibana</span><br><span class="line">wget <span class="string">https:</span><span class="comment">//download.elastic.co/kibana/kibana/kibana-4.1.1-linux-x64.tar.gz</span></span><br><span class="line">tar -zxf kibana-<span class="number">4.1</span><span class="number">.1</span>-linux-x64.tar.gz</span><br><span class="line">mv kibana-<span class="number">4.1</span><span class="number">.1</span>-linux-x64 <span class="regexp">/usr/</span>local/kibana</span><br><span class="line">chown -R <span class="string">kibana:</span>kibana <span class="regexp">/usr/</span>local<span class="regexp">/kibana/</span></span><br></pre></td></tr></table></figure>
<h3 id="配置-1"><strong>配置</strong></h3><p>&emsp;配置文件<strong><code>/usr/local/kibana/config/kibana.yml</code></strong><br>&emsp;根据自身环境配置<strong><code>elasticsearch_url</code></strong>、<strong><code>host</code></strong>、<strong><code>port</code></strong>等参数</p>
<h4 id="Kibana启动控制脚本"><strong>Kibana启动控制脚本</strong></h4><p>&emsp;添加启动脚本<br>&emsp;启动Kibana<strong><code>/etc/init.d/kibana start</code></strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line"><span class="comment"># Init script for kibana</span></span><br><span class="line"><span class="comment"># From Kibana package</span></span><br><span class="line"><span class="comment"># Generated by pleaserun.</span></span><br><span class="line"><span class="comment"># Implemented based on LSB Core 3.1:</span></span><br><span class="line"><span class="comment">#   * Sections: 20.2, 20.3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides:          kibana</span></span><br><span class="line"><span class="comment"># Required-Start:    $remote_fs $syslog</span></span><br><span class="line"><span class="comment"># Required-Stop:     $remote_fs $syslog</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description:</span></span><br><span class="line"><span class="comment"># Description:       no description given</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line">PATH=/sbin:/usr/sbin:/bin:/usr/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line">name=kibana</span><br><span class="line">program=/usr/<span class="built_in">local</span>/kibana/bin/kibana</span><br><span class="line">args=<span class="string">''</span></span><br><span class="line">pidfile=<span class="string">"/var/run/<span class="variable">$name</span>.pid"</span></span><br><span class="line">user=<span class="string">"kibana"</span></span><br><span class="line">group=<span class="string">"kibana"</span></span><br><span class="line"><span class="built_in">chdir</span>=<span class="string">"/"</span></span><br><span class="line">chroot=<span class="string">"/"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">trace</span></span>() &#123;</span><br><span class="line">  logger -t <span class="string">"/etc/init.d/kibana"</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">emit</span></span>() &#123;</span><br><span class="line">  trace <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Ensure the log directory is setup correctly.</span></span><br><span class="line">  [ ! <span class="operator">-d</span> <span class="string">"/var/log/kibana/"</span> ] &amp;&amp; mkdir <span class="string">"/var/log/kibana/"</span></span><br><span class="line">  chown <span class="string">"<span class="variable">$user</span>"</span>:<span class="string">"<span class="variable">$group</span>"</span> <span class="string">"/var/log/kibana/"</span></span><br><span class="line">  chmod <span class="number">755</span> <span class="string">"/var/log/kibana/"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Setup any environmental stuff beforehand</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Run the program!</span></span><br><span class="line"></span><br><span class="line">  chroot --userspec <span class="string">"<span class="variable">$user</span>"</span>:<span class="string">"<span class="variable">$group</span>"</span> <span class="string">"<span class="variable">$chroot</span>"</span> sh -c <span class="string">"</span><br><span class="line"></span><br><span class="line">    cd \"<span class="variable">$chdir</span>\"</span><br><span class="line">    exec \"<span class="variable">$program</span>\" <span class="variable">$args</span></span><br><span class="line">  "</span> &gt;&gt; /var/<span class="built_in">log</span>/kibana/kibana.stdout <span class="number">2</span>&gt;&gt; /var/<span class="built_in">log</span>/kibana/kibana.stderr &amp;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># Generate the pidfile from here. If we instead made the forked process</span></span><br><span class="line">  <span class="comment"># generate it there will be a race condition between the pidfile writing</span></span><br><span class="line">  <span class="comment"># and a process possibly asking for status.</span></span><br><span class="line">  <span class="built_in">echo</span> $! &gt; <span class="variable">$pidfile</span></span><br><span class="line"></span><br><span class="line">  emit <span class="string">"<span class="variable">$name</span> started"</span></span><br><span class="line">  <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">  <span class="comment"># Try a few times to kill TERM the program</span></span><br><span class="line">  <span class="keyword">if</span> status ; <span class="keyword">then</span></span><br><span class="line">    pid=$(cat <span class="string">"<span class="variable">$pidfile</span>"</span>)</span><br><span class="line">    trace <span class="string">"Killing <span class="variable">$name</span> (pid <span class="variable">$pid</span>) with SIGTERM"</span></span><br><span class="line">    <span class="built_in">kill</span> -TERM <span class="variable">$pid</span></span><br><span class="line">    <span class="comment"># Wait for it to exit.</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> ; <span class="keyword">do</span></span><br><span class="line">      trace <span class="string">"Waiting <span class="variable">$name</span> (pid <span class="variable">$pid</span>) to die..."</span></span><br><span class="line">      status || <span class="built_in">break</span></span><br><span class="line">      sleep <span class="number">1</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">if</span> status ; <span class="keyword">then</span></span><br><span class="line">      emit <span class="string">"<span class="variable">$name</span> stop failed; still running."</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      emit <span class="string">"<span class="variable">$name</span> stopped."</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">status</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ <span class="operator">-f</span> <span class="string">"<span class="variable">$pidfile</span>"</span> ] ; <span class="keyword">then</span></span><br><span class="line">    pid=$(cat <span class="string">"<span class="variable">$pidfile</span>"</span>)</span><br><span class="line">    <span class="keyword">if</span> ps -p <span class="variable">$pid</span> &gt; /dev/null <span class="number">2</span>&gt; /dev/null ; <span class="keyword">then</span></span><br><span class="line">      <span class="comment"># process by this pid is running.</span></span><br><span class="line">      <span class="comment"># It may not be our pid, but that's what you get with just pidfiles.</span></span><br><span class="line">      <span class="comment"># TODO(sissel): Check if this process seems to be the same as the one we</span></span><br><span class="line">      <span class="comment"># expect. It'd be nice to use flock here, but flock uses fork, not exec,</span></span><br><span class="line">      <span class="comment"># so it makes it quite awkward to use in this case.</span></span><br><span class="line">      <span class="built_in">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">return</span> <span class="number">2</span> <span class="comment"># program is dead but pid file exists</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">return</span> <span class="number">3</span> <span class="comment"># program is not running</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">force_stop</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> status ; <span class="keyword">then</span></span><br><span class="line">    stop</span><br><span class="line">    status &amp;&amp; <span class="built_in">kill</span> -KILL $(cat <span class="string">"<span class="variable">$pidfile</span>"</span>)</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  force-start|start|stop|force-stop|restart)</span><br><span class="line">    trace <span class="string">"Attempting '<span class="variable">$1</span>' on kibana"</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  force-start)</span><br><span class="line">    PRESTART=no</span><br><span class="line">    <span class="built_in">exec</span> <span class="string">"<span class="variable">$0</span>"</span> start</span><br><span class="line">    ;;</span><br><span class="line">  start)</span><br><span class="line">    status</span><br><span class="line">    code=$?</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$code</span> <span class="operator">-eq</span> <span class="number">0</span> ]; <span class="keyword">then</span></span><br><span class="line">      emit <span class="string">"<span class="variable">$name</span> is already running"</span></span><br><span class="line">      <span class="built_in">exit</span> <span class="variable">$code</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      start</span><br><span class="line">      <span class="built_in">exit</span> $?</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  stop) stop ;;</span><br><span class="line">  force-stop) force_stop ;;</span><br><span class="line">  status)</span><br><span class="line">    status</span><br><span class="line">    code=$?</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$code</span> <span class="operator">-eq</span> <span class="number">0</span> ] ; <span class="keyword">then</span></span><br><span class="line">      emit <span class="string">"<span class="variable">$name</span> is running"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      emit <span class="string">"<span class="variable">$name</span> is not running"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="variable">$code</span></span><br><span class="line">    ;;</span><br><span class="line">  restart)</span><br><span class="line"></span><br><span class="line">    stop &amp;&amp; start</span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$SCRIPTNAME</span> &#123;start|force-start|stop|force-start|force-stop|status|restart&#125;"</span> &gt;&amp;<span class="number">2</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="number">3</span></span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> $?</span><br></pre></td></tr></table></figure></p>
<h4 id="Nginx配置"><strong>Nginx配置</strong></h4><p>&emsp;配置文件<strong><code>kibana.conf</code></strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$&gt; yum -y install httpd-tools</span><br><span class="line">$&gt; htpasswd -c /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/kibana.users mogl</span><br><span class="line"></span><br><span class="line">upstream kibana &#123;</span><br><span class="line">        server 127.0.0.1:5601;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen                     80;</span><br><span class="line">        server_name                moglkibana.com;</span><br><span class="line">        access_log                 /<span class="keyword">var</span>/wwwlog/kibana/access.<span class="keyword">log</span> main;</span><br><span class="line">        error_log                  /<span class="keyword">var</span>/wwwlog/kibana/<span class="keyword">error</span>.<span class="keyword">log</span>  <span class="keyword">error</span>;</span><br><span class="line"></span><br><span class="line">		auth_basic <span class="string">"Kibana Access"</span>;</span><br><span class="line">		auth_basic_user_file /usr/<span class="keyword">local</span>/nginx/<span class="keyword">conf</span>/kibana.users;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_next_upstream http_500 http_502 http_504 <span class="keyword">error</span> timeout invalid_header;</span><br><span class="line">            proxy_pass                  http:<span class="comment">//kibana;</span></span><br><span class="line">            proxy_set_header            Host             <span class="label">$host</span>;</span><br><span class="line">            proxy_set_header            X-Real-IP        <span class="label">$remote_addr</span>;</span><br><span class="line">            proxy_set_header            X-Forwarded-<span class="keyword">For</span>  <span class="label">$proxy_add_x_forwarded_for</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Logstash"><strong>Logstash</strong></h2><h4 id="Logstash_服务端安装配置"><strong>Logstash 服务端安装配置</strong></h4><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> wget <span class="symbol">https:</span>/<span class="regexp">/download.elastic.co/logstash</span><span class="regexp">/logstash/packages</span><span class="regexp">/centos/logstash</span>-<span class="number">1.5</span>.<span class="number">4</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line"><span class="variable">$&gt;</span> yum localinstall /home/logstash-<span class="number">1.5</span>.<span class="number">4</span>-<span class="number">1</span>.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment">#设置SSL、FQDN</span></span><br><span class="line"><span class="variable">$&gt;</span> cd /etc/pki/tls</span><br><span class="line"><span class="variable">$&gt;</span> openssl req -subj <span class="string">'/CN=elk.mogl.com/'</span> -x509 -days <span class="number">3650</span> -batch -nodes -newkey <span class="symbol">rsa:</span><span class="number">2048</span> -keyout private/logstash-forwarder.key -out certs/logstash-forwarder.crt</span><br></pre></td></tr></table></figure>
<p>&emsp;创建logstash配置文件<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/logstash/conf.d/<span class="number">01</span>-logstash-initial.conf &lt;&lt; <span class="type">EOF</span></span><br><span class="line">input &#123;</span><br><span class="line">  lumberjack &#123;</span><br><span class="line">    port =&gt; <span class="number">5043</span></span><br><span class="line">    <span class="keyword">type</span> =&gt; <span class="string">"logs"</span></span><br><span class="line">    ssl_certificate =&gt; <span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span></span><br><span class="line">    ssl_key =&gt; <span class="string">"/etc/pki/tls/private/logstash-forwarder.key"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="keyword">type</span>] == <span class="string">"syslog"</span> &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">      <span class="keyword">match</span> =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125; %&#123;SYSLOGHOST:syslog_hostname&#125; %&#123;DATA:syslog_program&#125;(?:\[%&#123;POSINT:syslog_pid&#125;\])?: %&#123;GREEDYDATA:syslog_message&#125;"</span> &#125;</span><br><span class="line">      add_field =&gt; [ <span class="string">"received_at"</span>, <span class="string">"%&#123;@timestamp&#125;"</span> ]</span><br><span class="line">      add_field =&gt; [ <span class="string">"received_from"</span>, <span class="string">"%&#123;host&#125;"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">    syslog_pri &#123; &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">      <span class="keyword">match</span> =&gt; [ <span class="string">"syslog_timestamp"</span>, <span class="string">"MMM  d HH:mm:ss"</span>, <span class="string">"MMM dd HH:mm:ss"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123; host =&gt; localhost &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">EOF</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<code>output</code>中的<code>elasticsearch</code>配置<code>host</code>若配置成<strong><code>[&quot;localhost:9200&quot;]</code></strong>则在与elasticsearchl连接时会报错<strong><code>Caught exception while handling client http traffic, closing connection</code></strong></p>
<h4 id="Logstash_客户端安装配置"><strong>Logstash 客户端安装配置</strong></h4><p>&emsp;安装logstash-forward并复制ssl证书<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&gt; wget <span class="string">https:</span><span class="comment">//download.elastic.co/logstash-forwarder/binaries/logstash-forwarder-0.4.0-1.x86_64.rpm</span></span><br><span class="line">$&gt; yum localinstall logstash-forwarder-<span class="number">0.4</span><span class="number">.0</span>-<span class="number">1.</span>x86_64.rpm</span><br><span class="line">$&gt; echo <span class="string">'10.0.6.6 elk.mogl.com'</span> &gt;&gt; <span class="regexp">/etc/</span>hosts</span><br><span class="line">$&gt; scp root<span class="annotation">@elk</span>.mogl.<span class="string">com:</span><span class="regexp">/etc/</span>pki<span class="regexp">/tls/</span>certs<span class="regexp">/logstash-forwarder.crt /</span>etc<span class="regexp">/pki/</span>tls<span class="regexp">/certs/</span>logstash-forwarder.crt</span><br></pre></td></tr></table></figure></p>
<p>&emsp;logstash-forward客户端转发配置<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mv <span class="regexp">/etc/</span>logstash-forwarder.conf <span class="regexp">/etc/</span>logstash-forwarder.conf.org</span><br><span class="line"></span><br><span class="line">cat &gt; <span class="regexp">/etc/</span>logstash-forwarder.conf &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"network"</span>: &#123;</span><br><span class="line">    <span class="string">"servers"</span>: [ <span class="string">"elk.mogl.com:5043"</span> ],</span><br><span class="line"></span><br><span class="line">    <span class="string">"ssl ca"</span>: <span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">"timeout"</span>: <span class="number">15</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">"files"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"paths"</span>: [</span><br><span class="line">        <span class="string">"/var/log/messages"</span>,</span><br><span class="line">        <span class="string">"/var/log/secure"</span></span><br><span class="line">      ],</span><br><span class="line"></span><br><span class="line">      <span class="string">"fields"</span>: &#123; <span class="string">"type"</span>: <span class="string">"syslog"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$&gt; <span class="regexp">/etc/i</span>nit.d<span class="regexp">/logstash-forwarder start</span></span><br></pre></td></tr></table></figure></p>
<h4 id="创建索引模式"><strong>创建索引模式</strong></h4><p>&emsp;访问Kibana，在<strong><code>setting</code></strong>中添加索引即可。</p>
<h2 id="采集分析Nginx日志"><strong>采集分析Nginx日志</strong></h2><h4 id="Server端"><strong>Server端</strong></h4><p>&emsp;添加pattern匹配规则<br>&emsp;我所使用的Nginx日志格式<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">log_format</span> main <span class="string">'<span class="variable">$remote_addr</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                         <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                         <span class="string">'"<span class="variable">$http_user_agent</span>" <span class="variable">$http_x_forwarded_for</span> <span class="variable">$request_length</span> <span class="variable">$request_time</span> <span class="variable">$upstream_addr</span> <span class="variable">$host</span>'</span>;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;规则可通过此网站进行测试<a href="https://grokdebug.herokuapp.com/" target="_blank" rel="external">Logstash匹配测试网站</a><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mkdir <span class="regexp">/opt/</span>logstash/patterns</span><br><span class="line"></span><br><span class="line">cat &gt; <span class="regexp">/opt/</span>logstash<span class="regexp">/patterns/</span>nginx &lt;&lt; EOF</span><br><span class="line">NGUSERNAME [a-zA-Z\.\@\-\+_%]+</span><br><span class="line">NGUSER %&#123;NGUSERNAME&#125;</span><br><span class="line">NGINXACCESS %&#123;<span class="string">IPORHOST:</span>remote_addr&#125; \[%&#123;<span class="string">HTTPDATE:</span>time_local&#125;\] <span class="string">"%&#123;WORD:method&#125; %&#123;URIPATH:path&#125;(?:%&#123;URIPARAM:param&#125;)? HTTP/%&#123;NUMBER:httpversion&#125;"</span> %&#123;<span class="string">INT:</span>status&#125; %&#123;<span class="string">INT:</span>body_bytes_sent&#125; %&#123;<span class="string">QS:</span>http_referer&#125; %&#123;<span class="string">QS:</span>http_user_agent&#125; %&#123;<span class="string">NOTSPACE:</span>http_x_forwarded_for&#125; %&#123;<span class="string">INT:</span>request_length&#125; %&#123;<span class="string">NUMBER:</span>request_time&#125; %&#123;<span class="string">NOTSPACE:</span>upstream_addr&#125; %&#123;<span class="string">IPORHOST:</span>host&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">$&gt; chown -R <span class="string">logstash:</span>logstash <span class="regexp">/opt/</span>logstash<span class="regexp">/patterns/</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;Logstash添加Nginx相关配置<code>/etc/logstash/conf.d/logstash-nginx.conf</code><br>&emsp;如果按照上文logstash配置了统计syslog的采集，端口需要改变，否则会报错地址已被占用<br><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  lumberjack &#123;</span><br><span class="line">    port =&gt; <span class="number">5043</span></span><br><span class="line">    <span class="keyword">type</span> =&gt; <span class="string">"logs"</span></span><br><span class="line">    ssl_certificate =&gt; <span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span></span><br><span class="line">    ssl_key =&gt; <span class="string">"/etc/pki/tls/private/logstash-forwarder.key"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  <span class="keyword">if</span> [<span class="keyword">type</span>] == <span class="string">"nginx"</span> &#123;</span><br><span class="line">          grok &#123;</span><br><span class="line">                  <span class="keyword">match</span> =&gt; &#123; <span class="string">"message"</span> =&gt; <span class="string">"%&#123;NGINXACCESS&#125;"</span> &#125;</span><br><span class="line">          &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123; host =&gt; localhost &#125;</span><br><span class="line">  stdout &#123; codec =&gt; rubydebug &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Client端"><strong>Client端</strong></h4><p>&emsp;logstash-forward将日志转发到服务端<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "<span class="attribute">network</span>": <span class="value">&#123;</span><br><span class="line">    "<span class="attribute">servers</span>": <span class="value">[ <span class="string">"elk.mogl.com:5043"</span> ]</span>,</span><br><span class="line"></span><br><span class="line">    "<span class="attribute">ssl ca</span>": <span class="value"><span class="string">"/etc/pki/tls/certs/logstash-forwarder.crt"</span></span>,</span><br><span class="line"></span><br><span class="line">    "<span class="attribute">timeout</span>": <span class="value"><span class="number">15</span></span><br><span class="line">  </span>&#125;</span>,</span><br><span class="line"></span><br><span class="line">  "<span class="attribute">files</span>": <span class="value">[</span><br><span class="line">    &#123;</span><br><span class="line">        "<span class="attribute">paths</span>": <span class="value">[</span><br><span class="line">            <span class="string">"/var/wwwlog/test/access.log"</span></span><br><span class="line">        ]</span>,</span><br><span class="line"></span><br><span class="line">        "<span class="attribute">fields</span>": <span class="value">&#123; "<span class="attribute">type</span>": <span class="value"><span class="string">"nginx"</span> </span>&#125;</span><br><span class="line">    </span>&#125;</span><br><span class="line">  ]</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="基础环境"><strong>基础环境</strong></h2><ul>
<li>CentOS release 6.4 (Final) 64bit</li>
<li>jdk-8u45-linux-x64</li>
<li>Elasticsearch 1.7.1</]]>
    </summary>
    
      <category term="EFK/ELK" scheme="http://yoursite.com/tags/EFK-ELK/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Fluentd日志收集]]></title>
    <link href="http://yoursite.com/2015/12/20/fluentd/"/>
    <id>http://yoursite.com/2015/12/20/fluentd/</id>
    <published>2015-12-20T09:59:44.000Z</published>
    <updated>2016-02-28T10:20:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Fluentd安装"><strong>Fluentd安装</strong></h2><p>&emsp;多数内容都是按照官方文档来，详细参考<a href="http://docs.fluentd.org/articles/quickstart" target="_blank" rel="external">官方文档</a></p>
<h4 id="配置NTP"><strong>配置NTP</strong></h4><p>&emsp;官方文档说明每个节点需要配好NTP，只有确保节点的时间是一致就行，我使用<code>ntpdate</code>使节点时间一致，或直接网络同步时间<code>rdate -s time.nist.gov</code></p>
<h4 id="设置最大文件描述符"><strong>设置最大文件描述符</strong></h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ulimit -<span class="keyword">n</span> 65535</span><br><span class="line">#新增以下内容到/etc/security/limits.<span class="keyword">conf</span></span><br><span class="line"><span class="comment">* soft nofile 65535</span></span><br><span class="line"><span class="comment">* hard nofile 65535</span></span><br></pre></td></tr></table></figure>
<h4 id="优化内核TCP参数"><strong>优化内核TCP参数</strong></h4><p>&emsp;<code>/etc/sysctl.conf</code>配置文件新增以下内容，保持退出后执行<strong><code>sysctl -p</code></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_tw_recycle</span> = <span class="number">1</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.tcp_tw_reuse</span> = <span class="number">1</span></span><br><span class="line">net<span class="class">.ipv4</span><span class="class">.ip_local_port_range</span> = <span class="number">10240</span>    <span class="number">65535</span></span><br></pre></td></tr></table></figure></p>
<h4 id="安装td-agent"><strong>安装td-agent</strong></h4><p>&emsp;Fluentd有两个版本，一个是稳定版<code>td-agent</code>，一个是开发版<code>Fluentd</code>。这里在<code>CentOS6.4 64bit</code>上使用稳定版<code>td-agent</code>，不同平台参考<a href="http://docs.fluentd.org/v0.12/categories/installation" target="_blank" rel="external">官方安装文档</a><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L http<span class="variable">s:</span>//td-toolbelt.herokuapp.<span class="keyword">com</span>/<span class="keyword">sh</span>/install-redhat-td-agent2.<span class="keyword">sh</span> | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;安装完后情况如下：</p>
<ul>
<li>默认td-agent安装路径：<strong><code>/opt/td-agent</code></strong></li>
<li>启动/停止/重启：<strong><code>/etc/init.d/td-agent [start|stop|restart|status|configtest]</code></strong></li>
<li>配置文件：<strong><code>/etc/td-agent/td-agent.conf</code></strong></li>
<li>日志路径：<strong><code>/var/log/td-agent/td-agent.log</code></strong></li>
<li>查看默认已安装插件：<strong><code>/opt/td-agent/embedded/bin/gem list|grep plugin</code></strong>  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fluent-<span class="keyword">plugin</span>-mongo (0.7.10)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-rewrite-tag-filter (1.4.1)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-s3 (0.5.9)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-scribe (0.10.14)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-td (0.10.27)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-td-monitoring (0.2.1)</span><br><span class="line">fluent-<span class="keyword">plugin</span>-webhdfs (0.4.1)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="安装插件(可选)"><strong>安装插件</strong>(可选)</h4><p>&emsp;Fluentd支持许多插件，详见<a href="http://www.fluentd.org/plugins" target="_blank" rel="external">fluentd插件</a></p>
<ul>
<li><p>安装方法：<strong><code>td-agent-gem install plugin_name</code></strong></p>
</li>
<li><p>安装<strong>secure-forward</strong>、<strong>elasticsearch</strong>插件<br>&emsp;<code>secure-forward</code>加密传输内容，<code>elasticsearch</code>可将Fluentd收集的日志存入Elasticsearch</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; td-agent-gem install fluent-<span class="keyword">plugin</span>-secure-forward fluent-<span class="keyword">plugin</span>-elasticsearch</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>&emsp;如果是使用<code>fluent-gem</code>来安装，最好改用淘宝源<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="regexp">/opt/</span>td-agent<span class="regexp">/embedded/</span>bin<span class="regexp">/fluent-gem sources --remove https:/</span><span class="regexp">/rubygems.org/</span></span><br><span class="line">$&gt; <span class="regexp">/opt/</span>td-agent<span class="regexp">/embedded/</span>bin<span class="regexp">/fluent-gem sources -a https:/</span><span class="regexp">/ruby.taobao.org/</span></span><br><span class="line">$&gt; <span class="regexp">/opt/</span>td-agent<span class="regexp">/embedded/</span>bin<span class="regexp">/fluent-gem install fluent-plugin-secure-forward fluent-plugin-elasticsearch</span></span><br></pre></td></tr></table></figure></p>
<h4 id="启动_&amp;_测试"><strong>启动 &amp; 测试</strong></h4><p>&emsp;测试Fluentd，动态查看日志<strong><code>tailf /var/log/td-agent/td-agent.log</code></strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; /etc/init.<span class="keyword">d</span>/td-agent start</span><br><span class="line"></span><br><span class="line">curl -X <span class="keyword">POST</span> -<span class="keyword">d</span> 'json=&#123;<span class="string">"json":"message"</span>&#125;' http:<span class="comment">//localhost:8888/debug.test</span></span><br></pre></td></tr></table></figure></p>
<h2 id="配置Fluentd"><strong>配置Fluentd</strong></h2><p>&emsp;通过官方脚本安装(rpm/deb)的td-agent，默认配置文件<strong><code>/etc/td-agent/td-agent.conf</code></strong><br>&emsp;Fluentd配置中只有三种基本指令：</p>
<ul>
<li><strong>source</strong>：指定日志记录的来源</li>
<li><strong>match</strong>：指定输出动作，指定经过Fluentd处理后的结果输出目的地，可以是输出到文件、数据库，也可以转发到另一个Fluentd中。</li>
<li><strong>include</strong>：指定包含的其他配置文件</li>
</ul>
<p>&emsp;详细配置分析</p>
<h3 id="source"><strong>source</strong></h3><p>&emsp;<strong><code>source</code></strong>配置输入来源以及选择什么输入插件，官方列出的所有输入插件详见<a href="http://docs.fluentd.org/articles/input-plugin-overview#" target="_blank" rel="external">这里</a>。Fluentd内置标准的输入插件<strong><code>http</code></strong>和<strong><code>forward</code></strong>，除了<strong><code>http</code></strong>和<strong><code>forward</code></strong>外还有<strong><code>tail</code></strong>也是非常常用的，<strong><code>source</code></strong>必须包含<strong><code>type</code></strong>指明Fluentd使用哪个输入插件接收数据。</p>
<ul>
<li><strong><code>http</code></strong>：指定Fluentd接收来自HTTP的数据</li>
<li><strong><code>forward</code></strong>：指定Fluentd接收来自TCP的数据。<strong>source</strong>的<code>forward</code>用于汇聚端，接收来之客户端转发的日志。</li>
<li><strong><code>secure_forward</code></strong>：通过SSL使Fluentd传输数据更安全。同<strong><code>forward</code></strong>插件，多用于汇聚端。</li>
<li><strong><code>tail</code></strong>：指定Fluentd从文件中接收数据</li>
</ul>
<h4 id="http"><strong>http</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http input</span></span><br><span class="line"><span class="comment"># POST http://localhost:8888/&lt;tag&gt;?json=&lt;json&gt;</span></span><br><span class="line"><span class="comment"># POST http://localhost:8888/td.myapp.login?json=&#123;"user"%3A"me"&#125;</span></span><br><span class="line">&lt;<span class="built_in">source</span>&gt;</span><br><span class="line">    <span class="built_in">type</span> http</span><br><span class="line">    port <span class="number">8888</span></span><br><span class="line">&lt;/<span class="built_in">source</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="forward"><strong>forward</strong></h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># forward <span class="built_in">input</span></span><br><span class="line"># Receive events from <span class="number">24224</span>/tcp</span><br><span class="line"># This <span class="keyword">is</span> used by <span class="built_in">log</span> forwarding <span class="built_in">and</span> the fluent-<span class="keyword">cat</span> <span class="keyword">command</span></span><br><span class="line">&lt;<span class="keyword">source</span>&gt;</span><br><span class="line">    <span class="built_in">type</span> forward</span><br><span class="line">    port <span class="number">24224</span></span><br><span class="line">&lt;/<span class="keyword">source</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="secure_forward"><strong>secure_forward</strong></h4><p>&emsp;汇聚端先使用<strong><code>secure-forward-ca-generate 路径 密码</code></strong>生成证书和公钥(需要将<code>ca_cert.pem</code>拷贝到客户端中)<br>&emsp;默认的端口是<code>24284</code><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; <span class="regexp">/opt/</span>td-agent<span class="regexp">/embedded/</span>bin<span class="regexp">/secure-forward-ca-generate /</span>path<span class="regexp">/to/</span>certificate passphrase_for_private_CA_secret_key</span><br></pre></td></tr></table></figure></p>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#secure_forward input</span></span><br><span class="line">&lt;<span class="literal">source</span>&gt;</span><br><span class="line">  <span class="built_in">type</span> secure_forward</span><br><span class="line">  shared_key         secret_string</span><br><span class="line">  port <span class="number">22222</span></span><br><span class="line">  self_hostname      server.<span class="built_in">fqdn</span>.local</span><br><span class="line">  secure <span class="keyword">true</span></span><br><span class="line">  ca_cert_path        /<span class="built_in">path</span>/to/certificate/ca_cert.pem</span><br><span class="line">  ca_private_key_path /<span class="built_in">path</span>/to/certificate/ca_key.pem</span><br><span class="line">  ca_private_key_passphrase passphrase_for_private_CA_secret_key</span><br><span class="line">  authentication     yes</span><br><span class="line">  &lt;<span class="keyword">user</span>&gt;</span><br><span class="line">    username tagomoris</span><br><span class="line">    <span class="literal">password</span> foobar012</span><br><span class="line">  &lt;/<span class="keyword">user</span>&gt;</span><br><span class="line">&lt;/<span class="literal">source</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="tail"><strong>tail</strong></h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># tail input</span></span><br><span class="line"><span class="variable">&lt;source&gt;</span></span><br><span class="line">    type          tail</span><br><span class="line">    tag           fluentd.tail.test							<span class="comment">#事件tag</span></span><br><span class="line">    path          /var/wwwlog/nginx/access.log				<span class="comment">#日志路径，多个日志用','分隔</span></span><br><span class="line">    pos_file      /tmp/fluentd.pos							<span class="comment">#记录上次读到日志的位置</span></span><br><span class="line">    <span class="comment">#format       [apache2|nginx|自定义正则]				#日志格式匹配</span></span><br><span class="line">    format        /^(?<span class="variable">&lt;remote&gt;</span>[^ ]<span class="keyword">*</span>) \[(?<span class="variable">&lt;time&gt;</span>[^\]]<span class="keyword">*</span>)\] <span class="string">"(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^ ]*) +\S*)?"</span> (?<span class="variable">&lt;code&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;size&gt;</span>[^ ]<span class="keyword">*</span>) <span class="string">"(?&lt;referer&gt;[^\"]*)"</span> <span class="string">"(?&lt;agent&gt;[^\"]*)"</span> (?<span class="variable">&lt;forward&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;request_length&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;request_time&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;upstream_addr&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;host&gt;</span>[^ ]<span class="keyword">*</span>)/</span><br><span class="line">    time_format 	%d/%b/%Y:%H:%M:%S %z</span><br><span class="line"><span class="variable">&lt;/source&gt;</span></span><br></pre></td></tr></table></figure>
<p>&emsp;<strong><code>tail</code></strong>的日志参数<code>format</code>支持正则表达式<code>(?&lt;名称&gt;模式)</code>，可以通过<a href="https://fluentular.herokuapp.com/" target="_blank" rel="external">这个网站</a>对自己日志格式的正则进行调试<br>&emsp;<strong><code>time_format</code></strong>是指定<strong><code>format</code></strong>中时间格式<strong><code>time</code></strong>，假若<code>format</code>中有<code>time</code>则需要<code>time_format</code><br>&emsp;我用的是Nginx，所用日志格式如下所示：<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Nginx log_format</span></span><br><span class="line"><span class="title">log_format</span> main <span class="string">'<span class="variable">$remote_addr</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">					 <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">				 <span class="string">'"<span class="variable">$http_user_agent</span>" <span class="variable">$http_x_forwarded_for</span> <span class="variable">$request_length</span> <span class="variable">$request_time</span> <span class="variable">$upstream_addr</span> <span class="variable">$host</span>'</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="match"><strong>match</strong></h3><p>&emsp;<strong><code>match</code></strong>指定Fluentd输出动作，官方列出的所有输出插件详见<a href="http://docs.fluentd.org/articles/output-plugin-overview" target="_blank" rel="external">这里</a>。<strong><code>match</code></strong>会根据<strong><code>source</code></strong>中的<code>tag</code>进行匹配进而做不同的处理。Fluentd标准的输出插件是<code>file</code>和<code>forward</code>。和<strong><code>source</code></strong>一样，<strong>match</strong>中会有<code>type</code>。</p>
<ul>
<li><strong><code>file</code></strong>：将输出内容写入文件</li>
<li><strong><code>forward</code></strong>：将输出内容转发到其他fluentd节点。<strong>match</strong>的<code>forward</code>多用于客户端转发日志<br>  <code>forward</code>输出插件有重试机制以确保数据能被顺利的被转发，转发数据缓存在磁盘，初始默认重发间隔为<code>1s</code>，重试<code>17</code>次，每次间隔时间增加2倍(类似TCP的指数退避)，超过<code>17</code>后日志会被丢弃(极端情况是36小时都无法转发则日志会被丢弃)，可以设置无限重发(<code>disable_retry_limit=true</code>)</li>
<li><strong><code>secure_forward</code></strong>：通过SSL安全的将输入内容转发到fluentd汇聚节点。如果汇聚节点的fluentd开启了<code>secure true</code>则需要将汇聚节点的证书拷贝过来。</li>
<li><strong><code>mongo</code></strong>：将输出内容写入到MongoDB(td-agent默认已安装mongodb插件)</li>
</ul>
<h4 id="file"><strong>file</strong></h4><p>&emsp;从<strong>source</strong>的<code>forward</code>中接收日志并通过<strong>match</strong>的<code>file</code>写入到文件<br>&emsp;默认的<code>file</code>输出格式：<code>time[delimiter]tag[delimiter]record\n</code>，可通过参数自定义，详细参考<a href="http://docs.fluentd.org/articles/out_file" target="_blank" rel="external">这里</a><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#forward <span class="keyword">input</span></span><br><span class="line">&lt;source&gt;</span><br><span class="line">    <span class="keyword">type</span> forward</span><br><span class="line">    port 22222</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">#<span class="keyword">file</span> output</span><br><span class="line">#tag匹配'fluentd.tail.<span class="keyword">test</span>'的输出将写入到文件中</span><br><span class="line">&lt;match fluentd.tail.<span class="keyword">test</span>&gt;</span><br><span class="line">    <span class="keyword">type</span> <span class="keyword">file</span></span><br><span class="line">    <span class="keyword">append</span> true					#日志部分割	</span><br><span class="line">    output_tag false			#不输出tag，默认输出</span><br><span class="line">    output_time false			#不单独输出time</span><br><span class="line">    include_time_key true		#将time放入record中，默认将time单独输出</span><br><span class="line">    flush_interval 5s</span><br><span class="line">	time_format %Y/%<span class="keyword">m</span>/%<span class="keyword">d</span> %<span class="keyword">H</span>:%<span class="keyword">M</span>:%S	#设置时间格式</span><br><span class="line">	path /<span class="keyword">var</span>/<span class="keyword">log</span>/td-agent/<span class="keyword">test</span>/<span class="keyword">test</span>	#文件保持路径，文件名类似：/<span class="keyword">var</span>/<span class="keyword">log</span>/td-agent/<span class="keyword">test</span>/<span class="keyword">test</span>.20150901.<span class="literal">log</span></span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="forward-1"><strong>forward</strong></h4><p>&emsp;<strong><code>type</code></strong>和<strong><code>server</code></strong>是必选项，其余可选。secondary——当所有server都不可用时则使用此项(备份选项)<br>&emsp;<strong>match</strong>中<code>forward</code>转发<code>host</code>机器的<code>port</code>需要<strong>iptables</strong>对相应的<strong>TCP</strong>和<strong>UPD</strong>端口都要放行，若只开放TCP端口是无法forward成功的!<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#forward output</span></span><br><span class="line"><span class="tag">&lt;match pattern&gt;</span></span><br><span class="line">    <span class="keyword">type</span> forward</span><br><span class="line">    <span class="keyword">send_timeout</span> 60s</span><br><span class="line">    <span class="keyword">recover_wait</span> 10s</span><br><span class="line">    <span class="keyword">heartbeat_interval</span> 1s</span><br><span class="line">    <span class="keyword">phi_threshold</span> 16</span><br><span class="line">    <span class="keyword">hard_timeout</span> 60s</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;server&gt;</span></span><br><span class="line">      <span class="keyword">name</span> myserver1</span><br><span class="line">      <span class="keyword">host</span> 192.168.1.3</span><br><span class="line">      <span class="keyword">port</span> 24224</span><br><span class="line">      <span class="keyword">weight</span> 60</span><br><span class="line">    <span class="tag">&lt;/server&gt;</span></span><br><span class="line">    <span class="tag">&lt;server&gt;</span></span><br><span class="line">      <span class="keyword">name</span> myserver2</span><br><span class="line">      <span class="keyword">host</span> 192.168.1.4</span><br><span class="line">      <span class="keyword">port</span> 24224</span><br><span class="line">      <span class="keyword">weight</span> 60</span><br><span class="line">    <span class="tag">&lt;/server&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;secondary&gt;</span></span><br><span class="line">      <span class="keyword">type</span> file</span><br><span class="line">      <span class="keyword">path</span> /var/log/fluent/forward-failed</span><br><span class="line">    <span class="tag">&lt;/secondary&gt;</span></span><br><span class="line"><span class="tag">&lt;/match&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="secure_forward-1"><strong>secure_forward</strong></h4><p>&emsp;<code>ca_cert_path</code>证书需要从汇聚端上拷贝。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;match secret<span class="class">.data</span>.**&gt;</span><br><span class="line">  type secure_forward</span><br><span class="line">  shared_key secret_string</span><br><span class="line">  self_hostname client<span class="class">.fqdn</span><span class="class">.local</span></span><br><span class="line">  secure true</span><br><span class="line">  ca_cert_path /path/to/certificate/ca_cert<span class="class">.pem</span></span><br><span class="line"></span><br><span class="line">  &lt;server&gt;</span><br><span class="line">    host first<span class="class">.fqdn</span><span class="class">.local</span></span><br><span class="line">    port <span class="number">22222</span></span><br><span class="line">    username tagomoris</span><br><span class="line">    password foobar012</span><br><span class="line">  &lt;/server&gt;</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<h4 id="mongo"><strong>mongo</strong></h4><p>&emsp;<code>type</code>、<code>host</code>、<code>port</code>、<code>database</code>(库名)、<code>collection</code>都是必选项(<code>collection</code>没有时<code>tag_mapped</code>才是必须)<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;match mongo.**&gt;</span><br><span class="line">    <span class="built_in">type</span> mongo</span><br><span class="line">    <span class="keyword">host</span> fluentd</span><br><span class="line">    port <span class="number">27017</span></span><br><span class="line">    database fluentd</span><br><span class="line">    collection fluentd</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># for capped collection</span></span><br><span class="line">    capped</span><br><span class="line">    capped_size <span class="number">1024</span>m</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># authentication</span></span><br><span class="line">    <span class="keyword">user</span> fluentd</span><br><span class="line">    <span class="literal">password</span> fluentd</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># key name of timestamp</span></span><br><span class="line">    time_key time</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># flush</span></span><br><span class="line">    flush_interval <span class="number">5</span>s</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong><code>match</code></strong>的<code>tag</code>支持通配符匹配，详细内容查看<a href="http://docs.fluentd.org/articles/config-file#match-pattern-how-you-control-the-event-flow-inside-fluentd" target="_blank" rel="external">这里</a>。<code>tag</code>的匹配按照配置文件从上到下进行，一旦匹配成功则执行相应操作并<strong>停止继续匹配</strong>。<br>&emsp;<code>MongoDB</code>输出中使用了<strong><code>capped collection</code></strong>，对于纯粹日志类型数据效果很好，这种类型的collection是指定大小，当空间满后会用新数据覆盖旧数据，更详细信息查阅<a href="http://docs.mongodb.org/manual/core/capped-collections/" target="_blank" rel="external">MongoDB官方文档</a></p>
<h3 id="include"><strong>include</strong></h3><p>&emsp;<strong><code>include</code></strong>为了方便不同配置文件的管理，避免将全部项目的配置都写到一个配置文件中导致臃肿。<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># absolute path</span></span><br><span class="line"><span class="keyword">include</span> /path/to/config.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># if using a relative path, the directive will use </span></span><br><span class="line"><span class="comment"># the dirname of this config file to expand the path</span></span><br><span class="line"><span class="keyword">include</span> extra.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># glob match pattern</span></span><br><span class="line"><span class="keyword">include</span> config.d/*.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># http</span></span><br><span class="line"><span class="keyword">include</span> <span class="symbol">http:</span>/<span class="regexp">/example.com/fluent</span>.conf</span><br></pre></td></tr></table></figure></p>
<h2 id="配置实例"><strong>配置实例</strong></h2><p>&emsp;以下是具体的配置实例。</p>
<ol>
<li>A服务器为日志收集客户端，B服务器为日志收集的集中汇总端。</li>
<li>A(client)通过Fluentd中<strong>source</strong>的<code>tail</code>插件收集日志并通过<strong>match</strong>的<code>forward</code>转发给B(server)</li>
<li>B(server)通过Fluentd中<strong>source</strong>的<code>forward</code>接收A(client)转发过来的日志并通过<strong>match</strong>的<code>file</code>或<code>mongo</code>等插件汇入到不同的存储中。</li>
</ol>
<h4 id="B(server)"><strong>B(server)</strong></h4><p>&emsp;配置文件<strong><code>/etc/td-agent/td-agent.conf</code></strong><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$&gt; /sbin/iptables -A <span class="keyword">INPUT</span> -p tcp --dport 22222 -j ACCEPT</span><br><span class="line">$&gt; /sbin/iptables -A <span class="keyword">INPUT</span> -p udp --dport 22222 -j ACCEPT</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;source&gt;</span><br><span class="line">  <span class="keyword">type</span> forward</span><br><span class="line">  port 22222</span><br><span class="line">&lt;/source&gt;</span><br><span class="line"></span><br><span class="line">&lt;match mogl_test.**&gt;</span><br><span class="line">    <span class="keyword">type</span> <span class="keyword">file</span></span><br><span class="line">    <span class="keyword">append</span> true</span><br><span class="line">    output_tag false</span><br><span class="line">    output_time false</span><br><span class="line">    include_time_key true</span><br><span class="line">    flush_interval 5s</span><br><span class="line">    time_format %Y/%<span class="keyword">m</span>/%<span class="keyword">d</span> %<span class="keyword">H</span>:%<span class="keyword">M</span>:%<span class="literal">S</span></span><br><span class="line">    path /<span class="keyword">var</span>/wwwlog/fluentd/mogl_test/mogl_test</span><br><span class="line">&lt;/match&gt;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong>match</strong>中<code>file</code>参数详解</p>
<ul>
<li>append：文件是否使用追加模式。默认false，但会生成许多零碎文件。true则每天只有一个文件，所有的日志都追加到此文件中。</li>
<li>output_tag：<code>tag</code>字段取消。默认true。默认格式：<code>2014-06-08T23:59:40[TAB]your.tag[TAB]{&quot;field1&quot;:&quot;value1&quot;,&quot;field2&quot;:&quot;value2&quot;}\n</code>，更改后格式：<code>2014-06-08T23:59:40[TAB]{&quot;field1&quot;:&quot;value1&quot;, &quot;field2&quot;:&quot;value2&quot;}\n</code></li>
<li>output_time、include_time_key：<code>output_time</code>取消<code>time</code>字段、<code>include_time_key</code>将<code>time</code>字段添加到记录中。默认true。默认格式见上</li>
<li>flush_interval：写入磁盘时间间隔</li>
<li>time_format：<code>time</code>字段的格式</li>
<li>path：文件存储路径。文件名：/var/wwwlog/fluentd/mogl_test/mogl_test.20150901.log</li>
</ul>
<h4 id="A(client)"><strong>A(client)</strong></h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">&lt;source&gt;</span></span><br><span class="line">    type          tail</span><br><span class="line">    tag           mogl_test</span><br><span class="line">    path          /var/wwwlog/mogl_test/access.log</span><br><span class="line">    pos_file      /tmp/mogl_test.fluentd.pos</span><br><span class="line">    format        /^(?<span class="variable">&lt;remote&gt;</span>[^ ]<span class="keyword">*</span>) \[(?<span class="variable">&lt;time&gt;</span>[^\]]<span class="keyword">*</span>)\] <span class="string">"(?&lt;method&gt;\S+)(?: +(?&lt;path&gt;[^ ]*) +\S*)?"</span> (?<span class="variable">&lt;code&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;size&gt;</span>[^ ]<span class="keyword">*</span>) <span class="string">"(?&lt;referer&gt;[^\"]*)"</span> <span class="string">"(?&lt;agent&gt;[^\"]*)"</span> (?<span class="variable">&lt;forward&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;request_length&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;request_time&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;upstream_addr&gt;</span>[^ ]<span class="keyword">*</span>) (?<span class="variable">&lt;host&gt;</span>[^ ]<span class="keyword">*</span>)/</span><br><span class="line">	time_format         %d/%b/%Y:%H:%M:%S %z</span><br><span class="line"><span class="variable">&lt;/source&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">&lt;match mogl_test&gt;</span></span><br><span class="line">  type forward</span><br><span class="line">  send_timeout 60s</span><br><span class="line">  recover_wait 10s</span><br><span class="line">  heartbeat_interval 15s</span><br><span class="line">  phi_threshold 16</span><br><span class="line">  hard_timeout 60s</span><br><span class="line"></span><br><span class="line">  <span class="variable">&lt;server&gt;</span></span><br><span class="line">    name log.mogl.net</span><br><span class="line">    host log.mogl.net</span><br><span class="line">    port 22222</span><br><span class="line">  <span class="variable">&lt;/server&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="variable">&lt;secondary&gt;</span></span><br><span class="line">    type file</span><br><span class="line">    path /tmp/mogl_test.fail</span><br><span class="line">  <span class="variable">&lt;/secondary&gt;</span></span><br><span class="line"><span class="variable">&lt;/match&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Fluentd安装"><strong>Fluentd安装</strong></h2><p>&emsp;多数内容都是按照官方文档来，详细参考<a href="http://docs.fluentd.org/articles/quickstart" target="_]]>
    </summary>
    
      <category term="fluentd" scheme="http://yoursite.com/tags/fluentd/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SaltStack实录]]></title>
    <link href="http://yoursite.com/2015/12/12/saltstack/"/>
    <id>http://yoursite.com/2015/12/12/saltstack/</id>
    <published>2015-12-12T04:22:24.000Z</published>
    <updated>2016-02-29T02:14:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="SaltStack安装"><strong>SaltStack安装</strong></h2><p>&emsp;各Linux版本安装详见<a href="https://docs.saltstack.com/en/latest/topics/installation/" target="_blank" rel="external">官方安装文档</a>。<br>&emsp;以下都是在<strong><code>CentOS 6.4 64bit</code></strong>系统上进行。</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> rpm --import <span class="symbol">https:</span>/<span class="regexp">/repo.saltstack.com/yum</span><span class="regexp">/redhat/</span><span class="number">6</span>/x86_64/latest/<span class="constant">SALTSTACK-GPG-KEY.</span>pub</span><br><span class="line"></span><br><span class="line">/etc/yum.repos.d/saltstack.repo</span><br><span class="line">[saltstack-repo]</span><br><span class="line">name=<span class="constant">SaltStack </span>repo <span class="keyword">for</span> <span class="constant">RHEL/CentOS </span><span class="variable">$releasever</span></span><br><span class="line">baseurl=<span class="symbol">https:</span>/<span class="regexp">/repo.saltstack.com/yum</span><span class="regexp">/redhat/</span><span class="variable">$releasever</span>/<span class="variable">$basearch</span>/latest</span><br><span class="line">enabled=<span class="number">1</span></span><br><span class="line">gpgcheck=<span class="number">1</span></span><br><span class="line">gpgkey=<span class="symbol">https:</span>/<span class="regexp">/repo.saltstack.com/yum</span><span class="regexp">/redhat/</span><span class="variable">$releasever</span>/<span class="variable">$basearch</span>/latest/<span class="constant">SALTSTACK-GPG-KEY.</span>pub</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择需要的安装</span></span><br><span class="line"><span class="variable">$&gt;</span> yum install salt-master</span><br><span class="line"><span class="variable">$&gt;</span> yum install salt-minion</span><br><span class="line"><span class="variable">$&gt;</span> yum install salt-ssh</span><br><span class="line"><span class="variable">$&gt;</span> yum install salt-syndic</span><br><span class="line"><span class="variable">$&gt;</span> yum install salt-cloud</span><br></pre></td></tr></table></figure>
<h4 id="安装问题集"><strong>安装问题集</strong></h4><ol>
<li><p>缺少psutil模块<br> AttributeError: ‘module’ object has no attribute ‘get_sysinfo’</p>
 <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&gt; pip <span class="keyword">install</span> psutil</span><br><span class="line"><span class="comment">#若提示python版本过低则</span></span><br><span class="line">   $&gt; pip <span class="keyword">install</span> psutil --upgrade</span><br></pre></td></tr></table></figure>
</li>
<li><p>IPV6地址不可达导致无法安装<br> 关闭IPv6</p>
<ul>
<li><p>永久关闭<br>  修改<strong><code>/etc/sysctl.conf</code></strong>配置文件，加入如下内容</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#shutdown</span> IPv6</span><br><span class="line">net<span class="class">.ipv6</span><span class="class">.conf</span><span class="class">.all</span><span class="class">.disable_ipv6</span> = <span class="number">1</span></span><br><span class="line">net<span class="class">.ipv6</span><span class="class">.conf</span><span class="class">.default</span><span class="class">.disable_ipv6</span> = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">#生效配置</span><br><span class="line">$&gt; sysctl -p</span><br></pre></td></tr></table></figure>
</li>
<li><p>临时关闭</p>
  <figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="number">1</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv6/conf/all/disable_ipv6</span><br><span class="line">echo <span class="number">1</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv6/conf/default/disable_ipv6</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<h2 id="SaltStack配置"><strong>SaltStack配置</strong></h2><h4 id="salt-master_配置"><strong>salt-master 配置</strong></h4><p>&emsp;salt-master监听端口：</p>
<ul>
<li><strong><code>4505</code></strong>(publish_port)<br>  &emsp;salt的消息发布系统</li>
<li><strong><code>4506</code></strong>(ret_port)<br>  &emsp;salt客户端与服务端通信的端口</li>
</ul>
<p>&emsp;默认配置文件：<strong>/etc/salt/master</strong><br>&emsp;<strong>nodegroups</strong>定义规则：</p>
<ul>
<li>G — Grains glob匹配，例如：G@os:Ubuntu</li>
<li>E — minion 正则表达式匹配，例如：E@web\d+.(dev|qa|prod).loc</li>
<li>P — Grains PCRE 正则表达式匹配，例如：P@os:(RedHat|Fedora|CentOS)</li>
<li>L — minion 列表匹配，例如：L@minion1.example.com,minion3.domain.com or bl*.domain.com</li>
<li>I — Pillar glob单个匹配，例如：I@pdata:foobar</li>
<li>S — 子网/IP 匹配，例如：S@192.168.1.0/24 or S@192.168.1.100</li>
<li>R — Range cluster客户端范围匹配，例如： R@%foo.bar</li>
<li>D — minion data匹配，例如：D@key:value</li>
</ul>
<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span>: <span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line"><span class="comment">#自动通过salt-minion认证</span></span><br><span class="line">auto_accept: <span class="constant">True</span></span><br><span class="line">log_file: /var/wwwlog/saltstack/master.log</span><br><span class="line">key_logfile: /etc/<span class="literal">salt</span>/key</span><br><span class="line">nodegroups:</span><br><span class="line">  centos7: <span class="string">'L@centos7.10.0.2.222'</span></span><br><span class="line">  tool: <span class="string">'L@tserver.10.0.6.5,tclient.10.0.6.6'</span></span><br><span class="line">  all: <span class="string">'N@tool or N@centos7'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动salt-master</span></span><br><span class="line">$&gt; /etc/init.d/<span class="literal">salt</span>-master <span class="literal">start</span></span><br></pre></td></tr></table></figure>
<p>&emsp;按照nodegroups分组批量管理(新增nodegroups定义后<strong>不需要重启</strong>salt-master)<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$&gt; salt –<span class="keyword">N</span> tool test.ping</span><br><span class="line"></span><br><span class="line">tclient<span class="number">.10</span><span class="number">.0</span><span class="number">.6</span><span class="number">.6</span>:</span><br><span class="line">    <span class="keyword">True</span></span><br><span class="line">tserver<span class="number">.10</span><span class="number">.0</span><span class="number">.6</span><span class="number">.5</span>:</span><br><span class="line">    <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p>
<h4 id="salt-minion_配置"><strong>salt-minion　配置</strong></h4><p>&emsp;默认配置文件：<strong>/etc/salt/minion</strong><br>&emsp;salt-minion的<strong><code>id</code></strong>比较重要，可用于salt-master指定nodegroups分组等用途。<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">master</span>: <span class="string">10.0.2.233</span></span><br><span class="line"><span class="attribute">id</span>: <span class="string">tserver.10.0.6.5</span></span><br><span class="line"><span class="attribute">log_file</span>: <span class="string">/var/wwwlog/saltstack/minion.log</span></span><br><span class="line"><span class="attribute">key_logfile</span>: <span class="string">/etc/salt/key</span></span><br><span class="line"></span><br><span class="line"><span class="puppet">$&gt; /etc/init.d/<span class="literal">salt</span>-minion <span class="literal">start</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="SaltStack_认证"><strong>SaltStack 认证</strong></h2><p>&emsp;皆在salt-master端</p>
<ul>
<li><p>查看</p>
  <figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-<span class="variable">key</span> –L</span><br></pre></td></tr></table></figure>
</li>
<li><p>接受</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-key –<span class="tag">a</span> minion_id</span><br></pre></td></tr></table></figure>
</li>
<li><p>接受所有</p>
  <figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-key –<span class="literal">A</span></span><br></pre></td></tr></table></figure>
<p>  master设置自动接受所有：/etc/salt/master——<code>auto_accept: True</code></p>
</li>
</ul>
<ul>
<li><p>测试连通</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> test<span class="class">.ping</span></span><br><span class="line">salt <span class="string">'*'</span> test<span class="class">.ping</span> –t <span class="number">15</span>   (-t 设置超时时间)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Debug</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -<span class="keyword">N</span> tool <span class="keyword">test</span>.ping -v -<span class="keyword">l</span> all</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除minion</p>
  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-key <span class="operator">-d</span> minion_id</span><br></pre></td></tr></table></figure>
</li>
<li><p>认证过程</p>
<ol>
<li>minion在第一次启动时，会在/etc/salt/pki/minion/（该路径在/etc/salt/minion里面设置）下自动生成minion.pem(privatekey)和minion.pub(publickey)，然后将minion.pub发送给master。</li>
<li>master在接收到minion的publickey后，通过salt-key命令acceptminionpublickey，这样在master的/etc/salt/pki/master/minions下的将会存放以minionid命名的publickey,然后master就能对minion发送指令了。</li>
</ol>
</li>
</ul>
<h2 id="SaltStack_批量管理"><strong>SaltStack 批量管理</strong></h2><ul>
<li><p>远程执行命令</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt <span class="string">'*'</span> cmd<span class="class">.run</span> <span class="string">'bash --version'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>远程执行指定语言的命令</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#salt</span> ‘目标’ 执行语言 对应语言的代码</span><br><span class="line">salt <span class="string">'centos7.10.0.2.222'</span> cmd<span class="class">.exec_code</span> python <span class="string">'print "test"'</span></span><br><span class="line">salt <span class="string">'centos7.10.0.2.222'</span> cmd<span class="class">.exec_code</span> bash <span class="string">'echo "test"'</span></span><br><span class="line"></span><br><span class="line">centos7.<span class="number">10.0</span>.<span class="number">2.222</span>:</span><br><span class="line">   	test</span><br></pre></td></tr></table></figure>
</li>
<li><p>从master批量复制文件到minion<br>  &emsp;源文件目录可在master配置文件中指定，默认路径为<strong><code>/srv/salt/</code></strong>： </p>
  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">file_roots:</span></span><br><span class="line"><span class="label">  base:</span></span><br><span class="line">    - <span class="regexp">/srv/</span>salt/</span><br></pre></td></tr></table></figure>
  <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#必须指定到文件</span></span><br><span class="line"><span class="title">salt</span> <span class="string">'*'</span> cp.get_file <span class="url">salt://vimrc</span> /etc/vimrc</span><br></pre></td></tr></table></figure>
<p>  &emsp;或者直接用<strong><code>salt-cp</code></strong>命令</p>
  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt-<span class="keyword">cp</span> -<span class="keyword">N</span> tool <span class="keyword">sh</span>/*.<span class="keyword">sh</span> /tmp/</span><br></pre></td></tr></table></figure>
</li>
<li><p>minion远程下载master脚本并执行<br>  &emsp;master端脚本存放路径：<strong>/srv/salt/scripts</strong>(<code>/srv/salt</code>同上的<code>file_roots</code>设置)<br>  &emsp;minion默认脚本存放路径：<strong>/var/cache/salt/minion/files/base/scripts/</strong></p>
  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt \* cmd.script <span class="keyword">sal</span><span class="variable">t:</span>//scripts/test.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="SaltStack_配置管理"><strong>SaltStack 配置管理</strong></h2><h3 id="top-sls"><strong>top.sls</strong></h3><p>&emsp;<strong><code>top.sls</code></strong>是配置管理的入口文件，若使用<strong><code>state.highstate</code></strong>则会根据<code>top.sls</code>的内容将<code>statefile</code>推送到salt-minion并执行；若是直接指定<code>statefile</code>则可不根据<code>top.sls</code>。在salt-master主机上，默认存放在<strong><code>/srv/salt/top.sls</code></strong>。 <code>(/etc/salt/master——file_roots)</code><br>&emsp;<strong><code>top.sls</code></strong>文件结构：</p>
<ul>
<li><code>base</code>：<code>top.sls</code>默认从<strong><code>base</code></strong>标签开始解析执行。</li>
<li><code>操作目标</code>：需要执行操作的salt-minion目标。可以通过<strong>正则</strong>、<strong>grain模块</strong>、<strong>分组名</strong>来进行匹配。</li>
<li><code>statefile</code>：需要执行的state文件。指定statefile不需要包含扩展名(<code>.sls</code>)，详见下节内容。</li>
</ul>
<p>&emsp;top.sls文件样例<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">base:</span><br><span class="line">  tool:         					#nodegroup分组名指定目标</span><br><span class="line">    -<span class="ruby"> <span class="symbol">match:</span> nodegroup              <span class="comment">#指定匹配类型为nodegroup</span></span><br><span class="line"></span>    -<span class="ruby"> statefile.apache            	<span class="comment">#state文件：/srv/salt/statefile/apache.sls</span></span><br><span class="line"></span></span><br><span class="line">  'centos7.10.0.2.222':				#直接指定minion_id目标</span><br><span class="line">    -<span class="ruby"> statefile.nginx</span><br><span class="line"></span></span><br><span class="line">  'os:CentOS':						#通过grain指定目标</span><br><span class="line">    -<span class="ruby"> <span class="symbol">match:</span> grain					<span class="comment">#指定匹配类型为grain</span></span><br><span class="line"></span>    -<span class="ruby"> statefile.git</span><br><span class="line"></span></span><br><span class="line">  '*':								#目标为所有minion</span><br><span class="line">    -<span class="ruby"> statefile.all</span></span><br></pre></td></tr></table></figure></p>
<h3 id="SLS文件——statefile"><strong>SLS文件——statefile</strong></h3><h4 id="SLS文件规则"><strong>SLS文件规则</strong></h4><ul>
<li>SLS文件的扩展名<code>.sls</code>被省略。 (例如：nginx.sls 变成 nginx)                                              </li>
<li>若有子目录，子目录都由一个点来表示.(例如 statefile/nginx.sls写成 statefile.nginx)</li>
<li>若子目录下存在<strong><code>init.sls</code></strong>文件，引用的时候仅指定该目录即可. (例如 statefile/init.sls 可以简称为 statefile）</li>
<li>若一个目录下同时存在<code>statefile.sls</code>和<code>statefile/init.sls</code>，那么 statefile/init.sls 将被忽略，SLS文件引用的statefile将只引用statefile.sls</li>
<li>缩进严格按照python标准，且不要用tab做缩进而应用空格！</li>
</ul>
<h4 id="实例分析"><strong>实例分析</strong></h4><p>&emsp;通过具体实例分析<strong>statefile</strong>(hexo会对markdown显示有些影响)</p>
<ol>
<li><p><strong>cmd.script</strong></p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cmdscript:</span></span><br><span class="line">  cmd.<span class="string">script:</span></span><br><span class="line">	- <span class="string">source:</span> <span class="string">salt:</span><span class="comment">//scripts/test.sh</span></span><br><span class="line">	- <span class="string">user:</span> root</span><br><span class="line">	- <span class="string">shell:</span> <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure>
<ul>
<li><code>cmdscript</code>：ID标签定义</li>
<li><code>cmd.script</code>：使用saltstack的<code>cmd.script</code>模块<ul>
<li><code>source</code>： 指定master端脚本存放路径，minion从master上下载并执行。master上物理存放路径：<code>/srv/salt/scripts/test.sh</code></li>
<li><code>user</code>：指定执行脚本的用户</li>
<li><code>shell</code>：指定执行脚本的shell</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>cmd.run</strong></p>
 <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cmdrun:</span><br><span class="line">  cmd.run:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">cwd:</span> /tmp</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">name:</span> pwd;uptime</span><br><span class="line"></span></span><br><span class="line">cmdrun2:</span><br><span class="line">  cmd.run:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">cwd:</span> /tmp</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">names:</span></span><br><span class="line"></span>	  -<span class="ruby"> pwd</span><br><span class="line"></span>	  -<span class="ruby"> uptime</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>cmd.wait</strong></p>
 <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cmdwait:</span></span><br><span class="line">  cmd.<span class="string">wait:</span></span><br><span class="line">	- <span class="string">names:</span></span><br><span class="line">	  - <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>sbin<span class="regexp">/nginx -t &amp;&amp; /</span>usr<span class="regexp">/local/</span>nginx<span class="regexp">/sbin/</span>nginx -s reload</span><br><span class="line">	- <span class="string">watch:</span></span><br><span class="line">	  - <span class="string">file:</span> <span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf<span class="regexp">/vhosts/</span>cmdwait.conf</span><br><span class="line"></span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/nginx/</span>conf<span class="regexp">/vhosts/</span>cmdwait.<span class="string">conf:</span></span><br><span class="line">  file.<span class="string">managed:</span></span><br><span class="line">	- <span class="string">source:</span> <span class="string">salt:</span><span class="comment">//configfile/cmdwait.conf</span></span><br><span class="line">	- <span class="string">backup:</span> minion</span><br></pre></td></tr></table></figure>
<ul>
<li><code>cmd.wait</code>：条件执行命令，满足条件后才执行<code>names</code>中的命令。</li>
<li><code>watch</code>：文件监控(监控文件是否存在或变化)，此处监控salt-minion上<code>file</code>指定的文件且作为<code>cmd.wait</code>的条件。</li>
<li><code>file.managed</code>：文件管理<ul>
<li><code>/usr/local/nginx/conf/vhosts/cmdwait.conf</code>：salt-minion上文件路径，同步来自salt-master上指定的文件。</li>
<li><code>source</code>：salt-master上的文件，如果此文件有变化推送SLS配置管理时会立即同步到salt-minion上。</li>
<li><code>backup</code>：指定salt-minion在同步文件前先备份原有文件，默认备份路径<strong><code>/var/cache/salt/minion/file_backup</code></strong></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Apache配置管理实例</strong><br> &emsp;若要使用<code>service</code>则需要有<code>/etc/init.d/httpd</code>脚本</p>
 <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">apache:</span><br><span class="line">  pkg:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">name:</span> httpd</span><br><span class="line"></span>	-<span class="ruby"> installed</span><br><span class="line"></span></span><br><span class="line">  service:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">name:</span> httpd</span><br><span class="line"></span>	-<span class="ruby"> running</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">enable:</span> <span class="constant">True</span></span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">reload:</span> <span class="constant">True</span></span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">watch:</span></span><br><span class="line"></span>	  -<span class="ruby"> <span class="symbol">file:</span> /etc/httpd/conf/httpd.conf</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">require:</span></span><br><span class="line"></span>	  -<span class="ruby"> <span class="symbol">pkg:</span> httpd</span><br><span class="line"></span><span class="comment"></span><br><span class="line">/etc/httpd/conf/httpd.conf:</span></span><br><span class="line">  file.managed:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">source:</span> <span class="symbol">salt:</span>/<span class="regexp">/configfile/httpd</span>.conf</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">backup:</span> minion</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>unless &amp; onlyif</strong><br> &emsp;unless——当命令执行返回’False’时，执行name里的命令；onlyif相反</p>
 <figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">apacheStart:</span><br><span class="line">  cmd.run:</span><br><span class="line">	- name: service httpd start</span><br><span class="line">	- <span class="keyword">unless</span>: ps aux|<span class="keyword">grep</span> httpd|<span class="keyword">grep</span> -v <span class="keyword">grep</span>|<span class="keyword">grep</span> -v <span class="string">'bash -c'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>使用saltstack批量配置vim</strong><br> &emsp;statefile：<code>/srv/salt/statefile/vimConfig.sls</code><br> &emsp;推送执行<code>vimConfig.sls</code>：<strong><code>salt -G os:CentOS state.sls statefile.vimConfig</code></strong></p>
 <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">vimInstall:</span><br><span class="line">  pkg.installed:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">names:</span></span><br><span class="line"></span>	  -<span class="ruby"> vim-enhanced</span><br><span class="line"></span>	  -<span class="ruby"> unzip</span><br><span class="line"></span></span><br><span class="line">vimDownload:</span><br><span class="line">  file.managed:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">name:</span> /home/work/software/<span class="constant">AutoConfigVim</span>.zip</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">source:</span> <span class="symbol">salt:</span>/<span class="regexp">/software/</span><span class="constant">AutoConfigVim</span>.zip</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">unless:</span> test -e /home/work/software/<span class="constant">AutoConfigVim</span>.zip</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">require:</span></span><br><span class="line"></span>	  -<span class="ruby"> <span class="symbol">pkg:</span> vimInstall</span><br><span class="line"></span></span><br><span class="line">vimUnzip:</span><br><span class="line">  cmd.run:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">cwd:</span> /home/work/software</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">name:</span> unzip -q <span class="constant">AutoConfigVim</span>.zip</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">unless:</span> test -e /home/work/software/<span class="constant">AutoConfigVim</span></span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">require:</span></span><br><span class="line"></span>	  -<span class="ruby"> <span class="symbol">file:</span> vimDownload</span><br><span class="line"></span></span><br><span class="line">vimScript:</span><br><span class="line">  cmd.run:</span><br><span class="line">	-<span class="ruby"> <span class="symbol">cwd:</span> /home/work/software/<span class="constant">AutoConfigVim</span></span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">name:</span> bash <span class="constant">AutoConfigVim</span>.sh</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">onlyif:</span> test -e /home/work/software/<span class="constant">AutoConfigVim</span>/<span class="constant">AutoConfigVim</span>.sh</span><br><span class="line"></span>	-<span class="ruby"> <span class="symbol">require:</span></span><br><span class="line"></span>	  -<span class="ruby"> <span class="symbol">cmd:</span> vimUnzip</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="推送执行SLS配置管理"><strong>推送执行SLS配置管理</strong></h4><ol>
<li><p>根据top.sls的内容，将<strong>全部</strong>statefile文件推送到指定minion并执行</p>
 <figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt –<span class="keyword">N</span> tool state.highstate</span><br></pre></td></tr></table></figure>
</li>
<li><p>不根据top.sls，只将特定的statefile(<code>statefile/cmdscript.sls</code>)推送到指定minion并执行(<code>-v</code> 查看执行反馈)</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -N tool state<span class="class">.sls</span> statefile<span class="class">.cmdscript</span> –v</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="获取minion信息——grains_&amp;_pillar"><strong>获取minion信息——grains &amp; pillar</strong></h2><p>&emsp;<strong>grains</strong> 和 <strong>pillar</strong>都可用于获取minion的信息，但两者有很多不同的地方需要注意。</p>
<ul>
<li><p><strong>grains</strong></p>
<ol>
<li>minion每次启动时采集minion信息并向master汇报</li>
<li><strong>grains</strong>用于存储静态、不常变化的信息数据</li>
<li><strong>grains</strong>存储在minion本地</li>
<li>minion可对<strong>grains</strong>进行操作(新增、删除等)</li>
</ol>
</li>
<li><p><strong>pillar</strong></p>
<ol>
<li><strong>pillar</strong>用于存储敏感或常变化的信息数据</li>
<li><strong>pillar</strong>存储在master本地</li>
<li>minion只能对自己的<strong>pillar</strong>进行查询的权限，无法修改。</li>
</ol>
</li>
</ul>
<h4 id="grains"><strong>grains</strong></h4><ul>
<li><p>查看minion所有信息</p>
  <figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -N tool grains.<span class="keyword">items</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列出所有查看项目</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -<span class="keyword">N</span> tool grains.<span class="keyword">ls</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看特定项目</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -N tool grains<span class="class">.item</span> ipv4</span><br></pre></td></tr></table></figure>
</li>
<li><p>自定义信息项<br>  &emsp;<code>mkdir -p /srv/salt/_grains</code>目录下编写脚本，返回时必须为<strong>字典</strong>。<br>  &emsp;salt-master端：<strong><code>/srv/salt/_grains/getNginxVer.py</code></strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getNginxVer</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="string">"""get minion nginx version"""</span></span><br><span class="line">	ngxver = &#123;&#125;</span><br><span class="line">	ngxV = commands.getoutput(<span class="string">'/usr/local/nginx/sbin/nginx -V'</span>)</span><br><span class="line">	ngxver[<span class="string">'nginxversion'</span>] = ngxV.split(<span class="string">'\n'</span>)[<span class="number">0</span>].split(<span class="string">'/'</span>)[-<span class="number">1</span>]</span><br><span class="line">	<span class="keyword">return</span> ngxver</span><br></pre></td></tr></table></figure>
<p>  &emsp;自定义grains脚本同步到minion：会将_grains目录下的文件全部同步到minion</p>
  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt ‘<span class="keyword">*</span>’ saltutil.sync_grains</span><br></pre></td></tr></table></figure>
<p>  获取自定义grains信息项：</p>
  <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt ‘*’ grains<span class="class">.item</span> nginxversion</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="pillar"><strong>pillar</strong></h4><ul>
<li><p>查看默认pillar</p>
  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">salt</span> -<span class="type">N</span> tool pillar.<span class="typedef"><span class="keyword">data</span></span></span><br></pre></td></tr></table></figure>
<p>  &emsp;默认pillar路径(pillar_roots)：<strong><code>/srv/pillar</code></strong><br>  &emsp;组织pillar文件、pillar入口文件：<strong><code>/srv/pillar/top.sls</code></strong><br>  &emsp;pillar和SLS一样拥有自己的<code>top.sls</code>文件，通过top.sls文件作为入口，组织其它的pillar文件。<br>  &emsp;自定义pillar待了解。</p>
</li>
</ul>
<h2 id="SaltStack_模块"><strong>SaltStack 模块</strong></h2><h4 id="系统模块"><strong>系统模块</strong></h4><p>&emsp;最新在线系统模块查询：<a href="http://docs.saltstack.com/en/latest/ref/modules/all/index.html" target="_blank" rel="external">saltstack系统模块</a><br>&emsp;命令查询在线doc：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt \<span class="keyword">*</span> sys.doc disk</span><br></pre></td></tr></table></figure></p>
<p>&emsp;系统模块如：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">salt ‘<span class="keyword">*</span>’ test.ping</span><br><span class="line">salt ‘<span class="keyword">*</span>’ disk.usage</span><br></pre></td></tr></table></figure></p>
<h4 id="自定义模块"><strong>自定义模块</strong></h4><ul>
<li><p>默认模块存放路径<br>  <strong><code>/srv/salt/_modules</code></strong></p>
</li>
<li><p>自定义模块样例——<strong><code>/srv/salt/_modules/custom.py</code></strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">'This is saltstack custom module test.'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>同步自定义模块到minion<br>  &emsp;此操作会将master上<code>/srv/salt/_modules</code>目录下的所有目录及文件同步到minion上的<strong><code>/var/cache/salt/minion/files/base/_modules</code></strong>目录下。(包括隐藏文件)</p>
  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt \<span class="keyword">*</span> saltutil.sync_modules</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行自定义模块</p>
  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt \<span class="keyword">*</span> custom.test</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="自定义returners"><strong>自定义returners</strong></h4><ul>
<li><p>默认模块存放路径<br>  <strong><code>/srv/salt/_returners</code></strong></p>
</li>
<li><p>自定义returner样例——<strong><code>/srv/salt/_returners/writefile.py</code></strong></p>
  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2.7</span></span><br><span class="line"><span class="comment">#coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__virtual__</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="string">"""调用时用的名字"""</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">"writefile"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">returner</span><span class="params">(result)</span>:</span></span><br><span class="line">	<span class="string">"""将minion的return写入到文件"""</span></span><br><span class="line">	fd = open(<span class="string">'/tmp/saltReturn.txt'</span>, <span class="string">'a+'</span>)</span><br><span class="line">	fd.write(str(result))</span><br><span class="line">	fd.close()</span><br></pre></td></tr></table></figure>
</li>
<li><p>同步自定义returner</p>
  <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt \<span class="keyword">*</span> saltutil.sync_returners</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用自定义returner：</p>
  <figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">salt -<span class="keyword">N</span> centos7 cmd.<span class="keyword">run</span> 'uptime' --<span class="keyword">return</span> writefile</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="计划任务"><strong>计划任务</strong></h2><p>&emsp;默认情况下，时间参数都是<code>*</code>，执行用户是”root”，当修改一个当前存在的cron job，这个名字的声明<strong>必须是全局唯一的</strong>，否则会自动新增crontab job！<br>&emsp;如果cron的命令(name)被修改，只会新增cron job不会更新！！</p>
<p>定时任务样例——crontab.sls<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">cronScriptFile:</span></span><br><span class="line">  file.<span class="string">managed:</span></span><br><span class="line">    - <span class="string">name:</span> <span class="regexp">/home/</span>work<span class="regexp">/script/</span>cron.sh</span><br><span class="line">    - <span class="string">source:</span> <span class="string">salt:</span><span class="comment">//scripts/cron.sh</span></span><br><span class="line"><span class="label"></span><br><span class="line">crontab20141020:</span></span><br><span class="line">  cron.<span class="string">present:</span></span><br><span class="line">    - <span class="string">name:</span> bash <span class="regexp">/home/</span>work<span class="regexp">/script/</span>cron.sh &gt;&gt; <span class="regexp">/dev/</span><span class="literal">null</span> <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">    - <span class="string">user:</span> root</span><br><span class="line">    - <span class="string">minute:</span> random</span><br><span class="line">    - <span class="string">hour:</span> <span class="string">'*/2'</span></span><br><span class="line">    - <span class="string">require:</span></span><br><span class="line">      - <span class="string">file:</span> cronScriptFile</span><br></pre></td></tr></table></figure></p>
<h2 id="关于saltstack无返回信息的问题"><strong>关于saltstack无返回信息的问题</strong></h2><p>&emsp;saltstack用一段时间后发现一个非常严重的问题。当salt-master执行命令时，部分salt-minion并没有返回任何信息，无论是成功还是失败信息都没有。这导致无法确定salt-minion是否执行了命令还是返回信息丢失，这样的不可控性对Ops来说是个非常严重的问题。<br>&emsp;为解决此问题根据<strong>jid</strong>查看salt-minion的执行情况。当salt-master执行命令时加上<strong><code>-v</code></strong>参数，让其返回任务的<code>jid</code>。若有salt-minion没有返回信息则根据此<code>jid</code>查询任务结果<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$&gt; salt -v \* cmd.run <span class="emphasis">'echo "jid test"'</span></span><br><span class="line"><span class="header">Executing job with jid 20160225103117255324</span><br><span class="line">-------------------------------------------</span></span><br><span class="line">centos7.10.0.2.222:</span><br><span class="line"><span class="code">    jid test</span></span><br><span class="line">tserver.10.0.6.5:</span><br><span class="line"><span class="code">    jid test</span></span><br><span class="line">tclient.10.0.6.6:</span><br><span class="line"><span class="code">    jid test</span></span><br><span class="line"></span><br><span class="line">$&gt; salt-run jobs.lookup<span class="emphasis">_jid 20160225103117255324</span><br><span class="line">centos7.10.0.2.222:</span><br><span class="line">    jid test</span><br><span class="line">tclient.10.0.6.6:</span><br><span class="line">    jid test</span><br><span class="line">tserver.10.0.6.5:</span><br><span class="line">    jid test</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;假若管理的salt-minion达到一定数量，可使用<strong><code>--async</code></strong>参数<strong>异步</strong>执行命令，然后根据<code>jid</code>查询执行结果。<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$&gt; salt --async \* cmd.<span class="keyword">run</span> 'echo <span class="string">"jid test"</span>'</span><br><span class="line">Executed command with job ID: 20160225104129665398</span><br><span class="line"></span><br><span class="line">$&gt; salt-<span class="keyword">run</span> jobs.lookup_jid 20160225104129665398</span><br><span class="line">centos7.10.0.2.222:</span><br><span class="line">    jid <span class="keyword">test</span></span><br><span class="line">tclient.10.0.6.6:</span><br><span class="line">    jid <span class="keyword">test</span></span><br><span class="line">tserver.10.0.6.5:</span><br><span class="line">    jid <span class="keyword">test</span></span><br></pre></td></tr></table></figure></p>
<h3 id="关于jid"><strong>关于jid</strong></h3><p>&emsp;salt-master每执行一次salt命令就会产生一个Job，每个Job会有一个唯一的<code>jid</code>。<br>&emsp;<strong><code>jid</code></strong>: job id, 格式为<code>%Y%m%d%H%M%S%f</code><br>&emsp;salt-master在下发指令消息时, 会附带上产⽣的jid. salt-minion接收到指令开始执⾏时, 会在本地cachedir(默认是<code>/var/cache/salt/minion/proc</code>)下以该jid命名产生⽂件,⽤于在执⾏过程中master查看当前任务的执⾏情况. 指令执⾏完毕将结果传送给master后并删除该临时⽂件⽂件。<br>&emsp;salt-master将salt-minion的执⾏结果存放在本地<strong><code>/var/cache/salt/master/jobs</code></strong>目录下, 默认缓存24⼩时(可通过修改master配置⽂件<strong><code>keep_jobs</code></strong>选项调整)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="SaltStack安装"><strong>SaltStack安装</strong></h2><p>&emsp;各Linux版本安装详见<a href="https://docs.saltstack.com/en/latest/topics/installation]]>
    </summary>
    
      <category term="saltstack" scheme="http://yoursite.com/tags/saltstack/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[DDOS浅记]]></title>
    <link href="http://yoursite.com/2015/11/11/ddos/"/>
    <id>http://yoursite.com/2015/11/11/ddos/</id>
    <published>2015-11-11T14:29:11.000Z</published>
    <updated>2015-12-06T15:30:44.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;<a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A" target="_blank" rel="external">DDOS(Distributed Denial of Service)</a>，分布式拒绝服务攻击是目前互联网上主流的攻击方式，也是最难防御的攻击方式。之前就已经有了解，只是最近刚刚好整理相关方面的资料，顺便简单记录一下。</p>
<h3 id="SYN_Flood"><strong>SYN Flood</strong></h3><p>&emsp;<strong>SYN Flood</strong>既SYN 洪水攻击，是DDOS攻击方式中最为经典的一种，利用TCP三次握手的设计缺陷，通过发送含有虚假源IP地址的SYN报文，使得服务端永远无法完成三次握手，一直处于<strong>SYN_RECV</strong>状态无法释放资源，直到占满系统协议栈等待队列无法新建连接导致拒绝服务。(关于TCP三次握手详见<a href="https://moguol.github.io/2015/07/16/review-tcp-ip-3/" target="_blank" rel="external">这里</a>)</p>
<ol>
<li>client发送<code>SYN</code>报文(虚假源IP地址)</li>
<li>server接受到包含虚假源IP地址的SYN报文后，返回<code>SYN+ACK</code>报文进入<code>SYN_RECV</code>状态等待client的<code>ACK</code>报文</li>
<li><del>client接受到server的<code>SYN+ACK</code>报文，返回<code>ACK</code>报文</del>。由于攻击者使用的SYN报文为虚假源IP地址，所以client是无法收到<code>SYN+ACK</code>报文的，故此步骤无法执行，从而造成server一直等待此步的<code>ACK</code>报文。</li>
</ol>
<p>&emsp;<strong>防御</strong>：SYN Flood可以通过调整内核的参数对其攻击起到一定的缓解作用，但修改内核参数的做法仅在攻击流量小的时候才有效果，当攻击流量大时是抵挡不住的。</p>
<ul>
<li><code>/proc/sys/net/ipv4/tcp_syncookies</code>：开启SYN Cookie(1开启)</li>
<li><code>/proc/sys/net/ipv4/tcp_max_syn_backlog</code>：SYN最大队列长度</li>
<li><code>/proc/sys/net/ipv4/tcp_synack_retries</code>：SYN+ACK最大重试次数</li>
</ul>
<p>&emsp;除了调整内核参数外，对于SYN Flood常见的防御方法有如下三种：</p>
<ul>
<li><strong>SYN Cookies</strong>：当启用了SYN Cookies后server在收到client的<code>SYN</code>包并回复<code>SYN+ACK</code>包时，并不会专门分配存储空间而是根据client的<code>SYN</code>包计算出cookie值，此cookie值将代替原有随机产生的序列号作为<code>SYN+ACK</code>包的序列号回复给client，当client回复<code>ACK</code>包时，核对cookie(SYN+ACK序列号)和确认序号，匹配则完成三次握手，不匹配则丢弃。</li>
<li><strong>SYN Proxy</strong>：SYN Proxy是在client和server之间做一个”代理转发”。proxy先伪装成server接受client的SYN握手请求，当成功建立三次握手后(表明client是正常而非攻击者)proxy在伪装成client向server进行三次握手建立连接，然后转发数据。如此一来，一次通信就由原来的三次握手变成了六次握手而且序列号也需要做相应的调整。</li>
<li><strong>首包丢弃</strong>：对client首次发送的<code>SYN</code>进行丢弃处理，如果是正常client会在一定时间内重新尝试握手，假若等待超时后没收到重传的SYN包则判断此client非法，加入黑名单。</li>
</ul>
<h3 id="UDP_Flood/DNS_Query_Flood"><strong>UDP Flood/DNS Query Flood</strong></h3><p>&emsp;<strong>UDP Flood</strong>通常是制造大量伪造源地址的UDP包对提供使用UDP协议的服务器进行流量攻击致使服务器及其网络瘫痪，而其中又以<strong>DNS Query Flood</strong>攻击最为常见。DNS Query Flood主要是针对DNS服务器，通过向DNS服务器发起大量的域名查询请求从而让服务器或其网络瘫痪，为使攻击更有效果，攻击者会伪装源IP、源端口、查询ID等，对需要解析的域名会进行随机的伪造从而降低DNS缓存的命中率达到攻击效果最大化。</p>
<h3 id="CC攻击"><strong>CC攻击</strong></h3><p>&emsp;<strong>CC攻击</strong>其实是<strong>HTTP Flood</strong>攻击，通过对Web服务器发起大量真实的HTTP请求使得服务器无法同时间处理并发量巨大的请求而导致服务瘫痪来达到攻击目的。粗暴的CC攻击是利用大量真实并发的HTTP请求来达到效果，有点以本伤人的味道。然而简单粗暴的CC攻击需要大量的”肉鸡”或匿名代理服务器，为了以最小的攻击量达到最大的攻击效果，针对不同Web服务器业务的针对性CC攻击杀伤力才巨大，同时也是最难防御的。针对性的对攻击目标Web服务进行分析，找出业务上的缺陷，如某个请求会触发数据库查询等，针对性的对缺陷进行攻击。CC攻击之所以难防御就是因为其不具备容易防御的攻击特性。<br>&emsp;<strong>防御</strong>：对于CC攻击目前并没有一个普遍且有效的防御方式，只能缓解而无法彻底防御。用好<strong>缓存</strong>是较为有效的办法，比如图片等静态资源可以使用CDN做缓存，对于不复杂的数据查询可用Redis、Memcache做缓存减少对数据库的查询压力，减少业务上的缺陷提高并发能力，优化SQL性能等等。</p>
<h3 id="慢速连接攻击"><strong>慢速连接攻击</strong></h3><p>&emsp;一般的DDOS攻击都是以大流量为主，通过发送大量报文将目标服务器或网络压垮导致服务瘫痪无法正常提供服务。然而，<strong>慢速连接攻击</strong>却反其道而行之，攻击者会操控肉鸡先与目标服务器正常建立HTTP连接，然后将<code>HTTP HEADER</code>中<code>Connection</code>设置为<strong><code>keep-alive</code></strong>并设置一个较大的<strong><code>content-length</code></strong>，每隔一段时间只发送几个字节的数据，服务器一直等待接收剩余数据而保持连接，此种慢速连接不断累积增加直到导致新的连接请求无法被处理，以此达到让服务器拒绝服务的目的。<br>&emsp;<strong>慢速连接攻击</strong>发展至今已有很多变种，常见的有以下三种类型：</p>
<ul>
<li><strong>慢速Header</strong>：服务器在处理HTTP请求之前需要先接收请求的<code>HTTP Header</code>，而HTTP协议规定，一个正常的HTTP请求要以<strong><code>\r\n\r\n</code></strong>结尾用以表示请求结束，服务器可以开始正式处理此HTTP请求。<strong>慢速Header</strong>利用此特性，慢速不断的发送只带有<strong><code>\r\n</code></strong>的<strong><code>HTTP Header</code></strong>，由于服务器没有收到<strong><code>\r\n\r\n</code></strong>结尾的<code>HTTP Header</code>便一直等待。</li>
<li><strong>慢速Body</strong>：攻击者会先建立一个正常的HTTP连接，然后发起一个<strong><code>HTTP POST</code></strong>请求，此请求的<strong><code>Content-length</code></strong>设置为较大的值，再以很低的速度发送很小的数据，使得服务器一直保持连接无法释放资源。</li>
<li><strong>慢速Read</strong>：攻击者在建立正常HTTP连接后会发送一个<strong><code>Read</code></strong>请求(比如请求下载一个较大的文件)，然后故意通告一个极小的TCP接收窗口(甚至通告为零窗口)，让服务器认为此请求的客户端繁忙，服务器便会以非常缓慢的频率和数据量很小的发送请求的文件，使得服务端资源一直被占用而无法释放。</li>
</ul>
<p>&emsp;<strong>防御</strong>：针对<strong>慢速连接攻击</strong>的特点，常见的防御思路有：</p>
<ul>
<li>限制HTTP请求的最大时间，超过最大连接时间则判断为异常请求。</li>
<li>周期性统计传输报文数量，一个周期内传输的报文数量过少则判断为异常请求。</li>
</ul>
<h3 id="DRDOS(分布式反射DOS攻击)"><strong>DRDOS(分布式反射DOS攻击)</strong></h3><p>&emsp;<strong>DRDOS</strong>攻击有点借刀杀人的味道。攻击者伪装被攻击目标的IP，向开放特定服务的服务器发出请求，服务器接收到请求后根据源IP(攻击者伪装)响应请求内容给被攻击目标。大致过程如下所示：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">攻击者————&gt;(发送源<span class="literal">IP</span>为被攻击目标<span class="literal">IP</span>的请求包)————&gt;开放特定服务的服务器————&gt;(服务器接收请求，根据包的源<span class="literal">IP</span>响应请求给被攻击目标)————&gt;被攻击目标</span><br></pre></td></tr></table></figure></p>
<p>&emsp;一开始这种攻击方式并没有什么太吸引人的地方，攻击力也不强。一般的TCP反射，由于被攻击目标和开放特定服务器之间并没有建立TCP握手，在被攻击目标收到响应会立刻回复<strong><code>RST</code></strong>将连接重置。最主要的一点是攻击者制造的攻击流量和被攻击目标接收的流量是一样的。所以一开始DRDOS并没有流行起来，但一旦DRDOS攻击被附加了<strong>流量放大</strong>属性后，其攻击的威力瞬间提升，攻击者只需要用较小的流量便能获得几倍或几十倍的攻击流量。<br>&emsp;目前DRDOS攻击常见的利用协议有：NTP、Chargen、DNS、SNMP等等。大多都是基于UDP的反射型攻击，基于TCP的反射型攻击也有但目前的主流还是集中在UDP类型的反射攻击上。</p>
<ul>
<li><strong>NTP反射流量放大</strong>：DRDOS攻击利用NTP协议，主要是NTP协议有一个<strong>monlist</strong>功能，此功能是列出最近同步过时间的600个主机列表。所以只有攻击者伪装IP发送一个较小的monlist请求，NTP服务器便会响应一个包含600个主机列表的大数据包，攻击者以此来进行流量的反射放大。</li>
<li><strong>DNS反射流量放大</strong>：DNS协议的利用主要是使用<strong>ANY</strong>类型的域名查询请求。</li>
</ul>
<p>&emsp;<strong>防御</strong>：DRDOS攻击最主要的威胁还是在附加<strong>流量放大</strong>后，本质上也是流量攻击的一种。对于大流量的攻击，需要先有较大的处理流量的带宽。其次是利用CDN、智能DNS等手段将流量分散。伴随流量放大的DRDOS攻击会有一个明显的攻击特征，比如利用NTP流量放大攻击，被利用的NTP服务的源端口一般都是UDP 123；利用DNS流量放大的攻击，一般是UDP 53。可以在网络边缘针对源端口进行流量的拦截限制。</p>
<h3 id="链路泛洪"><strong>链路泛洪</strong></h3><p>&emsp;链路泛洪的攻击方式并不直接攻击目标对象而是转为击垮目标的上级网络链路为目的。有时候攻击目标防御措施较为完善，不易攻破。那么攻击者会选择对目标的上级网络链路进行攻击，击溃或堵塞目标的上级网络链路使得正常的流量无法到达目标，从而间接的达到让目标无法提供服务器的目的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;<a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A" target="_blank" rel="external">DDOS(]]>
    </summary>
    
      <category term="ddos" scheme="http://yoursite.com/tags/ddos/"/>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GitLab搭建记]]></title>
    <link href="http://yoursite.com/2015/10/05/GitLab-build/"/>
    <id>http://yoursite.com/2015/10/05/GitLab-build/</id>
    <published>2015-10-05T08:35:38.000Z</published>
    <updated>2015-10-27T15:11:30.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;最近在系统的学习<strong>Git</strong>，需要用到远程仓库，于是想搭个<strong>GitLab</strong>玩玩。没想到想玩好GitLab也不是件容易的事情，即便是按照教程来搭都折腾了挺久，GitLab对各软件版本的要求比较苛刻，所以搭建起来也比较麻烦，在此记录一下搭建的过程以便备忘，其实如果不想折腾可直接使用<a href="https://github.com/" target="_blank" rel="external">GitHub</a>。<br>&emsp;本文记录在<strong>CentOS6.4 64bit</strong>上搭建<strong>GitLab</strong>的过程，搭建<strong>GitLab</strong>需要涉及到如下软件：</p>
<ul>
<li>Git</li>
<li>Ruby</li>
<li>MySQL</li>
<li>Redis</li>
<li>GitLab</li>
<li>GitLab-shell</li>
<li>Gem</li>
<li>Nginx</li>
</ul>
<h3 id="安装依赖"><strong>安装依赖</strong></h3><p>&emsp;添加EPEL源<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; wget -O <span class="regexp">/etc/</span>pki<span class="regexp">/rpm-gpg/</span>RPM-GPG-KEY-EPEL-<span class="number">6</span> <span class="string">https:</span><span class="comment">//www.fedoraproject.org/static/0608B895.txt --no-check-certificate</span></span><br><span class="line">shell&gt; rpm --<span class="keyword">import</span> <span class="regexp">/etc/</span>pki<span class="regexp">/rpm-gpg/</span>RPM-GPG-KEY-EPEL-<span class="number">6</span></span><br><span class="line">shell&gt; rpm -Uvh <span class="string">http:</span><span class="comment">//dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span></span><br><span class="line"></span><br><span class="line">#验证安装</span><br><span class="line">shell&gt; rpm -qa gpg-pubkey</span><br><span class="line">gpg-pubkey-<span class="number">0608</span>b895-<span class="number">4</span>bd22942</span><br></pre></td></tr></table></figure></p>
<p>&emsp;添加puias源<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; wget -O <span class="regexp">/etc/</span>yum.repos.d<span class="regexp">/PUIAS_6_computational.repo https:/</span><span class="regexp">/gitlab.com/</span>gitlab-org<span class="regexp">/gitlab-recipes/</span>raw<span class="regexp">/master/</span>install<span class="regexp">/centos/</span>PUIAS_6_computational.repo</span><br><span class="line">shell&gt; wget -O <span class="regexp">/etc/</span>pki<span class="regexp">/rpm-gpg/</span>RPM-GPG-KEY-puias <span class="string">http:</span><span class="comment">//springdale.math.ias.edu/data/puias/6/x86_64/os/RPM-GPG-KEY-puias</span></span><br><span class="line">shell&gt; rpm --<span class="keyword">import</span> <span class="regexp">/etc/</span>pki<span class="regexp">/rpm-gpg/</span>RPM-GPG-KEY-puias</span><br><span class="line"></span><br><span class="line">#验证安装</span><br><span class="line">shell&gt; rpm -qa gpg-pubkey</span><br><span class="line">gpg-pubkey-<span class="number">41</span>a40948-<span class="number">4</span>ce19266</span><br></pre></td></tr></table></figure></p>
<p>&emsp;查看以上添加的EPEL和puias源<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; yum repolist</span><br><span class="line">Loaded <span class="string">plugins:</span> fastestmirror, refresh-packagekit, security</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * <span class="string">PUIAS_6_computational:</span> puias.math.ias.edu</span><br><span class="line"> * <span class="string">base:</span> ftp.sjtu.edu.cn</span><br><span class="line"> * <span class="string">extras:</span> mirrors.nwsuaf.edu.cn</span><br><span class="line"> * <span class="string">updates:</span> ftp.sjtu.edu.cn</span><br><span class="line">PUIAS_6_computational                                                                                                   | <span class="number">3.3</span> kB     <span class="number">00</span>:<span class="number">00</span></span><br><span class="line">PUIAS_6_computational/primary_db                                                                                        | <span class="number">1.9</span> MB     <span class="number">00</span>:<span class="number">15</span></span><br><span class="line">repo id                                                 repo name                                                                        status</span><br><span class="line">PUIAS_6_computational                                   PUIAS computational Base <span class="number">6</span> - x86_64                                               <span class="number">2</span>,<span class="number">837</span></span><br><span class="line">base                                                    CentOS-<span class="number">6</span> - Base                                                                   <span class="number">6</span>,<span class="number">575</span></span><br><span class="line">epel                                                    Extra Packages <span class="keyword">for</span> Enterprise Linux <span class="number">6</span> - x86_64                                   <span class="number">11</span>,<span class="number">764</span></span><br><span class="line">extras                                                  CentOS-<span class="number">6</span> - Extras                                                                    <span class="number">35</span></span><br><span class="line">treasuredata                                            TreasureData                                                                         <span class="number">14</span></span><br><span class="line">updates                                                 CentOS-<span class="number">6</span> - Updates                                                                  <span class="number">298</span></span><br><span class="line"><span class="string">repolist:</span> <span class="number">21</span>,<span class="number">523</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;安装依赖包<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum -y groupinstall <span class="string">'Development Tools'</span></span><br><span class="line">yum -y install gcc-c++ readline-devel zlib-devel libffi-devel openssl-devel <span class="built_in">make</span> autoconf automake libtool bison libxml2-devel libxslt-devel libyaml-devel</span><br></pre></td></tr></table></figure></p>
<h3 id="添加Git系统用户"><strong>添加Git系统用户</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; adduser --system --shell /bin/bash --comment <span class="string">'GitLab'</span> --create-home --home-dir /home/git/ git</span><br><span class="line"><span class="comment">#将/usr/local/bin添加到系统默认路径</span></span><br><span class="line">shell&gt; visudo</span><br><span class="line">	<span class="constant">Defaults </span>   secure_path = <span class="regexp">/sbin:/bin</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/bin</span><span class="symbol">:/usr/local/bin</span></span><br></pre></td></tr></table></figure>
<h3 id="编译安装Git"><strong>编译安装Git</strong></h3><p>&emsp;需要确保<code>Git</code>的版本在<strong><code>1.7.10</code></strong>或以上，CentOS6.4通过<code>yum</code>的版本是<strong><code>1.7.1</code></strong>，要手动编译安装更高版本<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#如果通过yum安装过Git，需要先删除</span><br><span class="line"><span class="keyword">shell</span>&gt; yum <span class="built_in">remove</span> git</span><br><span class="line"><span class="keyword">shell</span>&gt; yum install zlib-devel <span class="keyword">perl</span>-CPAN gettext curl-devel expat-devel gettext-devel openssl-devel</span><br><span class="line"><span class="keyword">shell</span>&gt; wget http<span class="variable">s:</span>//www.kernel.org/pub/software/scm/git/git-<span class="number">2.5</span>.<span class="number">3</span>.tar.gz</span><br><span class="line"><span class="keyword">shell</span>&gt; tar -zxf git-<span class="number">2.5</span>.<span class="number">3</span>.tar.gz &amp;&amp; <span class="keyword">cd</span> git-<span class="number">2.5</span>.<span class="number">3</span></span><br><span class="line"><span class="keyword">shell</span>&gt; ./configure &amp;&amp; <span class="keyword">make</span> &amp;&amp; <span class="keyword">make</span> prefix=/usr/local install</span><br><span class="line"><span class="keyword">shell</span>&gt; git --<span class="keyword">version</span></span><br><span class="line">git <span class="keyword">version</span> <span class="number">2.5</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<h3 id="编译安装ruby"><strong>编译安装ruby</strong></h3><p>&emsp;<strong><code>ruby</code></strong>需要<strong><code>2.0+</code></strong>的版本，CentOS6.4通过<code>yum</code>安装的版本是<strong><code>1.8</code></strong><br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果通过yum安装过ruby，需要先删除</span></span><br><span class="line"><span class="built_in">shell</span>&gt; yum remove ruby</span><br><span class="line"><span class="built_in">shell</span>&gt; wget <span class="keyword">ftp</span>://<span class="keyword">ftp</span>.ruby-lang.org/pub/ruby/<span class="number">2.1</span>/ruby-<span class="number">2.1</span><span class="number">.2</span>.tar.gz</span><br><span class="line"><span class="built_in">shell</span>&gt; tar -zxf ruby-<span class="number">2.1</span><span class="number">.2</span>.tar.gz &amp;&amp; cd ruby-<span class="number">2.1</span><span class="number">.2</span></span><br><span class="line"><span class="built_in">shell</span>&gt; ./configure <span class="comment">--disable-install-rdoc &amp;&amp; make &amp;&amp; make prefix=/usr/local install</span></span><br><span class="line"><span class="built_in">shell</span>&gt; ruby -v</span><br><span class="line">ruby <span class="number">2.1</span><span class="number">.2</span>p95 (<span class="number">2014</span>-<span class="number">05</span>-<span class="number">08</span> revision <span class="number">45877</span>) [x86_64-linux]</span><br></pre></td></tr></table></figure></p>
<p>&emsp;安装bundler，由于<code>https://rubygems.org/</code>被墙，需要修改ruby源<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shell</span>&gt; gem sources --<span class="built_in">remove</span> http<span class="variable">s:</span>//rubygems.org/</span><br><span class="line"><span class="keyword">shell</span>&gt; gem sources -<span class="keyword">a</span> http<span class="variable">s:</span>//<span class="keyword">ruby</span>.taobao.org/</span><br><span class="line"><span class="keyword">shell</span>&gt; gem sources -<span class="keyword">l</span></span><br><span class="line"><span class="keyword">shell</span>&gt; gem install bundler --<span class="keyword">no</span>-doc</span><br></pre></td></tr></table></figure></p>
<h3 id="安装MySQL数据库"><strong>安装MySQL数据库</strong></h3><p>&emsp;官方推荐使用<strong>MySQL</strong>或<strong>PostgreSQL</strong>作为数据库，如果使用MySQL版本需要高于<strong><code>5.5.14</code></strong>，CentOS6.4通过<code>yum</code>默认安装版本为<strong><code>5.1.73</code></strong>，这里使用<code>yum</code>安装<strong><code>5.5.45</code></strong><br>&emsp;安装MySQL 5.5.45<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">shell</span>&gt; rpm -Uvh <span class="keyword">http</span>://dl.fedoraproject.org/pub/epel/<span class="number">6</span>/i386/epel-release-<span class="number">6</span>-<span class="number">8.</span>noarch.rpm</span><br><span class="line"><span class="built_in">shell</span>&gt; rpm -Uvh <span class="keyword">http</span>://rpms.famillecollet.com/enterprise/remi-release-<span class="number">6.</span>rpm</span><br><span class="line"><span class="built_in">shell</span>&gt; yum <span class="comment">--enablerepo=remi,remi-test install mysql mysql-server mysql-devel</span></span><br><span class="line"><span class="built_in">shell</span>&gt; mysql <span class="comment">--version</span></span><br><span class="line">mysql  Ver <span class="number">14.14</span> Distrib <span class="number">5.5</span><span class="number">.45</span>, <span class="keyword">for</span> Linux (x86_64) <span class="keyword">using</span> readline <span class="number">5.1</span></span><br><span class="line"><span class="built_in">shell</span>&gt; /etc/init.d/mysqld start</span><br><span class="line"><span class="built_in">shell</span>&gt; mysql_secure_installation</span><br><span class="line"><span class="comment">#mysql_secure_installation作用</span></span><br><span class="line">	<span class="comment">#为root用户设置密码</span></span><br><span class="line">	<span class="comment">#删除匿名账号</span></span><br><span class="line">	<span class="comment">#取消root用户远程登录</span></span><br><span class="line">	<span class="comment">#删除test库和对test库的访问权限</span></span><br><span class="line">	<span class="comment">#刷新授权表使修改生效</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;创建GitLab所需数据库用户<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell &gt; mysql -uroot -p</span><br><span class="line">		mysql&gt; <span class="keyword">CREATE</span> USER <span class="string">'git'</span>@<span class="string">'localhost'</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">'gitlab'</span>;</span><br><span class="line">		mysql&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;GitLab需要用INNODB，设置默认存储引擎为INNODB<br>&emsp;&emsp;配置文件设置my.cnf<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="default"><span class="keyword">default</span>-storage-engine = innodb</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;&emsp;命令行设置<br><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SET storage<span class="emphasis">_engine=INNODB;</span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE '%engine';</span><br><span class="line">+------------------------+---------+</span><br><span class="line">| Variable_</span>name          | Value   |</span><br><span class="line">|------------------------+---------|</span><br><span class="line">| default<span class="emphasis">_storage_</span>engine | InnoDB  |</span><br><span class="line"><span class="header">| storage_engine         | InnoDB  |</span><br><span class="line">+------------------------+---------+</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;创建GitLab相关数据库及授权<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="subst">&gt;</span> CREATE DATABASE <span class="keyword">IF</span> <span class="literal">NOT</span> EXISTS <span class="string">`gitlabhq_production`</span> DEFAULT CHARACTER <span class="built_in">SET</span> <span class="string">`utf8`</span> COLLATE <span class="string">`utf8_unicode_ci`</span>;</span><br><span class="line">mysql<span class="subst">&gt;</span> GRANT <span class="keyword">SELECT</span>, LOCK TABLES, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER <span class="keyword">ON</span> <span class="string">`gitlabhq_production`</span><span class="built_in">.</span><span class="subst">*</span> <span class="keyword">TO</span> <span class="string">'git'</span>@<span class="string">'localhost'</span>;</span><br><span class="line">mysql<span class="subst">&gt;</span> FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;登陆验证<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shell</span>&gt; mysql -ugit -p -<span class="keyword">D</span> gitlabhq_production</span><br></pre></td></tr></table></figure></p>
<h3 id="安装Redis"><strong>安装Redis</strong></h3><p>&emsp;使用<code>yum</code>安装<strong>Redis</strong>，完全按照官方文档配置无任何优化<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shell</span>&gt; yum install redis</span><br><span class="line"><span class="keyword">shell</span>&gt; cp /etc/redis.<span class="keyword">conf</span> /etc/redis.<span class="keyword">conf</span>.org</span><br><span class="line"><span class="keyword">shell</span>&gt; sed 's/^port .*/port 0/' /etc/redis.<span class="keyword">conf</span>.org |tee /etc/redis.<span class="keyword">conf</span></span><br><span class="line"><span class="keyword">shell</span>&gt; echo 'unixsocket /<span class="keyword">var</span>/<span class="keyword">run</span>/redis/redis.sock' |tee -a /etc/redis.<span class="keyword">conf</span></span><br><span class="line"><span class="keyword">shell</span>&gt; echo -<span class="keyword">e</span> 'unixsocketperm 0770' |tee -a /etc/redis.<span class="keyword">conf</span></span><br><span class="line"><span class="keyword">shell</span>&gt; chown redis:redis /<span class="keyword">var</span>/<span class="keyword">run</span>/redis</span><br><span class="line"><span class="keyword">shell</span>&gt; chmod 755 /<span class="keyword">var</span>/<span class="keyword">run</span>/redis</span><br><span class="line"><span class="keyword">shell</span>&gt; usermod -aG redis git</span><br><span class="line"><span class="keyword">shell</span>&gt; /etc/init.<span class="keyword">d</span>/redis start</span><br></pre></td></tr></table></figure></p>
<h3 id="安装GitLab"><strong>安装GitLab</strong></h3><h4 id="GitLab配置"><strong>GitLab配置</strong></h4><p>&emsp;在配置文件<code>config/unicorn.rb</code>时中有个<strong><code>timeout</code></strong>设置，若机器性能差需要将<strong><code>timeout</code></strong>值设置大些，否则<code>GitLab</code>在初始化时可能超时<br>&emsp;<code>host</code>最好填域名，此处使用HTTPS<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shell</span>&gt; <span class="keyword">cd</span> /home/git</span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> git clone https:<span class="comment">//gitlab.com/gitlab-org/gitlab-ce.git -b 7-4-stable gitlab</span></span><br><span class="line"><span class="keyword">shell</span>&gt; <span class="keyword">cd</span> gitlab/</span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> cp config/gitlab.yml.example config/gitlab.yml</span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> vim config/gitlab.yml</span><br><span class="line">			  gitlab:</span><br><span class="line">				host: yourdomain</span><br><span class="line">				port: 443</span><br><span class="line">				https: true</span><br><span class="line"><span class="keyword">shell</span>&gt; chown -R git <span class="keyword">log</span>/</span><br><span class="line"><span class="keyword">shell</span>&gt; chown -R git tmp/</span><br><span class="line"><span class="keyword">shell</span>&gt; chmod -R <span class="keyword">u</span>+rwX <span class="keyword">log</span>/</span><br><span class="line"><span class="keyword">shell</span>&gt; chmod -R <span class="keyword">u</span>+rwX tmp/</span><br><span class="line"><span class="keyword">shell</span>&gt; chmod -R <span class="keyword">u</span>+rwX tmp/pids/</span><br><span class="line"><span class="keyword">shell</span>&gt; chmod -R <span class="keyword">u</span>+rwX tmp/sockets/</span><br><span class="line"><span class="keyword">shell</span>&gt; chmod -R <span class="keyword">u</span>+rwX  public/uploads</span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> <span class="keyword">mkdir</span> /home/git/gitlab-satellites</span><br><span class="line"><span class="keyword">shell</span>&gt; chmod <span class="keyword">u</span>+rwx,<span class="keyword">g</span>=rx,o-rwx /home/git/gitlab-satellites</span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> cp config/unicorn.rb.example config/unicorn.rb</span><br><span class="line">#查看系统核心数</span><br><span class="line"><span class="keyword">shell</span>&gt; nproc</span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> vim config/unicorn.rb</span><br><span class="line">			worker_processes 核心数</span><br></pre></td></tr></table></figure></p>
<h4 id="配置全局用户及邮箱"><strong>配置全局用户及邮箱</strong></h4><p>&emsp;此处使用163邮箱作为GitLab的发送邮箱<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> cp config/initializers/rack_attack.rb.example config/initializers/rack_attack.rb</span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> git config --<span class="keyword">global</span> user.name <span class="string">"GitLab"</span></span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> git config --<span class="keyword">global</span> user.email <span class="string">"username@163.com"</span></span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> git config --<span class="keyword">global</span> core.autocrlf <span class="keyword">input</span></span><br></pre></td></tr></table></figure></p>
<h4 id="GitLab_SMTP设置"><strong>GitLab SMTP设置</strong></h4><p>&emsp;<code>GitLab</code>默认使用<strong>Sendmail</strong>进行邮件的发送，邮件发送配置比较重要，当新建用户时<code>GitLab</code>会发送一封邮件给用户并要求重置密码，若要使用<strong>SMTP</strong>发送邮件则需如下配置(此处用的是163邮箱)。<br>&emsp;编辑配置文件<strong><code>sudo -u git -H vim /home/git/gitlab/config/environments/production.rb</code></strong><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config<span class="class">.action_mailer</span><span class="class">.delivery_method</span>= :smtp</span><br></pre></td></tr></table></figure></p>
<p>&emsp;编辑配置文件<strong><code>sudo -u git -H vim /home/git/gitlab/config/initializers/smtp_settings.rb</code></strong><br>&emsp;<strong><code>domain</code></strong>选项用于重置密码时访问的<code>GitLab</code>域名，根据自身情况配置，如<code>domain: &quot;test.com:8080&quot;</code><br>&emsp;<strong><code>enable_starttls_auto</code></strong>假若SMTP没有开启加密连接则此值设置为<code>false</code><br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; cp <span class="regexp">/home/</span>git<span class="regexp">/gitlab/</span>config<span class="regexp">/initializers/</span>smtp_settings.rb.sample <span class="regexp">/home/</span>git<span class="regexp">/gitlab/</span>config<span class="regexp">/initializers/</span>smtp_settings.rb</span><br><span class="line">#smtp_settings.rb</span><br><span class="line">	<span class="keyword">if</span> Rails.env.production?</span><br><span class="line">	  Gitlab::Application.config.action_mailer.delivery_method = :smtp</span><br><span class="line"><span class="label"></span><br><span class="line">	  ActionMailer:</span>:Base.smtp_settings = &#123;</span><br><span class="line"><span class="label">		address:</span> <span class="string">"smtp.163.com"</span>,</span><br><span class="line"><span class="label">		port:</span> <span class="number">25</span>,</span><br><span class="line"><span class="label">		user_name:</span> <span class="string">"username@163.com"</span>,</span><br><span class="line"><span class="label">		password:</span> <span class="string">"password"</span>,</span><br><span class="line"><span class="label">		domain:</span> <span class="string">"domain.com"</span>,</span><br><span class="line"><span class="label">		authentication:</span> :login,</span><br><span class="line"><span class="label">		enable_starttls_auto:</span> <span class="literal">false</span></span><br><span class="line">	  &#125;</span><br><span class="line">	end</span><br></pre></td></tr></table></figure></p>
<p>&emsp;假若SMTP服务器只允许以用登陆方式发送邮件，则还需要配置<strong><code>sudo -u git -H vim /home/git/gitlab/config/gitlab.yml</code></strong><br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">email_from</span>: username<span class="variable">@163</span>.com</span><br></pre></td></tr></table></figure></p>
<h3 id="GitLab连接Redis配置"><strong>GitLab连接Redis配置</strong></h3><p>&emsp;假若redis有自定义优化配置，则按自身需求修改配置文件<code>sudo -u git -H vim /home/git/gitlab/config/resque.yml</code>，否则按照默然配置(此处按照默认)<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo -u git -H cp <span class="regexp">/home/gi</span>t<span class="regexp">/gitlab/</span>config<span class="regexp">/resque.yml.example /</span>home<span class="regexp">/git/gi</span>tlab<span class="regexp">/config/</span>resque.yml</span><br></pre></td></tr></table></figure></p>
<h3 id="GitLab连接MySQL配置"><strong>GitLab连接MySQL配置</strong></h3><p>&emsp;根据自身MySQL配置修改文件<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; sudo -u git cp <span class="regexp">/home/</span>git<span class="regexp">/gitlab/</span>config<span class="regexp">/database.yml.mysql /</span>home<span class="regexp">/git/</span>gitlab<span class="regexp">/config/</span>database.yml</span><br><span class="line">shell&gt; sudo -u git -H vim <span class="regexp">/home/</span>git<span class="regexp">/gitlab/</span>config/database.yml</span><br><span class="line"><span class="label">			production:</span></span><br><span class="line"><span class="label">				adapter:</span> mysql2</span><br><span class="line"><span class="label">				encoding:</span> utf8</span><br><span class="line"><span class="label">				collation:</span> utf8_general_ci</span><br><span class="line"><span class="label">				reconnect:</span> <span class="literal">false</span></span><br><span class="line"><span class="label">				database:</span> gitlabhq_production</span><br><span class="line"><span class="label">				pool:</span> <span class="number">10</span></span><br><span class="line"><span class="label">				username:</span> git</span><br><span class="line"><span class="label">				password:</span> <span class="string">"gitlab"</span></span><br><span class="line"><span class="label">				host:</span> localhost</span><br><span class="line"><span class="label">				socket:</span> <span class="regexp">/var/</span>lib<span class="regexp">/mysql/</span>mysql.sock</span><br></pre></td></tr></table></figure></p>
<h3 id="安装Gem"><strong>安装Gem</strong></h3><p>&emsp;如果太慢或根本无法下载安装，则可把<strong><code>/home/git/gitlab/Gemfile</code></strong>中的源需要改成淘宝的源<br>&emsp;安装前需要先安装libicu-devel及cmake，否则会报错<code>An error occurred while installing charlock_holmes (0.6.9.4)/rugged (0.21.2), and Bundler cannot continue.</code><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shell</span>&gt; yum -y install libicu-devel cmake</span><br><span class="line"></span><br><span class="line">#修改源</span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> vim /home/git/gitlab/Gemfile</span><br><span class="line">			source 'https:<span class="comment">//ruby.taobao.org/'</span></span><br><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> bundle install --deployment --without development <span class="keyword">test</span> postgres aws</span><br></pre></td></tr></table></figure></p>
<h3 id="安装GitLat_shell"><strong>安装GitLat shell</strong></h3><p>&emsp;根据自身情况可修改<code>GitLab shell</code>的配置文件<strong><code>sudo -u git -H vim /home/git/gitlab-shell/config.yml</code></strong><br>&emsp;<code>GitLab-shell</code>的版本使用<strong><code>2.0.1</code></strong>，原本使用<strong><code>2.2.0</code></strong>版本但在<code>git push</code>的时候会报错，此为GitLab-shell版本的问题导致。可以通过<strong><code>sudo -u git -H bundle exec rake gitlab:check RAILS_ENV=production</code></strong>该命令检查<code>GitLab-shell</code>是否正确<br>&emsp;<code>git push</code>时报错内容如下：<br><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Check GitLab API access: /home/git/gitlab-shell/<span class="keyword">lib</span>/gitlab_net.rb:<span class="number">122</span>:<span class="keyword">in</span> `read<span class="comment">': No such file or directory @ rb_sysopen - /home/git/gitlab-shell/.gitlab_shell_secret (Errno::ENOENT)</span></span><br><span class="line">        <span class="keyword">from</span> /home/git/gitlab-shell/<span class="keyword">lib</span>/gitlab_net.rb:<span class="number">122</span>:<span class="keyword">in</span> `secret_token<span class="comment">'</span></span><br><span class="line">        <span class="keyword">from</span> /home/git/gitlab-shell/<span class="keyword">lib</span>/gitlab_net.rb:<span class="number">79</span>:<span class="keyword">in</span> `<span class="keyword">get</span><span class="comment">'</span></span><br><span class="line">        <span class="keyword">from</span> /home/git/gitlab-shell/<span class="keyword">lib</span>/gitlab_net.rb:<span class="number">39</span>:<span class="keyword">in</span> `check<span class="comment">'</span></span><br><span class="line">        <span class="keyword">from</span> /home/git/gitlab-shell/bin/check:<span class="number">11</span>:<span class="keyword">in</span> `&lt;main&gt;<span class="comment">''</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;<del>2.2.0</del>版本试过有问题，git push报错，请使用2.0.1版本<br><del>shell&gt; sudo -u git -H bundle exec rake gitlab:shell:install[v2.2.0] REDIS_URL=unix:/var/run/redis/redis.sock RAILS_ENV=production</del><br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> bundle exec rake gitlab:<span class="keyword">shell</span>:install[v2.0.1] REDIS_URL=unix:/<span class="keyword">var</span>/<span class="keyword">run</span>/redis/redis.sock RAILS_ENV=production</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong><code>/home/git/gitlab-shell/config.yml</code></strong>的配置，是否使用HTTPS决定某些配置项的细微差别(以下是使用HTTPS)<br>&emsp;<strong><code>gitlab_url</code></strong>和<strong><code>self_signed_cert</code></strong>的配置必须匹配，否则在<strong><code>git push</code></strong>的时候会报错<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="string">user:</span> git</span><br><span class="line"><span class="string">gitlab_url:</span> <span class="string">https:</span><span class="comment">//yourdomain/</span></span><br><span class="line"><span class="string">http_settings:</span></span><br><span class="line"><span class="label">  self_signed_cert:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">repos_path:</span> <span class="string">"/home/git/repositories/"</span></span><br><span class="line"><span class="string">auth_file:</span> <span class="string">"/home/git/.ssh/authorized_keys"</span></span><br><span class="line"><span class="string">redis:</span></span><br><span class="line"><span class="label">  bin:</span> <span class="string">"/usr/bin/redis-cli"</span></span><br><span class="line"><span class="label">  namespace:</span> <span class="string">resque:</span>gitlab</span><br><span class="line"><span class="label">  socket:</span> <span class="string">"/var/run/redis/redis.sock"</span></span><br><span class="line"><span class="string">log_level:</span> INFO</span><br><span class="line"><span class="string">audit_usernames:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
<h3 id="初始化数据库"><strong>初始化数据库</strong></h3><p>&emsp;设置<code>GitLab</code>的root用户密码并初始化数据库<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">shell</span>&gt; sudo -<span class="keyword">u</span> git -<span class="keyword">H</span> bundle exec rake gitlab:setup RAILS_ENV=production GITLAB_ROOT_PASSWORD=your_gitlab_root_passwd</span><br></pre></td></tr></table></figure></p>
<h3 id="下载GitLab脚本"><strong>下载GitLab脚本</strong></h3><p>&emsp;下载管理<code>GitLab</code>的脚本，设置<code>logrotate</code>，检查应用状态<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">shell&gt; wget -O <span class="regexp">/etc/</span>init.d<span class="regexp">/gitlab https:/</span><span class="regexp">/gitlab.com/</span>gitlab-org<span class="regexp">/gitlab-recipes/</span>raw<span class="regexp">/master/</span>init<span class="regexp">/sysvinit/</span>centos/gitlab-unicorn --no-check-certificate</span><br><span class="line">shell&gt; chmod a+x <span class="regexp">/etc/</span>init.d/gitlab</span><br><span class="line">shell&gt; cp lib<span class="regexp">/support/</span>logrotate<span class="regexp">/gitlab /</span>etc<span class="regexp">/logrotate.d/</span>gitlab</span><br><span class="line">shell&gt; sudo -u git -H bundle exec rake <span class="string">gitlab:</span><span class="string">env:</span>info RAILS_ENV=production</span><br><span class="line">			System information</span><br><span class="line"><span class="label">			System:</span>         CentOS <span class="number">6.4</span></span><br><span class="line">			Current <span class="string">User:</span>   git</span><br><span class="line">			Using <span class="string">RVM:</span>      no</span><br><span class="line">			Ruby <span class="string">Version:</span>   <span class="number">2.1</span><span class="number">.2</span>p95</span><br><span class="line">			Gem <span class="string">Version:</span>    <span class="number">2.2</span><span class="number">.2</span></span><br><span class="line">			Bundler <span class="string">Version:</span><span class="number">1.10</span><span class="number">.6</span></span><br><span class="line">			Rake <span class="string">Version:</span>   <span class="number">10.3</span><span class="number">.2</span></span><br><span class="line">			Sidekiq <span class="string">Version:</span><span class="number">2.17</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">			GitLab information</span><br><span class="line"><span class="label">			Version:</span>        <span class="number">7.4</span><span class="number">.5</span></span><br><span class="line"><span class="label">			Revision:</span>       <span class="number">19</span>d572e</span><br><span class="line"><span class="label">			Directory:</span>      <span class="regexp">/home/</span>git/gitlab</span><br><span class="line">			DB <span class="string">Adapter:</span>     mysql2</span><br><span class="line"><span class="label">			URL:</span>            <span class="string">http:</span><span class="comment">//yourdomain</span></span><br><span class="line">			HTTP Clone <span class="string">URL:</span> <span class="string">http:</span><span class="comment">//yourdomain/some-project.git</span></span><br><span class="line">			SSH Clone <span class="string">URL:</span>  git<span class="annotation">@yourdomain</span>:some-project.git</span><br><span class="line">			Using <span class="string">LDAP:</span>     no</span><br><span class="line">			Using <span class="string">Omniauth:</span> no</span><br><span class="line"></span><br><span class="line">			GitLab Shell</span><br><span class="line"><span class="label">			Version:</span>        <span class="number">2.0</span><span class="number">.1</span></span><br><span class="line"><span class="label">			Repositories:</span>   <span class="regexp">/home/</span>git<span class="regexp">/repositories/</span></span><br><span class="line"><span class="label">			Hooks:</span>          <span class="regexp">/home/</span>git<span class="regexp">/gitlab-shell/</span>hooks/</span><br><span class="line"><span class="label">			Git:</span>            <span class="regexp">/usr/</span>bin/git</span><br><span class="line">shell&gt; sudo -u git -H bundle exec rake <span class="string">assets:</span>precompile RAILS_ENV=production</span><br><span class="line">shell&gt; <span class="regexp">/etc/</span>init.d/gitlab start</span><br></pre></td></tr></table></figure></p>
<h3 id="配置Nginx"><strong>配置Nginx</strong></h3><p>&emsp;要通过web访问需要配置web服务器，这里选择Nginx。<br>&emsp;配置主要是修改<strong><code>server_name</code></strong>，自定义日志路径等。可适当调大<strong><code>client_max_body_size</code></strong>的值(防止推送时数据过大而出错)<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#使用SSL</span><br><span class="line"><span class="keyword">shell</span>&gt; wget -O /usr/local/nginx/<span class="keyword">conf</span>/vhosts/gitlab.<span class="keyword">conf</span> http<span class="variable">s:</span>//gitlab.<span class="keyword">com</span>/gitlab-org/gitlab-<span class="keyword">ce</span>/raw/master/lib/support/nginx/gitlab-ssl --<span class="keyword">no</span>-check-certificate</span><br><span class="line"></span><br><span class="line">#不使用SSL</span><br><span class="line"><span class="keyword">shell</span>&gt; wget -O /usr/local/nginx/<span class="keyword">conf</span>/vhosts/gitlab.<span class="keyword">conf</span> http<span class="variable">s:</span>//gitlab.<span class="keyword">com</span>/gitlab-org/gitlab-<span class="keyword">ce</span>/raw/master/lib/support/nginx/gitlab --<span class="keyword">no</span>-check-certificate</span><br><span class="line"></span><br><span class="line">#生成证书，将gitlab.crt和gitlab.key放到Nginx配置文件gitlab.<span class="keyword">conf</span>中ssl指定的目录下</span><br><span class="line"><span class="keyword">shell</span>&gt; openssl req -<span class="keyword">new</span> -x509 -nodes -days <span class="number">3560</span> -out gitlab.crt -keyout gitlab.key</span><br><span class="line"></span><br><span class="line"><span class="keyword">shell</span>&gt; usermod -<span class="keyword">a</span> -G git nginx &amp;&amp; chmod <span class="keyword">g</span>+rx /home/git/</span><br></pre></td></tr></table></figure></p>
<h3 id="关于git_clone"><strong>关于git clone</strong></h3><p>&emsp;一般从远程库克隆仓库到本地使用<code>git clone</code>命令，克隆有两种方式<strong>SSH</strong>(<code>git clone git@gitlab_server:username/repo_name.git</code>)和<strong>HTTPS</strong>(<code>git clone https://gitlab_server/username/repo_name.git</code>)。假若添加了<strong>SSH KEY</strong>就使用<strong>SSH</strong>即可，但为了使用<strong>HTTPS</strong>方式克隆，折腾了很久！又是安装<strong>gitlab-git-http-server</strong>又是安装<strong>GO</strong>，网上搜索折腾了很久都无果，最后灵机一动搞定了！</p>
<p>&emsp;假若<strong>HTTPS</strong>方式克隆报错<strong><code>Peer certificate cannot be authenticated with known CA certificates</code></strong>，则在需要克隆的机器上的<strong><code>~/.bash_profile</code></strong>添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GIT_SSL_NO_VERIFY=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#添加后重新加载</span></span><br><span class="line">shell&gt; <span class="built_in">source</span> ~/.bash_profile</span><br></pre></td></tr></table></figure></p>
<p>&emsp;CentOS上使用<code>yum</code>安装的<code>git</code>版本为<strong><code>1.7.1</code></strong>，在使用<strong><code>git clone</code></strong>克隆GitLab仓库时若出现如下报错则需要手动编译<strong>2.0</strong>版本以上的<strong>git</strong>(编译安装详见上文)<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">error:</span>  <span class="keyword">while</span> accessing <span class="string">https:</span><span class="comment">//gitlab_server/username/repo_name.git/info/refs</span></span><br><span class="line"><span class="string">fatal:</span> HTTP request failed</span><br></pre></td></tr></table></figure></p>
<p>&emsp;GitLab默认的Nginx配置文件中定义了规则，将<strong>HTTPS</strong>方式克隆的请求转到<code>gitlab-git-http-server.socket</code>，问题是GitLab默认并没有启用<strong>gitlab-git-http-server</strong>。若要安装<code>gitlab-git-http-server</code>则需先安装<code>Go</code>，当安装好<code>gitlab-git-http-server</code>后发现仍然无法使用。最后抱着试试看的心态将<code>upstream</code>转到<code>gitlab.socket</code>而非<code>gitlab-git-http-server.socket</code>，然后<strong>HTTPS</strong>方式的克隆就搞定了！<br><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">upstream gitlab-git-http-server </span><span class="expression">&#123;</span><br><span class="line">  #默认配置</span><br><span class="line">  <span class="begin-block">#server unix</span>:<span class="end-block">/home</span><span class="end-block">/git</span><span class="end-block">/gitlab</span><span class="end-block">/tmp</span><span class="end-block">/sockets</span><span class="end-block">/gitlab-git-http-server.socket fail</span>_<span class="variable">timeout</span>=0;</span><br><span class="line"></span><br><span class="line">  #修改后</span><br><span class="line">  <span class="variable">server</span> <span class="variable">unix</span>:<span class="end-block">/home</span><span class="end-block">/git</span><span class="end-block">/gitlab</span><span class="end-block">/tmp</span><span class="end-block">/sockets</span><span class="end-block">/gitlab.socket fail</span>_<span class="variable">timeout</span>=0;</span><br><span class="line">&#125;</span><span class="xml"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location ~ [-\/\w\.]+\.git\/ </span><span class="expression">&#123;</span><br><span class="line">	#其余详细配置省略</span><br><span class="line">	<span class="variable">proxy</span>_<span class="variable">pass</span> <span class="variable">http</span>:/<span class="end-block">/gitlab-git-http-server</span>;</span><br><span class="line">&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;最近在系统的学习<strong>Git</strong>，需要用到远程仓库，于是想搭个<strong>GitLab</strong>玩玩。没想到想玩好GitLab也不是件容易的事情，即便是按照教程来搭都折腾了挺久，GitLab对各软件版本的要求比较苛刻，所以搭建]]>
    </summary>
    
      <category term="GitLab" scheme="http://yoursite.com/tags/GitLab/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LVS笔记]]></title>
    <link href="http://yoursite.com/2015/09/30/LVS/"/>
    <id>http://yoursite.com/2015/09/30/LVS/</id>
    <published>2015-09-30T07:56:41.000Z</published>
    <updated>2016-03-06T13:04:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装"><strong>安装</strong></h2><ul>
<li><p>安装依赖</p>
  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; yum <span class="keyword">install</span> Kernel-devel gcc openssl openssl-devel popt</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看系统是否支持ipvs</p>
  <figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$&gt; modprobe -l|<span class="keyword">grep</span> ipvs</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_rr.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_wrr.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_lc.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_wlc.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_lblc.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_lblcr.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_dh.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_sh.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_sed.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_nq.ko</span><br><span class="line">kernel<span class="regexp">/net/</span>netfilter<span class="regexp">/ipvs/i</span>p_vs_ftp.ko</span><br></pre></td></tr></table></figure>
</li>
<li><p>YUM安装</p>
  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> ipvsadm</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查安装</p>
  <figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> ipvsadm</span><br><span class="line"><span class="constant">IP</span> <span class="constant">Virtual</span> <span class="constant">Server</span> version <span class="number">1.2</span>.<span class="number">1</span> (size=<span class="number">4096</span>)</span><br><span class="line"><span class="constant">Prot</span> <span class="constant">LocalAddress</span><span class="symbol">:Port</span> <span class="constant">Scheduler</span> <span class="constant">Flags</span></span><br><span class="line">  -&gt; <span class="constant">RemoteAddress</span><span class="symbol">:Port</span>           <span class="constant">Forward</span> <span class="constant">Weight</span> <span class="constant">ActiveConn</span> <span class="constant">InActConn</span>)</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong><code>ipvsadm</code></strong>命令详解</p>
  <figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm -A|E -t|u|f virutal-service-address:port [-s scheduler] [-p</span><br><span class="line">[timeout]] [-M netmask]</span><br><span class="line">ipvsadm -D -t|u|f virtual-service-address</span><br><span class="line">ipvsadm -C</span><br><span class="line">ipvsadm -R</span><br><span class="line">ipvsadm -S [-n]</span><br><span class="line">ipvsadm -a|e -t|u|f service-address:port -r real-server-address:port</span><br><span class="line">[-g|i|m] [-w weight]</span><br><span class="line">ipvsadm -d -t|u|f service-address -r server-address</span><br><span class="line">ipvsadm -L|l [options]</span><br><span class="line">ipvsadm -Z [-t|u|f service-address]</span><br><span class="line">ipvsadm --set tcp tcpfin udp</span><br><span class="line">ipvsadm --start-daemon state [--mcast-interface interface]</span><br><span class="line">ipvsadm --stop-daemon</span><br><span class="line">ipvsadm -h</span><br><span class="line">命令选项解释：有两种命令选项格式，长的和短的，具有相同的意思。在实际使用时，两种都可以。</span><br><span class="line">-<span class="ruby"><span class="constant">A</span> --add-service 在内核的虚拟服务器表中添加一条新的虚拟服务器记录。也就是增加一台新的虚拟服务器。</span><br><span class="line"></span>-<span class="ruby"><span class="constant">E</span> --edit-service 编辑内核虚拟服务器表中的一条虚拟服务器记录。</span><br><span class="line"></span>-<span class="ruby"><span class="constant">D</span> --delete-service 删除内核虚拟服务器表中的一条虚拟服务器记录。</span><br><span class="line"></span>-<span class="ruby"><span class="constant">C</span> --clear 清除内核虚拟服务器表中的所有记录。</span><br><span class="line"></span>-<span class="ruby"><span class="constant">R</span> --restore 恢复虚拟服务器规则</span><br><span class="line"></span>-<span class="ruby"><span class="constant">S</span> --save 保存虚拟服务器规则，输出为-<span class="constant">R</span> 选项可读的格式</span><br><span class="line"></span>-<span class="ruby">a --add-server 在内核虚拟服务器表的一条记录里添加一条新的真实服务器记录。也就是在一个虚拟服务器中增加一台新的真实服务器</span><br><span class="line"></span>-<span class="ruby">e --edit-server 编辑一条虚拟服务器记录中的某条真实服务器记录</span><br><span class="line"></span>-<span class="ruby">d --delete-server 删除一条虚拟服务器记录中的某条真实服务器记录</span><br><span class="line"></span>-<span class="ruby"><span class="constant">L</span>|-l --list 显示内核虚拟服务器表</span><br><span class="line"></span>-<span class="ruby"><span class="constant">Z</span> --zero 虚拟服务表计数器清零（清空当前的连接数量等）</span><br><span class="line"></span>-<span class="ruby">-set tcp tcpfin udp 设置连接超时值</span><br><span class="line"></span>-<span class="ruby">-start-daemon 启动同步守护进程。他后面可以是master 或backup，用来说明<span class="constant">LVS</span> <span class="constant">Router</span> 是master 或是backup。在这个功能上也可以采用keepalived的<span class="constant">VRRP</span> 功能。</span><br><span class="line"></span>-<span class="ruby">-stop-daemon 停止同步守护进程</span><br><span class="line"></span>-<span class="ruby">h --help 显示帮助信息</span><br><span class="line"></span>其他的选项:</span><br><span class="line">-<span class="ruby">t --tcp-service service-address 说明虚拟服务器提供的是tcp 的服务</span><br><span class="line"></span>[vip:port] or [real-server-ip:port]</span><br><span class="line">-<span class="ruby">u --udp-service service-address 说明虚拟服务器提供的是udp 的服务</span><br><span class="line"></span>[vip:port] or [real-server-ip:port]</span><br><span class="line">-<span class="ruby">f --fwmark-service fwmark 说明是经过iptables 标记过的服务类型。</span><br><span class="line"></span>-<span class="ruby">s --scheduler scheduler 使用的调度算法，有这样几个选项rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq,默认的调度算法是： wlc.</span><br><span class="line"></span>-<span class="ruby">p --persistent [timeout] 持久稳固的服务。这个选项的意思是来自同一个客户的多次请求，将被同一台真实的服务器处理。timeout 的默认值为<span class="number">300</span> 秒。</span><br><span class="line"></span>-<span class="ruby"><span class="constant">M</span> --netmask netmask persistent granularity mask</span><br><span class="line"></span>-<span class="ruby">r --real-server server-address 真实的服务器[<span class="constant">Real</span>-<span class="constant">Server</span><span class="symbol">:port</span>]</span><br><span class="line"></span>-<span class="ruby">g --gatewaying 指定<span class="constant">LVS</span> 的工作模式为直接路由模式（也是<span class="constant">LVS</span> 默认的模式）</span><br><span class="line"></span>-<span class="ruby">i --ipip 指定<span class="constant">LVS</span> 的工作模式为隧道模式</span><br><span class="line"></span>-<span class="ruby">m --masquerading 指定<span class="constant">LVS</span> 的工作模式为<span class="constant">NAT</span> 模式</span><br><span class="line"></span>-<span class="ruby">w --weight weight 真实服务器的权值，数值越大，权重越高</span><br><span class="line"></span>-<span class="ruby">-mcast-interface interface 指定组播的同步接口</span><br><span class="line"></span>-<span class="ruby">c --connection 显示<span class="constant">LVS</span> 目前的连接 如：ipvsadm -<span class="constant">L</span> -c</span><br><span class="line"></span>-<span class="ruby">-timeout 显示tcp tcpfin udp 的timeout 值 如：ipvsadm -<span class="constant">L</span> --timeout</span><br><span class="line"></span>-<span class="ruby">-daemon 显示同步守护进程状态</span><br><span class="line"></span>-<span class="ruby">-stats 显示统计信息</span><br><span class="line"></span>-<span class="ruby">-rate 显示速率信息</span><br><span class="line"></span>-<span class="ruby">-sort 对虚拟服务器和真实服务器排序输出</span><br><span class="line"></span>-<span class="ruby">-numeric -n 输出<span class="constant">IP</span> 地址和端口的数字形式</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="LVS工作模式"><strong>LVS工作模式</strong></h3><p>&emsp;LVS有<strong><code>3</code></strong>种工作模式：<strong>LVS-NAT</strong>、<strong>LVS-DR</strong>、<strong>LVS-TUN</strong>。下面分别进行说明及配置实例。</p>
<h2 id="LVS-NAT"><strong>LVS-NAT</strong></h2><p>&emsp;<strong>LVS-NAT</strong>模式客户端将请求数据包VIP，LB将数据包中的目标地址修改成RS中的一台并转发，RS处理完后将数据报回复给LB，LB将回复数据包中的源地址修改成VIP后发送给客户端。所有进出的流量都需要进过LB并进行NAT转发。</p>
<h3 id="简要工作流程"><strong>简要工作流程</strong></h3><ol>
<li>client向VIP发送请求(SOURCE：client_ip，DEST：LB_VIP)</li>
<li>LB接收请求后根据调度算法选择RS，将连接信息记录hash表，修改<code>DEST</code>地址为RS的IP并将请求转发给该RS(SOURCE：client_ip，DEST：RS_IP)</li>
<li>RS接收请求后，查看目的地址为自身IP于是处理请求，将处理结果回复给LB(SOURCE：RS_IP，DEST：<strong>client_ip</strong>)</li>
<li>LB接收RS的回复包，将源地址修改为VIP后发送给client(SOURCE：LB_VIP，DEST：client_ip)</li>
<li>以后此连接后续的请求到达LB时，LB直接查询hash表后直接转发给RS。连接释放或超时后，LB自动将记录从hash表中删除。</li>
</ol>
<h3 id="LVS-NAT配置"><strong>LVS-NAT配置</strong></h3><ol>
<li>LVS-NAT模式只需要在LoadBalance上配置，RealServer并不需要特殊配置只需要将<strong>网关指向LoadBalance</strong>即可<code>route add default gw VIP</code>)</li>
<li><p>开启ip_forward，关闭ICMP重定向<br>&emsp;NAT模式下，必须打开Load Balancer的ip_forward，关闭ICMP重定向</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#turn OFF icmp redirects (1 on, 0 off)</span></span><br><span class="line">echo <span class="string">"0"</span> &gt;/<span class="keyword">proc</span>/sys/net/ipv4/conf/all/send_redirects</span><br><span class="line">echo <span class="string">"0"</span> &gt;/<span class="keyword">proc</span>/sys/net/ipv4/conf/default/send_redirects</span><br><span class="line">echo <span class="string">"0"</span> &gt;/<span class="keyword">proc</span>/sys/net/ipv4/conf/eth0/send_redirects</span><br></pre></td></tr></table></figure>
</li>
<li><p>只有LVS-NAT模式才支持端口转发</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#NAT模式LoadBalance上必须开启IP路由转发</span></span><br><span class="line">echo <span class="number">1</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/ip_forward</span><br><span class="line"></span><br><span class="line"><span class="comment">#-A 新增虚拟服务器(VIP)/-t tcp服务/-s 调度算法(rr|wrr|lc|wlc|lblc|lblcr|dh|sh|sed|nq)</span></span><br><span class="line">ipvsadm -A -t <span class="number">192</span>.<span class="number">168</span>.<span class="number">244</span>.<span class="number">132</span>:<span class="number">80</span> -s rr</span><br><span class="line"></span><br><span class="line"><span class="comment">#-a 添加RealServer服务器/-t tcp服务/-r RealServer服务器IP:Port/-m LVS-NAT模式</span></span><br><span class="line">ipvsadm -a -t <span class="number">192</span>.<span class="number">168</span>.<span class="number">244</span>.<span class="number">132</span>:<span class="number">80</span> -r <span class="number">192</span>.<span class="number">168</span>.<span class="number">27</span>.<span class="number">131</span>:<span class="number">8080</span> -m</span><br><span class="line">ipvsadm -a -t <span class="number">192</span>.<span class="number">168</span>.<span class="number">244</span>.<span class="number">132</span>:<span class="number">80</span> -r <span class="number">192</span>.<span class="number">168</span>.<span class="number">27</span>.<span class="number">130</span>:<span class="number">8080</span> -m</span><br></pre></td></tr></table></figure>
</li>
<li><p>若要修改调度算法则</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#修改调度算法</span></span><br><span class="line"><span class="comment">#-E --edit-service 编辑内核虚拟服务器表中的一条虚拟服务器记录。</span></span><br><span class="line"><span class="title">ipvsadm</span> -E -t <span class="number">192.168.244.132:80</span> -s wrr</span><br><span class="line"></span><br><span class="line"><span class="comment">#-e --edit-server 编辑一条虚拟服务器记录中的某条真实服务器记录</span></span><br><span class="line">ipvsadm -e -t <span class="number">192.168.244.132:80</span> -r <span class="number">192.168.27.130:8080</span> -m -w <span class="number">2</span></span><br><span class="line">ipvsadm -e -t <span class="number">192.168.244.132:80</span> -r <span class="number">192.168.27.131:8080</span> -m -w <span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="关于ICMP重定向"><strong>关于ICMP重定向</strong></h4><p>&emsp;当路由器检测到主机使用了非最优路由时，会通过向该主机发送ICMP重定向报文，请求改变主机的路由使其达到最优路由。<br>&emsp;LVS-NAT模式中ICMP重定向之所以会产生个人分析如下(或许会有误)：</p>
<ol>
<li>当<strong>简要工作流程</strong>说明中的<code>3</code>、<code>4</code>步骤，当RS处理完请求，回复处理结果给LB(SOURCE：RS_IP，DEST：<strong>client_ip</strong>)</li>
<li>当LB接收到回复包时，检查发现源和目的地址为<code>SOURCE：RS_IP，DEST：client_ip</code>，判断此回复包并不需要经过LB而只需直接给GateWay即可，于是发送ICMP重定向报文给RS。(ICMP重定向前路由路径：<code>RS——&gt;LB——&gt;GW——&gt;client</code>，LB认为此路由并非最优路由而应该是：<code>RS——&gt;GW——&gt;client</code>。)</li>
<li>当RS接收到LB发送的ICMP重定向包后，会修改路由表直接将回复包交给GW。此时回复包并没有被LB改写源和目的地址，LVS-NAT模式出现问题。</li>
</ol>
<h4 id="LVS-NAT特殊情况处理"><strong>LVS-NAT特殊情况处理</strong></h4><p>&emsp;在LVS-NAT模式中可能会遇到一种特殊情况，需要对RS额外的特殊处理，此情况是当client、LB和RS都处于同一网段。<br>&emsp;机器路由表中默认会有一条到同网段的路由规则<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&gt; route -<span class="keyword">n</span></span><br><span class="line">内核 IP 路由表</span><br><span class="line">目标            网关            子网掩码        标志  跃点   引用  使用 接口</span><br><span class="line">0.0.0.0         192.168.1.1     0.0.0.0         UG    0      0        0 wlan0</span><br><span class="line">192.168.1.0     0.0.0.0         255.255.255.0   <span class="keyword">U</span>     9      0        0 wlan0</span><br></pre></td></tr></table></figure></p>
<p>&emsp;当RS和client处于同一网段时，原本是需要回复给LB的回复包(SOURCE：RS_IP，DEST：<strong>client_ip</strong>)，由于RS查自身路由表发现有到同网段的路由规则，不会将回复包传给LB而是直接将包回复给client，从而造成LVS-NAT模式出现问题。<br>&emsp;因此针对client、LB和RS处于同一网段的特殊情况，RS需要将到同网段的路由规则删除，让RS的所有流量都通过LB<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#根据自身实际情况修改</span><br><span class="line">$&gt; route <span class="winutils">del</span> -<span class="winutils">net</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">0</span> netmask <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span> dev wlan0</span><br></pre></td></tr></table></figure></p>
<h2 id="LVS-DR"><strong>LVS-DR</strong></h2><p>&emsp;LVS-DR模式应该是最为常用的模式。LVS-DR模式并未涉及IP地址的变换，主要是MAC地址的变换，因此对ARP协议会涉及较多。</p>
<h3 id="简要工作流程-1"><strong>简要工作流程</strong></h3><ol>
<li>client向VIP发送请求</li>
<li>LB接收请求后根据调度算法选择RS，将连接信息记录hash表，修改<code>DEST_MAC</code>目的MAC地址为RS的MAC地址，然后将请求转发给RS。</li>
<li>RS处理请求得出结果后(RS的lo:0接口绑定VIP)，<strong>直接</strong>将请求结果回复给client</li>
<li>以后此连接后续的请求到达LB时，LB直接查询hash表后修改<code>DEST_MAC</code>后直接转发给RS。连接释放或超时后，LB自动将记录从hash表中删除。</li>
</ol>
<h3 id="LVS-DR模式注意事项"><strong>LVS-DR模式注意事项</strong></h3><ol>
<li>LB和RS<strong>必须在同一广播域内</strong>, LB修改目的MAC地址后转发给RS</li>
<li>LVS-DR的LB不需要开启路由转发ip_forward</li>
<li>LVS-DR模式中，RS必须绑定VIP(LB只修改目的MAC后转发给RS，包的目标IP还是VIP，若RS接收到包后查看目标IP不为自己会丢弃，故RS上需要绑定VIP)(<strong><code>/sbin/ifconfig lo:0 inet VIP netmask 255.255.255.255</code></strong>)</li>
<li>RS的VIP掩码为255.255.255.255，广播地址为本身，防止RS发出ARP广播使得LB实际的VIP与RS的VIP发生冲突</li>
<li>关闭RS的ARP查询(内核2.6.x)</li>
</ol>
<h3 id="LVS-DR模式配置"><strong>LVS-DR模式配置</strong></h3><ul>
<li><strong>环境说明</strong><br>LB：VIP_eth0:0_10.0.2.222        eth0_10.0.2.56<br>RS1: VIP_lo:0_10.0.2.222        eth0_10.0.2.51<br>RS2: VIP_lo:0_10.0.2.222        eth0_10.0.2.29</li>
</ul>
<ul>
<li><p><strong>LB配置</strong></p>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置</span></span><br><span class="line">VIP=<span class="number">10.0</span><span class="number">.2</span><span class="number">.222</span></span><br><span class="line">/sbin/ifconfig eth0:<span class="number">0</span> <span class="variable">$VIP</span> broadcast <span class="variable">$VIP</span> netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> up</span><br><span class="line"><span class="comment">#/sbin/route add -host 10.0.2.222 dev eth0:0</span></span><br><span class="line">echo <span class="string">"0"</span> &gt;/<span class="keyword">proc</span>/sys/net/ipv4/ip_forward</span><br><span class="line">/sbin/ipvsadm -A -t $VIP:80 -s<span class="symbol"> wrr</span> </span><br><span class="line">/sbin/ipvsadm -a -t $VIP:80 -r 10.0.2.51:80 -g -w 3</span><br><span class="line">/sbin/ipvsadm -a -t $VIP:80 -r 10.0.2.29:80 -g -w 1</span><br><span class="line"></span><br><span class="line">#查看</span><br><span class="line">$&gt;<span class="symbol"> ipvsadm</span> -ln<span class="symbol"></span><br><span class="line">IP</span> Virtual<span class="symbol"> Server</span> version 1.2.1 (size=4096)<span class="symbol"></span><br><span class="line">Prot</span> LocalAddress:Port<span class="symbol"> Scheduler</span> Flags</span><br><span class="line">  -&gt;<span class="symbol"> RemoteAddress:Port</span> <span class="symbol">          Forward</span> Weight<span class="symbol"> ActiveConn</span> InActConn<span class="symbol"></span><br><span class="line">TCP</span>  10.0.2.222:80<span class="symbol"> wrr</span></span><br><span class="line">  -&gt; 10.0.2.29:80<span class="symbol">                 Route</span>   1      0          0         </span><br><span class="line">  -&gt; 10.0.2.51:80<span class="symbol">                 Route</span>   3      0          0</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RS配置</strong><br>&emsp;RS的VIP掩码必须为<code>255.255.255.255</code></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VIP</span>=<span class="number">10</span>.<span class="number">0</span>.<span class="number">2</span>.<span class="number">222</span></span><br><span class="line">echo <span class="string">"1"</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/conf/all/arp_ignore    </span><br><span class="line">echo <span class="string">"2"</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/conf/all/arp_announce    </span><br><span class="line">echo <span class="string">"1"</span>&gt;/<span class="keyword">proc</span>/sys/net/ipv4/conf/eth0/arp_ignore    </span><br><span class="line">echo <span class="string">"2"</span>&gt;/<span class="keyword">proc</span>/sys/net/ipv4/conf/eth0/arp_announce    </span><br><span class="line">ifconfig lo:<span class="number">0</span> $<span class="type">VIP</span> netmask <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span> broadcast $<span class="type">VIP</span></span><br><span class="line"><span class="comment">#/sbin/route add -host 10.0.2.222 dev lo:0</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="配置说明"><strong>配置说明</strong></h4><ul>
<li><p><strong>arp_ignore</strong>——定义接收到ARP请求时的响应级别<br>  <strong><code>0</code></strong>：默认，只用本地配置的有响应地址都给予响应<br>  <strong><code>1</code></strong>：仅仅在目标IP是本地地址，并且是配置在请求进来的接口上的时候才给予响应(仅在请求的目标地址配置请求到达的接口上的时候，才给予响应)<br>  <strong>arp_ignore=1</strong><br>  &emsp;reply only if the target IP address is local address configured on the incoming interface<br>  &emsp;只回复目标IP是配置在本地入口设备的arp请求;即当RS的网卡(假定为eth0)接收到arp请求，如果需要查询的IP没有绑定在eth0接口上(RS的VIP绑定在lo:0)则不响应这个arp请求</p>
</li>
<li><p><strong>arp_announce</strong>——定义将自己的地址向外通告时的级别<br>  <strong><code>0</code></strong>：默认，表示使用配置在任何接口的任何地址向外通告<br>  <strong><code>1</code></strong>：试图仅向目标网络通告与其网络匹配的地址<br>  <strong><code>2</code></strong>：仅向与本地接口上地址匹配的网络进行通告<br>  <strong>arp_announce=2</strong><br>  &emsp;Always use the best local address for this target.In this mode we ignore the source address in the IP packet and try to select local address that we prefer for talks with the target host. Such local address is selected by looking for primary IP addresses on all our subnets on the outgoing interface that include the target IP address. If no suitable local address is found we select the first local address we have on the outgoing interface or on all other interfaces, with the hope we will receive reply for our request and even sometimes no matter the source IP address we announce<br>  &emsp;对查询目标使用最适当的本地地址.在此模式下将忽略IP数据包的源地址并尝试选择能和该地址通信的本地地址.首要是选择所有的网络接口的子网中外出访问子网中包含该目标IP地址的本地地址. 如果没有合适的地址被发现,将选择当前的发送网络接口或其他的有可能接收到该ARP回应的网络接口来进行发送;<br>  &emsp;个人理解：当RS需要向外通信就要获得网关的MAC，此时会发送广播一个arp请求，默认是将自身的IP作为SourceIP封装在arp请求包里，所以当<code>lo:0</code>接口发送这个arp请求包时<strong>SourceIP是VIP</strong>，arp请求包里的内容是SIP=VIP/SMAC=eth0_ mac；DIP=gateway_ip/DMAC=255.255.255.255，这样当网关收到这个arp请求时就会更新自身的arp表”VIP RealServer_eth0_mac”，若所有RealServer都发送这样的arp请求则会造成网关的arp表混乱。简而言之，将arp_announce设置成2是为了不让SourceIP为VIP产生arp通告而只有eth0上的IP可进行arp通告。</p>
</li>
</ul>
<h2 id="LVS-TUN"><strong>LVS-TUN</strong></h2><p>&emsp;当LB和RS不在同一个网络时，则需使用到LVS-TUN模式实现负载均衡。</p>
<h3 id="简要工作流程-2"><strong>简要工作流程</strong></h3><ol>
<li>client向VIP发送请求</li>
<li>LB接收请求后根据调度算法选择RS，将连接信息记录hash表，然后将此请求包重新封装到新的数据包中(新IP包中的目的IP为RS的IP)，将新IP包转发给RS</li>
<li>RS接收到新IP包后，首先将新IP包解封装，处理client请求(RS的tunl0接口绑定VIP)，得到处理结果后<strong>直接</strong>回复给client</li>
<li>以后此连接后续的请求到达LB时，LB直接查询hash表后封装成新IP包直接转发给RS。连接释放或超时后，LB自动将记录从hash表中删除</li>
</ol>
<h3 id="LVS-TUN配置"><strong>LVS-TUN配置</strong></h3><ul>
<li><p><strong>LB配置</strong></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VIP</span>=<span class="number">10</span>.<span class="number">0</span>.<span class="number">2</span>.<span class="number">222</span></span><br><span class="line">/sbin/ifconfig eth0:<span class="number">0</span> $<span class="type">VIP</span> broadcast $<span class="type">VIP</span> netmask <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">0</span> up</span><br><span class="line">/sbin/ipvsadm -A -t $<span class="type">VIP</span>:<span class="number">80</span> -s wrr</span><br><span class="line">/sbin/ipvsadm -a -t $<span class="type">VIP</span>:<span class="number">80</span> -r <span class="number">10</span>.<span class="number">0</span>.<span class="number">2</span>.<span class="number">51</span>:<span class="number">80</span> -i -w <span class="number">1</span></span><br><span class="line">/sbin/ipvsadm -a -t $<span class="type">VIP</span>:<span class="number">80</span> -r <span class="number">10</span>.<span class="number">0</span>.<span class="number">2</span>.<span class="number">29</span>:<span class="number">80</span> -i -w <span class="number">1</span></span><br><span class="line">echo <span class="string">"0"</span> &gt;/<span class="keyword">proc</span>/sys/net/ipv4/ip_forward</span><br><span class="line">echo <span class="string">"1"</span> &gt;/<span class="keyword">proc</span>/sys/net/ipv4/conf/all/send_redirects</span><br><span class="line">echo <span class="string">"1"</span> &gt;/<span class="keyword">proc</span>/sys/net/ipv4/conf/default/send_redirects</span><br><span class="line">echo <span class="string">"1"</span> &gt;/<span class="keyword">proc</span>/sys/net/ipv4/conf/eth0/send_redirects</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>RS配置</strong></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">VIP</span>=<span class="number">10</span>.<span class="number">0</span>.<span class="number">2</span>.<span class="number">222</span></span><br><span class="line">ifconfig tunl0 $<span class="type">VIP</span> netmask <span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span>.<span class="number">255</span> broadcast $<span class="type">VIP</span></span><br><span class="line">echo <span class="number">1</span> &gt;/<span class="keyword">proc</span>/sys/net/ipv4/conf/eth0/arp_ignore</span><br><span class="line">echo <span class="number">2</span> &gt;/<span class="keyword">proc</span>/sys/net/ipv4/conf/eth0/arp_announce</span><br><span class="line">echo <span class="number">1</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line">echo <span class="number">2</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line">echo <span class="number">0</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/conf/tunl0/rp_filter</span><br><span class="line">echo <span class="number">0</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/conf/all/rp_filter</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="关于rp_filter"><strong>关于rp_filter</strong></h4><p>&emsp;rp_filter—-逆向路径过滤，借助接口的路由信息及源地址判断数据包是否合理。<br>&emsp;简要检查流程—-若接口eth0接受到一个数据包(SIP=10.0.2.114, DIP=10.0.12.222, DEV=eth0)，当响应包需要出去时候rp_filter查询路由表，<sip=10.0.12.222, dip="10.0.1.114">此包的输出接口是否为eth0，若不是则rp_filter失败，丢弃该响应包。<br>&emsp;tunl0是必须关闭rp_filter的，否则LVS-TUN模式能向VIP发出请求但无法收到RealServer的响应</sip=10.0.12.222,></p>
<p><strong>个人分析过程：</strong></p>
<ul>
<li>CIP-客户端IP</li>
<li>VIP-LVS的虚拟IP</li>
<li>LBIP-LB的内部地址</li>
<li>SIP-源地址</li>
<li>DIP-目标地址</li>
<li>RIP-RealServer的IP</li>
</ul>
<ol>
<li>客户端CIP访问LVS的VIP    LB上的数据包    <strong><code>[SIP=CIP, DIP=VIP]</code></strong></li>
<li>LVS-TUN根据算法将请求转给RealServer的DIP        RealServer上的数据包(此数据包是ipip封装包)    <strong><code>[SIP=LBIP, DIP=RIP [SIP=CIP, DIP=VIP]]</code></strong></li>
<li>RealServer接收到ipip数据包，解封后交给tunl0    tunl0接收的数据包    <strong><code>[SIP=CIP, DIP=VIP, DEV=tunl0]</code></strong></li>
<li>RealServer应用层处理后得出响应包, 响应包<strong><code>[SIP=VIP, DIP=CIP]</code></strong></li>
<li>rp_filter对响应包进行逆向路由过滤，在路由表查找<strong><code>[SIP=VIP, DIP=CIP]</code></strong>的路由条目，发现无匹配则选择默认路由从eth0出，得出<strong><code>[SIP=VIP, DIP=CIP, DEV=eth0]</code></strong>，发现DEV和进来的不同(3中tunl0的数据包)，于是丢弃该响应包</li>
</ol>
<h4 id="LVS-TUN问题集"><strong>LVS-TUN问题集</strong></h4><ul>
<li>若配置完后访问不成功，检查是否加载ipip模块<code>lsmod|grep tun</code>，加载ipip模块<code>modprobe ipip &amp;&amp; modprobe ip_gre</code></li>
<li>RealServer上可以利用iptables做端口转发<code>iptables -t nat -A PREROUTING -d $VIP -p tcp -m tcp --dport 80 -j DNAT --to-destination $VIP:8080</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装"><strong>安装</strong></h2><ul>
<li><p>安装依赖</p>
  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="l]]>
    </summary>
    
      <category term="LVS" scheme="http://yoursite.com/tags/LVS/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HAProxy]]></title>
    <link href="http://yoursite.com/2015/09/28/haproxy/"/>
    <id>http://yoursite.com/2015/09/28/haproxy/</id>
    <published>2015-09-28T02:38:07.000Z</published>
    <updated>2015-09-28T02:49:50.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;HAProxy能用做负载均衡服务器，也可以用于做四层(TCP)、七层(HTTP)代理</p>
<h2 id="HAProxy安装"><strong>HAProxy安装</strong></h2><p>&emsp;从<a href="http://www.haproxy.org/#down" target="_blank" rel="external">这里</a>下载HAProxy的源码包，此处用的是：</p>
<ul>
<li>CentOS6.4 64bit</li>
<li>haproxy-1.5.14</li>
</ul>
<p>&emsp;确认内核版本<code>uname -r</code>(此机器内核信息：<code>2.6.32-358.el6.x86_64</code>)，编译参数<strong><code>TARGET</code></strong>可用值<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> linux22     <span class="keyword">for</span> <span class="constant">Linux</span> <span class="number">2.2</span></span><br><span class="line"></span>-<span class="ruby"> linux24     <span class="keyword">for</span> <span class="constant">Linux</span> <span class="number">2.4</span> <span class="keyword">and</span> above (default)</span><br><span class="line"></span>-<span class="ruby"> linux24e    <span class="keyword">for</span> <span class="constant">Linux</span> <span class="number">2.4</span> with support <span class="keyword">for</span> a working epoll (&gt; <span class="number">0</span>.<span class="number">21</span>)</span><br><span class="line"></span>-<span class="ruby"> linux26     <span class="keyword">for</span> <span class="constant">Linux</span> <span class="number">2.6</span> <span class="keyword">and</span> above</span><br><span class="line"></span>-<span class="ruby"> linux2628   <span class="keyword">for</span> <span class="constant">Linux</span> <span class="number">2.6</span>.<span class="number">28</span>, <span class="number">3</span>.x, <span class="keyword">and</span> above (enables splice <span class="keyword">and</span> tproxy)</span><br><span class="line"></span>-<span class="ruby"> solaris     <span class="keyword">for</span> <span class="constant">Solaris</span> <span class="number">8</span> <span class="keyword">or</span> <span class="number">10</span> (others untested)</span><br><span class="line"></span>-<span class="ruby"> freebsd     <span class="keyword">for</span> <span class="constant">FreeBSD</span> <span class="number">5</span> to <span class="number">10</span> (others untested)</span><br><span class="line"></span>-<span class="ruby"> osx         <span class="keyword">for</span> <span class="constant">Mac</span> <span class="constant">OS</span>/<span class="constant">X</span></span><br><span class="line"></span>-<span class="ruby"> openbsd     <span class="keyword">for</span> <span class="constant">OpenBSD</span> <span class="number">3.1</span> to <span class="number">5.2</span> (others untested)</span><br><span class="line"></span>-<span class="ruby"> aix51       <span class="keyword">for</span> <span class="constant">AIX</span> <span class="number">5.1</span></span><br><span class="line"></span>-<span class="ruby"> aix52       <span class="keyword">for</span> <span class="constant">AIX</span> <span class="number">5.2</span></span><br><span class="line"></span>-<span class="ruby"> cygwin      <span class="keyword">for</span> <span class="constant">Cygwin</span></span><br><span class="line"></span>-<span class="ruby"> generic     <span class="keyword">for</span> any other <span class="constant">OS</span> <span class="keyword">or</span> version.</span><br><span class="line"></span>-<span class="ruby"> custom      to manually adjust every setting</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;确定<code>TARGET</code>参数后编译安装HAProxy<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf haproxy-1.5.14.tar.gz</span><br><span class="line"><span class="keyword">cd</span> haproxy-1.5.14</span><br><span class="line">make TARGET=linux26 PREFIX=/usr/<span class="keyword">local</span>/haproxy</span><br><span class="line">make install PREFIX=/usr/<span class="keyword">local</span>/haproxy</span><br><span class="line"><span class="keyword">mkdir</span> -p /usr/<span class="keyword">local</span>/haproxy/&#123;etc,<span class="keyword">log</span>&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;如果不需要编译安装，可以使用<code>yum</code>进行安装(haproxy版本会比较旧)<br>&emsp;&emsp;<strong><code>yum -y install haproxy</code></strong></p>
<h2 id="日志配置"><strong>日志配置</strong></h2><p>&emsp;HAProxy默认无日志输出功能，需要相关日志配置。在CentOS6.4中通过配置<code>rsyslog</code>实现记录日志功能</p>
<ol>
<li><p>创建<strong><code>/etc/rsyslog.d/haproxy.conf</code></strong>配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ModLoad</span> imudp</span><br><span class="line"><span class="variable">$UDPServerRun</span> <span class="number">514</span></span><br><span class="line"><span class="built_in">local</span>3.* /usr/<span class="built_in">local</span>/haproxy/<span class="built_in">log</span>/haproxy.log</span><br><span class="line">&amp; ~</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>$ModLoad imudp</strong>：imudp是模块名，支持UDP协议</li>
<li><strong>$UDPServerRun 514</strong>：允许514端口接收使用UDP和TCP协议转发过来的日志，rsyslog默认在514端口监听UDP</li>
<li><strong>local3</strong>：此为facility参数，描述提交的日志信息的应用程序或进程。如邮件、内核和FTP等，local0~7为用户自定义。详细请查看<a href="https://en.wikipedia.org/wiki/Syslog#Facility" target="_blank" rel="external">这里</a></li>
<li><code>&amp; ~</code>：停止对日志消息的进一步处理，并且不要在本地写入。如果没有此重定向规则，日志消息会被重复写入到本地<code>/var/log/message</code>文件</li>
</ul>
</li>
<li><p>修改rsyslog配置文件<strong><code>/etc/sysconfig/rsyslog</code></strong></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">SYSLOGD_OPTIONS=<span class="value"><span class="string">"-c 2 -r -m 0"</span></span></span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>-c</code></strong>：指定模式，SYSLOGD_OPTIONS选项在rsyslog v3版本被弃用，需要使用切换到模式2</li>
<li><strong><code>-r</code></strong>：接受远程日志</li>
<li><strong><code>-m</code></strong>：标记时间戳，0表示禁用</li>
</ul>
</li>
</ol>
<h2 id="HAProxy配置"><strong>HAProxy配置</strong></h2><p>&emsp;HAProxy配置文件<strong><code>/usr/local/haproxy/etc/haproxy.cfg</code></strong>(若是<code>yum</code>安装则是<strong><code>/etc/haproxy/haproxy.cfg</code></strong>)<br>&emsp;HAProxy的配置文件主要由以下几个部分组成，官方1.5版本详细配置说明请查看<a href="http://www.haproxy.org/download/1.5/doc/configuration.txt" target="_blank" rel="external">这里</a></p>
<ul>
<li><strong>global</strong>：全局配置，配置涉及进程管理及安全相关内容。</li>
<li><strong>defaults</strong>：默认参数配置，配置后的参数可用于<code>listen</code>、<code>frontend</code>、<code>backend</code></li>
<li><strong>frontend</strong>：定义前端接受请求的监听节点</li>
<li><strong>backend</strong>：定义后端服务器节点，类似于Nginx的<code>upstream</code></li>
<li><strong>listen</strong>：关联<code>frontend</code>和<code>backend</code>组成一个完整的代理节点</li>
</ul>
<p>&emsp;接下来逐个分析每个部分的详细配置</p>
<h3 id="global"><strong>global</strong></h3><p>&emsp;如上所述，<strong>global</strong>为全局配置参数，主要是进程管理及安全的参数。可设置的参数非常多，详细查看官方配置说明文档，这里仅说明较常用的几个参数</p>
<ul>
<li><strong>chroot</strong>：修改HAProxy的工作目录并在放弃权限之前执行 chroot()操作</li>
<li><strong>daemon</strong>：以守护进程方式启动</li>
<li><strong>log</strong>：定义日志。log ip facility [level]，Example：log 127.0.0.1 local3 info</li>
<li><strong>nbproc</strong>：设置HAProxy启动进程数，默认一个进程。nbproc 1</li>
<li><strong>uid</strong>：指定以UID用户运行HAProxy</li>
<li><strong>maxconn</strong>：设置每个HAProxy进程能接受的最大并发数</li>
<li><strong>debug</strong>：开启debug，生产环节禁用</li>
<li><strong>quiet</strong>：启动HAProxy时不显示任何信息</li>
</ul>
<p>&emsp;常见<strong>global</strong>配置实例：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    log <span class="number">127.0</span>.<span class="number">0.1</span> local3</span><br><span class="line">    maxconn <span class="number">4096</span></span><br><span class="line">    chroot /usr/local/haproxy</span><br><span class="line">    pidfile /usr/local/haproxy/haproxy<span class="class">.pid</span></span><br><span class="line">    uid <span class="number">99</span></span><br><span class="line">    gid <span class="number">99</span></span><br><span class="line">    daemon</span><br><span class="line">    <span class="id">#quiet</span></span><br><span class="line">    <span class="hexcolor">#deb</span>ug</span><br></pre></td></tr></table></figure></p>
<h3 id="defaults"><strong>defaults</strong></h3><p>&emsp;<strong>defaults</strong>用于统一设置<code>listen</code>、<code>frontend</code>、<code>backend</code>的默认参数</p>
<ul>
<li><strong>log</strong>：设置日志，如果<strong>global</strong>已经配置好日志，就直接写<code>log global</code></li>
<li><strong>mode</strong>：工作模式，<strong><code>mode {tcp|http|health}</code></strong>。设置HAProxy实例运行的模式或协议，<code>frontend</code>和<code>backend</code>需要运行在同一模式<ul>
<li><code>tcp</code>：纯TCP工作模式，在client和server之间建立一个TCP连接代理，仅用作4层代理转发，常用于SSH、SMTP、POP3等代理。</li>
<li><code>http</code>：HTTP工作模式，HAProxy能对客户端的7层请求进行分析进而过滤、处理及转发等动作。</li>
<li><code>health</code>：health模式，对进入HAProxy的连接仅回复’OK’并关闭连接。</li>
</ul>
</li>
<li><strong>option httplog [clf]</strong>：记录HTTP请求、会话状态和计时器。clf格式记录</li>
<li><strong>option dontlognull</strong>：不记录null日志</li>
<li><strong>option logasap</strong>：提前将 HTTP 请求记入日志，而不等待 HTTP 报文传输完毕</li>
<li><strong>option forwardfor</strong>：在发往服务器的请求中插入<code>X-Forwarded-For</code>首部用于记录客户端的IP。<code>option forwardfor except 127.0.0.0/8</code>不记录本机转发日志</li>
<li><strong>retries <integer></integer></strong>：设置对某个服务器连接失败后重试的次数</li>
<li><strong>option redispatch</strong>：连接失败时重新分发会话</li>
<li><strong>option http-keep-alive <time></time></strong>：设置http keepalive时间，既允许空闲连接的时间</li>
<li><strong>option http-server-close</strong>：每次请求完毕后主动关闭http连接</li>
<li><strong>timeout http-request <time></time></strong>：http请求超时时间</li>
</ul>
<p>&emsp;常见<strong>defaults</strong>配置实例：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">defaults</span><br><span class="line">    <span class="command">log</span>     <span class="keyword">global</span></span><br><span class="line">    mode	http</span><br><span class="line">    option	httplog</span><br><span class="line">    option	dontlognull</span><br><span class="line">    retries	<span class="number">3</span></span><br><span class="line">    maxconn	<span class="number">2000</span></span><br><span class="line">    <span class="comment">#option forwardfor</span></span><br><span class="line">    <span class="comment">#option http-keep-alive 10s</span></span><br><span class="line">    <span class="comment">#timeout http-request 10s</span></span><br><span class="line">    <span class="keyword">timeout</span> connect <span class="number">5000</span></span><br><span class="line">    <span class="keyword">timeout</span> client <span class="number">50000</span></span><br><span class="line">    <span class="keyword">timeout</span> server <span class="number">50000</span></span><br></pre></td></tr></table></figure></p>
<h3 id="listen_frontend_backend"><strong>listen    frontend backend</strong></h3><p>&emsp;<code>listen</code>、<code>frontend</code>、<code>backend</code>通过实例详细解释相关参数以及用法</p>
<h4 id="HAProxy状态统计"><strong>HAProxy状态统计</strong></h4><p>&emsp;<code>listen</code>常见用法<strong><code>listen &lt;name&gt; ip:port</code></strong>，也可以先只指定<code>listen &lt;name&gt;</code>然后在内部用<code>bind ip:port</code><br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listen <span class="literal">status</span> *:<span class="number">8000</span>					<span class="comment">#绑定ip及port</span></span><br><span class="line">    stats <span class="literal">enable</span>						<span class="comment">#开启状态输出页面</span></span><br><span class="line">    stats hide-version					<span class="comment">#隐藏HAProxy版本号</span></span><br><span class="line">    stats uri   /haproxy?stats			<span class="comment">#访问url</span></span><br><span class="line">    stats realm  <span class="constant">H</span>AProxy\ <span class="constant">Statistics</span>		<span class="comment">#提示信息</span></span><br><span class="line">    stats auth  admin:<span class="literal">password</span>		<span class="comment">#验证的用户及密码</span></span><br></pre></td></tr></table></figure></p>
<h3 id="SMTP_代理"><strong>SMTP 代理</strong></h3><p>&emsp;利用HAProxy做简单的SMTP邮件代理<br><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listen smtp *:<span class="number">25</span></span><br><span class="line">    <span class="built_in">log</span>  global</span><br><span class="line">    mode tcp	</span><br><span class="line">    <span class="keyword">option</span> tcplog</span><br><span class="line">    <span class="built_in">server</span> smtp <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>:<span class="number">25</span> check</span><br></pre></td></tr></table></figure></p>
<h3 id="HTTP代理+健康检测"><strong>HTTP代理+健康检测</strong></h3><p>&emsp;简单的HTTP代理及基础检测<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">listen http_proxy *:80</span><br><span class="line">    mode http</span><br><span class="line">    cookie SERVERID					<span class="comment">#允许cookie记录serverid</span></span><br><span class="line">    balance roundrobin				<span class="comment">#负载均衡算法</span></span><br><span class="line">    option forwardfor</span><br><span class="line">    option httplog clf				<span class="comment">#使用httplog并使用clf日志格式</span></span><br><span class="line">    option httpchk GET /index.html	<span class="comment">#健康检测，使用HTTP请求通过HTTP CODE判断健康状态，2xx 和 3xx 的响应码表示健康状态，其他响应码或无响应表示服务器故障。</span></span><br><span class="line">    <span class="comment">#option httpchk HEAD /index.jsp HTTP/1.1\r\nHost:\ www.test.com		#更精确的健康检测，对HTTP头部进行检测</span></span><br><span class="line">    server web1 192.168.1.1:80 cookie server_id_1<span class="instruction"> check</span><br><span class="line"></span>    server web2 192.168.1.2:80 cookie server_id_2<span class="instruction"> check </span>inter 500 rise 1 fall 2 backup</span><br></pre></td></tr></table></figure></p>
<p>&emsp;重点解释一下<code>server web2 192.168.1.2:80 cookie server_id_2 check inter 500 rise 1 fall 2</code></p>
<ul>
<li><strong>server web2 192.168.1.2:80</strong>：定义server的名称、IP及端口</li>
<li><strong>cookie server_id_2</strong>：设定每个server的cookie serverid(前面已经允许cookie记录serverid)</li>
<li><strong>check</strong>：启用健康检查</li>
<li><strong>inter 500</strong>：检查的时间间隔，500毫秒</li>
<li><strong>rise 1</strong>：server需要被检查X次正常后才认为可用</li>
<li><strong>fall 2</strong>：server需要被检查X次失败后才认为不可用</li>
<li><strong>backup</strong>：作为备份，类似Nginx upstream中的backup。web1不可用后才使用web2</li>
<li><strong>weight</strong>：设置server权重，上面例子没用到</li>
<li><strong>balance</strong>：指定HAProxy的负载均衡算法<ul>
<li>roundrobin：基于权重的轮询算法。假若服务器处理时间均匀的情况下，此算法是最平衡及公平的，权重值动态调整，但每个后端服务器限制接受4095个活动链接</li>
<li>static-rr：基于权重的轮询算法。和roundrobin类似，不同的是权重值为静态方法，不会进行动态调整，但后端服务器无连接限制</li>
<li>leastconn：将新请求转发到最少连接数的后端服务器上。推荐在长会话中使用(LDAP/SQL/TSE)，短会话(HTTP)不太适合。算法是动态的，可在运行时调整权重</li>
<li>first：此算法将所有请求都转发到backend的第一台服务器上，当该服务器达到最大连接数后则转发到下一台服务器。</li>
<li>source：此算法将源IP进行hash，并由后端服务器的权重总数相除后决定转发。使得相同IP的请求能被转发到后端的同一台服务器上，但当后端服务器权重改变时很可能会重新分配转发。常用于基于TCP的无cookies场景</li>
<li>uri：将URI左边部分(?之前)或整个URI进行hash，并由后端服务器的权重总数相除后决定转发。使得相同URI的请求能被转发到后端同一台服务器上，但当后端服务器权重改变时很可能会重新分配转发。常用于代理缓存或反病毒代理，此算法仅用于HTTP后端服务器场景</li>
<li>url_param：通过检索HTTP GET请求中URL指定的参数进行转发。可使得具有相同URL参数的请求(如userid)能被转发到后端同一台服务器上，除非权重发生变化。</li>
<li>hdr(header parament)：对HTTP HEADER进行检索决定转发。</li>
<li>rdp-cookie：根据cookie锁定并hash每个TCP请求</li>
</ul>
</li>
</ul>
<h3 id="HTTP代理+ACL规则"><strong>HTTP代理+ACL规则</strong></h3><p>&emsp;不使用<code>listen</code>而是使用<code>frontend</code>和<code>backend</code>再加上ACL规则进行HTTP代理<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">frontend http_acl *:5000</span><br><span class="line">    mode http</span><br><span class="line">    option forwardfor</span><br><span class="line">    option httplog clf</span><br><span class="line">    acl<span class="keyword"> static</span>_resource path_beg -i /static /images</span><br><span class="line">    acl<span class="keyword"> static</span>_resource	path_end -i .jpg .gif .png</span><br><span class="line">    use_backend backend_res_server<span class="instruction"> if </span>static_resource</span><br><span class="line">    default_backend backend_app_server</span><br><span class="line"></span><br><span class="line">backend backend_res_server</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server<span class="keyword"> static</span>_server_1.155 10.0.1.155:80<span class="instruction"> check</span><br><span class="line"></span></span><br><span class="line">backend backend_app_server</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server ap<span class="variable">p1</span> 10.0.6.5:8888<span class="instruction"> check</span><br><span class="line"></span>    server ap<span class="variable">p2</span> 10.0.6.6:8888 check</span><br></pre></td></tr></table></figure></p>
<p>逐个分析配置语句，之前提过的省略</p>
<ul>
<li><strong><code>frontend http_acl *:5000</code></strong>：创建名为<code>http_acl</code>的<code>frontend</code>，监听<code>5000</code>端口</li>
<li><strong><code>acl static_resource path_end -i .jpg .gif .png</code></strong>：<ul>
<li><code>acl static_resource</code>：创建ACL规则，此规则名为<code>static_resource</code></li>
<li><code>path_beg/path_end -i .jpg</code>：匹配URL路径中开始/结束字符，例子中以<code>.jpg .gif .png</code>结束的字符，<code>-i</code>忽略大小写</li>
</ul>
</li>
<li><strong><code>use_backend</code></strong>：指定满足ACL规则的后端服务器。<code>use_backend &lt;backend&gt; &lt;if | unless&gt; &lt;condition&gt;</code></li>
<li><strong><code>default_backend</code></strong>：默认的后端服务器</li>
<li><strong>backend <backend_name></backend_name></strong>：创建后端服务器组</li>
</ul>
<p>ACL规则还有很多应用，列举一些简单例子：</p>
<ul>
<li><code>acl acl_name hdr_reg(host) -i ^(www.google.com|www.google.com.hk)$</code> <ul>
<li><code>hdr_reg(host)</code>：指定匹配HTTP HEADER中的<strong>host</strong>，<strong><code>hdr_reg</code></strong>使用正则匹配</li>
</ul>
</li>
<li><code>acl acl_name hdr_dom(host) -i www.google.com</code>、<code>acl acl_name hdr(host) -i www.google.com</code><ul>
<li><code>hdr_dom(host)/hdr(host)</code>：HTTP HEADER的域名匹配</li>
</ul>
</li>
<li><code>acl acl_name hdr_cnt(Content-length) eq 0</code><ul>
<li><code>hdr_cnt(Content-length)</code>：HTTP HEADER内容的<code>Content-length</code>等于0</li>
</ul>
</li>
<li><code>acl acl_name url_sub -i acl_test</code><ul>
<li><code>url_sub</code>：URL请求地址中包含<code>acl_test</code></li>
</ul>
</li>
<li><code>acl acl_name url_dir -i acltest</code><ul>
<li><code>url_dir</code>：URL路径中包含<code>acltest</code>，例如：<code>http://www.google.com.hk/acltest/chrome.png</code></li>
<li><code>path_dir</code>：除<code>url_dir</code>外<code>path_dir</code>也可用于判断URL中路径</li>
</ul>
</li>
</ul>
<p>创建ACL规则后，便是使用规则</p>
<ul>
<li>跳转<ul>
<li><code>redirect prefix http://www.google.com.hk code 301 if acl_name</code>：满足名为<code>acl_name</code>ACL规则的请求，301跳转到<code>http://www.google.com.hk</code>后续参数不变</li>
</ul>
</li>
<li>选择<code>backend</code>服务器<ul>
<li><code>use_backend backend_name if acl_name</code></li>
</ul>
</li>
<li>阻止<ul>
<li><code>block if acl_name1||acl_name2</code>：满足<code>acl_name1</code>或<code>acl_name2</code>的请求返回<code>403</code></li>
</ul>
</li>
</ul>
<h3 id="req_+_rsp操作"><strong>req + rsp操作</strong></h3><p>&emsp;HAProxy还有一系列的<code>req</code>操作，这部分了解甚少，以后再补吧<br><code>reqadd reqallow reqdel reqdeny reqiallow reqidel reqideny reqipass reqirep reqisetbe reqitarpit reqpass reqrep</code><br><code>rspadd rspdel rspdeny rspidel rspideny rspirep rsprep</code></p>
<h2 id="启动/重启"><strong>启动/重启</strong></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#启动</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/haproxy/</span>sbin<span class="regexp">/haproxy -f /u</span>sr<span class="regexp">/local/</span>haproxy<span class="regexp">/etc/</span>haproxy.cfg</span><br><span class="line"></span><br><span class="line">#重启</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/haproxy/</span>sbin<span class="regexp">/haproxy -f /u</span>sr<span class="regexp">/local/</span>haproxy<span class="regexp">/etc/</span>haproxy.cfg -st `cat <span class="regexp">/usr/</span>local<span class="regexp">/haproxy/</span>haproxy.pid`</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;HAProxy能用做负载均衡服务器，也可以用于做四层(TCP)、七层(HTTP)代理</p>
<h2 id="HAProxy安装"><strong>HAProxy安装</strong></h2><p>&emsp;从<a href="http://www.hapr]]>
    </summary>
    
      <category term="haproxy" scheme="http://yoursite.com/tags/haproxy/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Keepalived]]></title>
    <link href="http://yoursite.com/2015/09/20/keepalived/"/>
    <id>http://yoursite.com/2015/09/20/keepalived/</id>
    <published>2015-09-20T12:48:21.000Z</published>
    <updated>2016-02-22T14:25:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Keepalived基础"><strong>Keepalived基础</strong></h2><p>&emsp;Keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议</p>
<h3 id="keepalived组成"><strong>keepalived组成</strong></h3><ol>
<li>core：核心，负责主进程的启动、维护以及全局配置文件的加载和解析</li>
<li>check：负责健康检查，包括常见的各种检查方式</li>
<li>vrrp：实现VRRP协议</li>
</ol>
<h2 id="Keepalived安装"><strong>Keepalived安装</strong></h2><ol>
<li><p>确认内核与使用的内核版本一致，不一致则建立软链接<code>ln -s /usr/src/kernels/xxxxxxx/ /usr/src/linux</code>。若不想建立软链接也可以在编译安装时使用<strong><code>--with-kernel-dir=/usr/src/kernels/xxxxxxx</code></strong>指定内核目录。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls <span class="regexp">/usr/</span>src<span class="regexp">/kernels/</span> &amp;&amp; uname -r</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译安装Keepalived</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">yum -y install openssl openssl-devel</span><br><span class="line"></span><br><span class="line">wget <span class="string">'http://www.keepalived.org/software/keepalived-1.2.15.tar.gz'</span></span><br><span class="line">tar -zxf keepalived-<span class="number">1.2</span><span class="number">.15</span>.tar.gz</span><br><span class="line">cd keepalived-<span class="number">1.2</span><span class="number">.15</span></span><br><span class="line"></span><br><span class="line">#手动指定内核目录，内核以CentOS6<span class="number">.4</span> <span class="number">64</span>bit为例子</span><br><span class="line">#.<span class="regexp">/configure --prefix=/</span>usr<span class="regexp">/local/</span>keepalived --with-kernel-dir=<span class="regexp">/usr/</span>src<span class="regexp">/kernels/</span><span class="number">2.6</span><span class="number">.32</span>-<span class="number">573.3</span><span class="number">.1</span>.el6.x86_64	</span><br><span class="line">.<span class="regexp">/configure --prefix=/</span>usr<span class="regexp">/local/</span>keepalived</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/keepalived/</span>etc<span class="regexp">/rc.d/</span>init.d<span class="regexp">/keepalived /</span>etc<span class="regexp">/init.d/</span> &amp;&amp; chmod a+x <span class="regexp">/etc/</span>init.d/keepalived</span><br><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/keepalived/</span>etc<span class="regexp">/sysconfig/</span>keepalived <span class="regexp">/etc/</span>sysconfig/</span><br><span class="line"></span><br><span class="line">mkdir -p <span class="regexp">/etc/</span>keepalived</span><br><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/keepalived/</span>etc<span class="regexp">/keepalived/</span>keepalived.conf <span class="regexp">/etc/</span>keepalived/</span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/keepalived/</span>sbin<span class="regexp">/keepalived /</span>sbin/</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="配置Keepalived详解"><strong>配置Keepalived详解</strong></h2><p>Keepalived配置域主要包括：</p>
<ul>
<li>global_defs————全局配置</li>
<li>static_ipaddress————静态IP(一般不用配置, eth0等配好即可)</li>
<li>static_routes————静态路由(一般不用配置, 设置好网关即可)</li>
<li>vrrp_script————VRRP脚本</li>
<li>vrrp_instance————VRRP实例</li>
<li>virtual_server————LVS的相关</li>
</ul>
<h3 id="iptables允许VRRP组播"><strong>iptables允许VRRP组播</strong></h3><p>&emsp;master和backup都需要配置<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">iptables</span> -A INPUT -d <span class="number">224.0.0.18</span> -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<h3 id="global_defs——全局配置"><strong>global_defs——全局配置</strong></h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">   notification_email &#123;</span><br><span class="line">     fatesai<span class="variable">@gmail</span>.com 	<span class="comment">#报警邮箱</span></span><br><span class="line">   &#125;</span><br><span class="line">   notification_email_from keepalived<span class="variable">@10</span>.<span class="number">0</span>.<span class="number">2.15</span> 	<span class="comment">#发信箱</span></span><br><span class="line">   smtp_server <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>		<span class="comment">#smtp服务器</span></span><br><span class="line">   smtp_connect_timeout <span class="number">30</span>		<span class="comment">#超时时间</span></span><br><span class="line">   router_id node1		<span class="comment">#机器标识</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="vrrp_script——vrrp脚本"><strong>vrrp_script——vrrp脚本</strong></h3><p>&emsp;健康检查，当检查失败时会将vrrp_instance的priority作相应变化<br>&emsp;script可以是脚本或一条指令(返回0则成功，1则失败)<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">vrrp_script</span> check_nginx &#123;</span><br><span class="line">	<span class="title">script</span> <span class="string">"/home/work/script/check_nginx.sh"</span>	<span class="comment">#监控脚本</span></span><br><span class="line">	interval <span class="number">2</span>	<span class="comment">#监控间隔,每2秒监控一次</span></span><br><span class="line">	weight <span class="number">2</span>	<span class="comment">#权重</span></span><br><span class="line">	<span class="comment">#fall 2		#脚本检查失败2次vrrp_script才为失败</span></span><br><span class="line">	<span class="comment">#rise 2		#脚本检查成功2次vrrp_script才为成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="vrrp_instance——vrrp实例"><strong>vrrp_instance——vrrp实例</strong></h3><p>&emsp;<strong><code>vrrp_instance</code></strong>用来定义对外提供服务的VIP区域及其相关属性。<br>&emsp;<strong><code>vrrp_rsync_group</code></strong>用来定义vrrp_instance组，使得这个组内成员动作一致，一个vrrp_rsync_group可包含多个vrrp_instance</p>
<h4 id="vrrp_rsync_group"><strong>vrrp_rsync_group</strong></h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">vrrp_sync_group vrrp_group_name &#123; <span class="preprocessor">#vrrp_group_name名，监控多个vrrp_instance实例</span></span><br><span class="line">	group &#123;</span><br><span class="line">		inside_network 		<span class="preprocessor">#vrrp_instance实例名</span></span><br><span class="line">		outside_network</span><br><span class="line">	&#125;</span><br><span class="line"><span class="preprocessor">#notify_master <span class="title">"/home/work/script/notify.sh master"</span> #切换到Master状态时执行的脚本</span></span><br><span class="line"><span class="preprocessor">#notify_backup <span class="title">"/home/work/script/notify.sh backup"</span> #切换到Backup状态时执行的脚本</span></span><br><span class="line"><span class="preprocessor">#notify_fault <span class="title">"/home/work/script/notify.sh fault"</span> #切换到fault状态时执行的脚本(未明)</span></span><br><span class="line"><span class="preprocessor">#notify_stop <span class="title">"/home/work/script/notify.sh stop"</span> #keepalived停止时执行的脚本</span></span><br><span class="line"><span class="preprocessor">#smtp_alert #是否启用global_defs中提供的邮件地址和smtp服务器发送邮件通知</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance inside_network &#123;</span><br><span class="line">	state MASTER			<span class="preprocessor">#角色(master/backup)，实际是通过priority 和 weight决定</span></span><br><span class="line">	interface eth0			<span class="preprocessor">#接口</span></span><br><span class="line">	virtual_router_id <span class="number">51</span>	<span class="preprocessor">#同一主从的virtual_router_id要相同且唯一</span></span><br><span class="line">	priority <span class="number">100</span>			<span class="preprocessor">#权重</span></span><br><span class="line">	advert_int <span class="number">1</span>	<span class="preprocessor">#检查间隔，默认1秒</span></span><br><span class="line">	authentication &#123;	<span class="preprocessor">#验证</span></span><br><span class="line">		auth_type PASS</span><br><span class="line">		auth_pass <span class="number">1111</span></span><br><span class="line">	&#125;</span><br><span class="line">	virtual_ipaddress &#123;	<span class="preprocessor">#VIP</span></span><br><span class="line">		<span class="number">192.168</span><span class="number">.200</span><span class="number">.16</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="virtual_server——lvs_server"><strong>virtual_server——lvs_server</strong></h4><p>&emsp;结合LVS使用。先大致列举一下配置，以后会专门写篇博客记录Keepalived和LVS的使用加以详细说明。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">virtual_server IP Port &#123;</span><br><span class="line">    delay_loop <span class="tag">&lt;<span class="title">INT</span>&gt;</span></span><br><span class="line">    lb_algo rr|wrr|lc|wlc|lblc|sh|dh</span><br><span class="line">    lb_kind NAT|DR|TUN</span><br><span class="line">    persistence_timeout <span class="tag">&lt;<span class="title">INT</span>&gt;</span></span><br><span class="line">    persistence_granularity <span class="tag">&lt;<span class="title">NETMASK</span>&gt;</span></span><br><span class="line">    protocol TCP</span><br><span class="line">    ha_suspend</span><br><span class="line">    virtualhost <span class="tag">&lt;<span class="title">STRING</span>&gt;</span></span><br><span class="line">    alpha</span><br><span class="line">    omega</span><br><span class="line">    quorum <span class="tag">&lt;<span class="title">INT</span>&gt;</span></span><br><span class="line">    hysteresis <span class="tag">&lt;<span class="title">INT</span>&gt;</span></span><br><span class="line">    quorum_up <span class="tag">&lt;<span class="title">STRING</span>&gt;</span>|<span class="tag">&lt;<span class="title">QUOTED-STRING</span>&gt;</span></span><br><span class="line">    quorum_down <span class="tag">&lt;<span class="title">STRING</span>&gt;</span>|<span class="tag">&lt;<span class="title">QUOTED-STRING</span>&gt;</span></span><br><span class="line">    sorry_server <span class="tag">&lt;<span class="title">IPADDR</span>&gt;</span> <span class="tag">&lt;<span class="title">PORT</span>&gt;</span></span><br><span class="line">    real_server <span class="tag">&lt;<span class="title">IPADDR</span>&gt;</span> <span class="tag">&lt;<span class="title">PORT</span>&gt;</span> &#123;</span><br><span class="line">        weight <span class="tag">&lt;<span class="title">INT</span>&gt;</span></span><br><span class="line">        inhibit_on_failure</span><br><span class="line">        notify_up <span class="tag">&lt;<span class="title">STRING</span>&gt;</span>|<span class="tag">&lt;<span class="title">QUOTED-STRING</span>&gt;</span></span><br><span class="line">        notify_down <span class="tag">&lt;<span class="title">STRING</span>&gt;</span>|<span class="tag">&lt;<span class="title">QUOTED-STRING</span>&gt;</span></span><br><span class="line">        # HTTP_GET|SSL_GET|TCP_CHECK|SMTP_CHECK|MISC_CHECK</span><br><span class="line">        HTTP_GET|SSL_GET &#123;</span><br><span class="line">            url &#123;</span><br><span class="line">                path <span class="tag">&lt;<span class="title">STRING</span>&gt;</span></span><br><span class="line">                # Digest computed with genhash</span><br><span class="line">                digest <span class="tag">&lt;<span class="title">STRING</span>&gt;</span></span><br><span class="line">                status_code <span class="tag">&lt;<span class="title">INT</span>&gt;</span></span><br><span class="line">            &#125;</span><br><span class="line">            connect_port <span class="tag">&lt;<span class="title">PORT</span>&gt;</span></span><br><span class="line">            connect_timeout <span class="tag">&lt;<span class="title">INT</span>&gt;</span></span><br><span class="line">            nb_get_retry <span class="tag">&lt;<span class="title">INT</span>&gt;</span></span><br><span class="line">            delay_before_retry <span class="tag">&lt;<span class="title">INT</span>&gt;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Keepalived的VRRP选举"><strong>Keepalived的VRRP选举</strong></h2><p>&emsp;Keepalived中的集群角色由<strong><code>priority</code></strong>和<strong><code>weight</code></strong>共同决定<br>&emsp;Keepalived一主多从选举:</p>
<ol>
<li><strong><code>priority</code></strong>最大成为master，其余为backup</li>
<li>master发生故障—-&gt;backup节点间VRRP选举—-&gt;通过<code>priority</code>和<code>weight</code>选出master</li>
</ol>
<h3 id="VRRP选举"><strong>VRRP选举</strong></h3><p>&emsp;Keepalived是通过<code>priority</code>和<code>weight</code>选出master，<code>weight</code>可以是正或负，需分情况讨论<br>&emsp;<strong>weight值设定原则：</strong><br>&emsp;&emsp;&emsp;&emsp;<code>weight</code>绝对值大于master和backup的priority之差。<code>abs(weight)</code> &gt; <code>master-priority</code> - <code>backup-priority</code></p>
<p><strong>weight为正 +</strong></p>
<ul>
<li>master vrrp_script 成功时: 若 <code>master-priority</code> + <code>master-weight</code> &gt; <code>backup-priority</code> + <code>backup-weight</code>    则保持现状角色不发生切换</li>
<li>master vrrp_script <strong>失败</strong>时: 若 <code>master-priority</code> &lt; <code>backup-priority</code> + <code>backup-weight</code>     则<strong>主从切换</strong></li>
</ul>
<p><strong>weight为负 -</strong></p>
<ul>
<li>master vrrp_script 成功时: 若 <code>master-priority</code> &gt; <code>backup-priority</code>    则保持现状角色不发生切换</li>
<li>master vrrp_script <strong>失败</strong>时: 若 <code>master-priority</code> - <code>abs(weight)</code> &lt; <code>backup-priority</code>        则<strong>主从切换</strong></li>
</ul>
<h2 id="Nginx_+_Keepalived实例"><strong>Nginx + Keepalived实例</strong></h2><p>&emsp;Keepalived 配置完成后<code>ip a</code>查看VIP<br>&emsp;<strong>master配置—-/etc/keepalived/keepalived.conf</strong><br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   <span class="preprocessor">#notification_email &#123;</span></span><br><span class="line">   <span class="preprocessor">#  fatesai@gmail.com	#报警邮箱</span></span><br><span class="line">   <span class="preprocessor">#&#125;</span></span><br><span class="line">   <span class="preprocessor">#notification_email_from keepalived@10.0.2.15	#发信箱</span></span><br><span class="line">   <span class="preprocessor">#smtp_server 127.0.0.1</span></span><br><span class="line">   <span class="preprocessor">#smtp_connect_timeout 30</span></span><br><span class="line">   <span class="preprocessor">#router_id 10.0.1.152</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">    script <span class="string">"/home/work/script/check_nginx.sh"</span>	<span class="preprocessor">#监控脚本</span></span><br><span class="line">    interval <span class="number">3</span>	<span class="preprocessor">#监控间隔,每3秒监控一次</span></span><br><span class="line">    weight -<span class="number">20</span>	<span class="preprocessor">#权重</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">eth0</span></span><br><span class="line">    <span class="title">virtual_router_id</span> 51</span><br><span class="line">    <span class="title">priority</span> 100</span><br><span class="line">    <span class="title">advert_int</span> 1</span><br><span class="line">    <span class="title">authentication</span> </span>&#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">	track_script &#123;</span><br><span class="line">		check_nginx 	<span class="preprocessor">###执行上面定义的check_nginx</span></span><br><span class="line">	&#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">		<span class="number">10.0</span><span class="number">.1</span><span class="number">.222</span>	<span class="preprocessor">#VIP</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong>backup配置—-/etc/keepalived/keepalived.conf</strong><br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">! Configuration File <span class="keyword">for</span> keepalived</span><br><span class="line"></span><br><span class="line">global_defs &#123;</span><br><span class="line">   <span class="preprocessor">#notification_email &#123;</span></span><br><span class="line">   <span class="preprocessor">#	 fatesai@gmail.com	#报警邮箱</span></span><br><span class="line">   <span class="preprocessor">#&#125;</span></span><br><span class="line">   <span class="preprocessor">#notification_email_from keepalived@10.0.2.15	#发信箱</span></span><br><span class="line">   <span class="preprocessor">#smtp_server 127.0.0.1</span></span><br><span class="line">   <span class="preprocessor">#smtp_connect_timeout 30</span></span><br><span class="line">   <span class="preprocessor">#router_id 10.0.1.153</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script check_nginx &#123;</span><br><span class="line">    script <span class="string">"/home/work/script/check_nginx.sh"</span>	<span class="preprocessor">#监控脚本</span></span><br><span class="line">    interval <span class="number">3</span>	<span class="preprocessor">#监控间隔,每3秒监控一次</span></span><br><span class="line">    weight -<span class="number">20</span>	<span class="preprocessor">#权重</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state BACKUP</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">eth0</span></span><br><span class="line">    <span class="title">virtual_router_id</span> 51</span><br><span class="line">    <span class="title">priority</span> 90</span><br><span class="line">    <span class="title">advert_int</span> 1</span><br><span class="line">    <span class="title">authentication</span> </span>&#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;</span><br><span class="line">	track_script &#123;</span><br><span class="line">		check_nginx 	<span class="preprocessor">###执行上面定义的check_nginx</span></span><br><span class="line">	&#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">		<span class="number">10.0</span><span class="number">.1</span><span class="number">.222</span>	<span class="preprocessor">#VIP</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Keepalived非抢占方式"><strong>Keepalived非抢占方式</strong></h2><p>应用场景描述：<br>A-master，B-backup<br>A故障，B接管VIP成为master，业务由A切换至B。<br>当A恢复时，由于A的priority高于B，A接管VIP变回master。业务做了一次无意义切换，为避免此情况发生可以在A上设置<strong>Keepalived非抢占方式</strong></p>
<p><strong><code>Keepalived非抢占方式配置</code></strong></p>
<ol>
<li>A和B的state 都设置为BACKUP</li>
<li>A的priority比B的priority高</li>
<li>在A的Keepalived配置文件中添加<code>nopreempt</code>参数</li>
</ol>
<figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    <span class="comment">#state MASTER</span></span><br><span class="line">    state BACKUP</span><br><span class="line">    nopreempt</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">eth0</span></span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100 </span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication </span>&#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass <span class="number">1111</span></span><br><span class="line">    &#125;   </span><br><span class="line">    track_script &#123;</span><br><span class="line">        check_nginx     <span class="comment">###执行上面定义的check_nginx</span></span><br><span class="line">    &#125;   </span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        <span class="number">10.0</span>.<span class="number">1.222</span>  <span class="comment">#VIP</span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Keepalived非抢占切换过程及注意事项</strong><br>场景配置：<br>A    backup    nopreempt    priority 100    weight -20<br>B    backup                 priority 90     weight -20</p>
<ul>
<li><p>正常情况：<br>  A    主    VIP<br>  B    备</p>
</li>
<li><p>A宕机/check_nginx失败：<br>  VIP漂移<br>  A    宕<br>  B    主    VIP</p>
</li>
<li><p>A恢复/check_nginx恢复：<br>  A设置了nopreempt，非抢占方式，VIP无变化<br>  A    备<br>  B    主    VIP</p>
</li>
<li><p>B宕机/check_nginx失败：<br>  由于A设置nopreempt，若B没有宕机(keepalived正常)但check_nginx失败，VIP不会漂移!! 必须停止B的keepalived让A接管VIP！否则网站处于不可访问状态！<br>  B的check_nginx失败后，必须停止B的keepalived才能使VIP漂移A成为master！</p>
</li>
<li><p>B恢复/check_nginx恢复：<br>  手动启动B的keepalived，B成为备<br>  A    主    VIP<br>  B    备</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Keepalived基础"><strong>Keepalived基础</strong></h2><p>&emsp;Keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议]]>
    </summary>
    
      <category term="keepalived" scheme="http://yoursite.com/tags/keepalived/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MongoDB初识]]></title>
    <link href="http://yoursite.com/2015/09/06/mongodb/"/>
    <id>http://yoursite.com/2015/09/06/mongodb/</id>
    <published>2015-09-06T08:49:35.000Z</published>
    <updated>2016-02-27T17:42:05.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;最近需要用Python对MongoDB进行操作，所以简单对MongoDB做了些了解，记录以备方便查阅。</p>
<h2 id="安装"><strong>安装</strong></h2><p>&emsp;从<a href="http://www.mongodb.org/downloads" target="_blank" rel="external">官网</a>上下载源码包(在<strong>CentOS6.4 64bit</strong>上安装<a href="http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-2.6.11.tgz" target="_blank" rel="external">MongoDB2.6.11</a>)。下载完后直接解压到目标目录(这里使用的是<code>/usr/local/mongodb</code>)</p>
<p>&emsp;配置环境变量，这步非必要，配上只是为了方便，不配的话就要写绝对路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加环境变量</span></span><br><span class="line">$ vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> MONGODB_HOME=/usr/<span class="built_in">local</span>/mongodb</span><br><span class="line"><span class="built_in">export</span> PATH+=:<span class="variable">$MONGODB_HOME</span>/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#使环境变量生效</span></span><br><span class="line">$ <span class="built_in">source</span> /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查环境变量是否生效</span></span><br><span class="line">$ mongod --version</span><br></pre></td></tr></table></figure></p>
<h2 id="配置"><strong>配置</strong></h2><p>&emsp;配置及设置都来源于<a href="http://docs.mongodb.org/v2.6/" target="_blank" rel="external">MongoDB2.6官方文档</a></p>
<h3 id="创建目录"><strong>创建目录</strong></h3><p>&emsp;创建相关目录<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mkdir</span> /usr/<span class="keyword">local</span>/mongodb/&#123;<span class="keyword">log</span>,etc&#125;</span><br><span class="line"><span class="keyword">mkdir</span> -p /data/dbdata</span><br></pre></td></tr></table></figure></p>
<h3 id="配置文件"><strong>配置文件</strong></h3><p>&emsp;配置文件<strong><code>/usr/local/mongodb/etc/mongodb.conf</code></strong><br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dbpath<span class="subst">=</span>/<span class="built_in">data</span>/dbdata</span><br><span class="line">logpath<span class="subst">=</span>/usr/<span class="built_in">local</span>/mongodb/<span class="keyword">log</span>/mongodb<span class="built_in">.</span><span class="keyword">log</span></span><br><span class="line">pidfilepath<span class="subst">=</span>/usr/<span class="built_in">local</span>/mongodb/mongodb<span class="built_in">.</span>pid</span><br><span class="line">logappend<span class="subst">=</span><span class="literal">true</span></span><br><span class="line">port<span class="subst">=</span><span class="number">27017</span></span><br><span class="line">fork<span class="subst">=</span><span class="literal">true</span></span><br><span class="line">smallfiles <span class="subst">=</span> <span class="literal">true</span></span><br><span class="line"><span class="variable">#noauth</span><span class="subst">=</span><span class="literal">true</span></span><br><span class="line">auth<span class="subst">=</span><span class="literal">true</span></span><br><span class="line"><span class="variable">#nojournal</span> <span class="subst">=</span> <span class="literal">true</span></span><br><span class="line"><span class="variable">#noprealloc</span> <span class="subst">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong><code>dbpath</code></strong>：指定数据存储路径</li>
<li><strong><code>logpath</code></strong>：指定日志路径</li>
<li><strong><code>logappend</code></strong>：写日志模式，true为追加，默认覆盖</li>
<li><strong><code>port</code></strong>：指定监听端口</li>
<li><strong><code>fork</code></strong>：后台运行，true为守护进程运行，默认false</li>
<li><strong>noauth</strong>：用户认证，默认true</li>
<li><strong>nojournal</strong>：禁止操作日志，64位系统2.0版本后默认是启用journal日志(journal=true)。journal是redo log，开启journal日志可确保数据安全，开启journal日志后默认100ms会将内存中的数据写入到journal日志文件中。</li>
<li><strong>smallfiles</strong>：使用较小的默认数据文件大小，smallfiles会减少数据文件的初始大小，并限制到512M，也减少了日志文件的大小，并限制到128M。假若数据库很大，各持有少量的数据，会导致mongodb创建很多文件，会影响性能</li>
<li><strong>noprealloc</strong>：禁用预分配方式。预分配方式是为了保证写入性能的稳定，预分频会预先生存若干文件并都用0进行填充。让MongoDB始终保持额外的空间和空余的数据文件，从而避免IO阻塞。假若禁用预分频(noprealloc=true)会使得MongoDB启动时间缩短但写入性能可能会下降。</li>
</ul>
<p>&emsp;MongoDB<strong>默认是没有权限验证的</strong>!在生产环境下，为安全考虑必须启用验证。生产环境下可如下操作：</p>
<ol>
<li>首次启动MongoDB前不配置<strong><code>auto=true</code></strong>选项(MongoDB默认<code>noauth=true</code>)，启动MongoDB进入MongoDB Shell<strong>创建用户</strong></li>
<li>创建完用户后停止MongoDB，开启<strong><code>auto=true</code></strong>选项，启用用户验证后再启动MongoDB。</li>
</ol>
<h3 id="启动/停止"><strong>启动/停止</strong></h3><p>&emsp;<strong>启动MongoDB</strong><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/mongodb/</span>bin<span class="regexp">/mongod -f /u</span>sr<span class="regexp">/local/m</span>ongodb<span class="regexp">/etc/m</span>ongodb.conf</span><br></pre></td></tr></table></figure></p>
<p>&emsp;<strong>停止MongoDB</strong><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#方法一：</span></span><br><span class="line"><span class="variable">$ </span>kill -<span class="number">2</span> pid</span><br><span class="line">或 </span><br><span class="line"><span class="variable">$ </span>kill -<span class="number">4</span> pid</span><br><span class="line"></span><br><span class="line"><span class="comment">#方法二：</span></span><br><span class="line"><span class="variable">$ </span>/usr/local/mongodb/bin/mongo</span><br><span class="line">&gt; <span class="keyword">use</span> admin;</span><br><span class="line">&gt; db.shutdownServer();</span><br></pre></td></tr></table></figure></p>
<h2 id="MongoDB用户管理"><strong>MongoDB用户管理</strong></h2><p>&emsp;MongoDB默认是不会进行安全验证也没有管理员账号，为了安全考虑需要创建用户及权限设置<br>&emsp;MongoDB默认就是<code>noauth</code>，先启动后直接登录<code>MongoDB shell</code>，然后使用MongoDB内置方法<strong><code>createUser</code></strong>(<code>addUser</code>为旧方法)添加账号<br>&emsp;<strong><code>createUser</code></strong>方法包含四个参数：</p>
<ul>
<li><strong><code>user</code></strong>：用户名</li>
<li><strong><code>pwd</code></strong>：密码</li>
<li><strong><code>roles</code></strong>：指定用户的角色，此选项必须为<strong>数组</strong>。<strong>可为空<code>[]</code></strong>。所有内置角色详见<a href="http://docs.mongodb.org/v2.6/reference/built-in-roles/" target="_blank" rel="external">这里</a><br>  Example：  <figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">roles:</span> [</span><br><span class="line">			 &#123; <span class="string">role:</span> <span class="string">"read"</span>, <span class="string">db:</span> <span class="string">"reporting"</span> &#125;,</span><br><span class="line">			 &#123; <span class="string">role:</span> <span class="string">"readWrite"</span>, <span class="string">db:</span> <span class="string">"accounts"</span> &#125;,</span><br><span class="line">			 &#123; <span class="string">role:</span> <span class="string">"userAdminAnyDatabase"</span>, <span class="string">db:</span> <span class="string">"admin"</span> &#125;</span><br><span class="line">			]</span><br><span class="line"><span class="label"></span><br><span class="line">roles:</span> [&#123; <span class="string">role:</span> <span class="string">"userAdminAnyDatabase"</span>, <span class="string">db:</span> <span class="string">"admin"</span> &#125;]		#管理员权限，有用户管理权限但各个数据库仍需要再各自授权</span><br><span class="line"><span class="string">roles:</span> [&#123; <span class="string">role:</span> <span class="string">"root"</span>, <span class="string">db:</span> <span class="string">"admin"</span> &#125;]						#管理员权限，最大权限</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建用户"><strong>创建用户</strong></h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">$  mongo</span><br><span class="line">&gt; use admin</span><br><span class="line">&gt; db.createUser(&#123;</span><br><span class="line"><span class="keyword">...</span> user: <span class="string">"test"</span>,</span><br><span class="line"><span class="keyword">...</span> pwd: <span class="string">"mogl"</span>,</span><br><span class="line"><span class="keyword">...</span> roles: [&#123;role: <span class="string">"read"</span>, db: <span class="string">"admin"</span>&#125;, &#123;role: <span class="string">"readWrite"</span>, db: <span class="string">"local"</span>&#125;]</span><br><span class="line"><span class="keyword">...</span> &#125;);</span><br><span class="line">Successfully added user: &#123;</span><br><span class="line">        <span class="string">"user"</span> : <span class="string">"test"</span>,</span><br><span class="line">        <span class="string">"roles"</span> : [</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">"role"</span> : <span class="string">"read"</span>,</span><br><span class="line">                        <span class="string">"db"</span> : <span class="string">"admin"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">"role"</span> : <span class="string">"readWrite"</span>,</span><br><span class="line">                        <span class="string">"db"</span> : <span class="string">"local"</span></span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">&gt; show collections;</span><br><span class="line">system.indexes</span><br><span class="line">system.users</span><br><span class="line">system.version</span><br><span class="line">&gt; db.system.users.find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : <span class="string">"admin.test"</span>, <span class="string">"user"</span> : <span class="string">"test"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span>, <span class="string">"credentials"</span> : &#123; <span class="string">"MONGODB-CR"</span> : <span class="string">"dce6309d11410ce1bdd249fecd9700a5"</span> &#125;, <span class="string">"roles"</span> : [ &#123; <span class="string">"role"</span> : <span class="string">"read"</span>, <span class="string">"db"</span> : <span class="string">"admin"</span> &#125;, &#123; <span class="string">"role"</span> : <span class="string">"readWrite"</span>, <span class="string">"db"</span> : <span class="string">"local"</span> &#125; ] &#125;</span><br></pre></td></tr></table></figure>
<p>&emsp;创建用户后，停止MongoDB，注释<code>noauth=true</code>语句，添加<strong><code>auto=true</code></strong>。启动MongoDB后进行认证登陆<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> mongo <span class="number">127.0</span>.<span class="number">0</span>.<span class="number">1</span>/admin -utest -p</span><br><span class="line"><span class="comment">#或</span></span><br><span class="line"><span class="variable">$&gt;</span> mongo admin -utest -p</span><br></pre></td></tr></table></figure></p>
<p>&emsp;如果是在<code>admin</code>库对其他库授权，登陆的时候需要制定认证的<code>admin</code>库。如上例子中，用户<code>test</code>是在库<code>admin</code>对库<code>local</code>授权，登陆时则需：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; mongo <span class="keyword">local</span> -<span class="keyword">u</span> <span class="keyword">test</span> -p --authenticationDatabase admin</span><br></pre></td></tr></table></figure></p>
<p>&emsp;旧版的MongoDB使用的是<strong><code>db.addUser(&#39;username&#39;, &#39;password&#39;)</code></strong>，默认拥有所有数据库所有权限。<strong><code>db.addUser(&#39;username&#39;, &#39;password&#39;, true)</code></strong>，拥有所有数据库的只读权限。</p>
<h3 id="删除用户"><strong>删除用户</strong></h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">db</span>.dropUser(<span class="string">"username"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="修改用户角色"><strong>修改用户角色</strong></h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; show users;</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"admin.root"</span>,</span><br><span class="line">        <span class="string">"user"</span> : <span class="string">"root"</span>,        <span class="string">"db"</span> : <span class="string">"admin"</span>,</span><br><span class="line">        <span class="string">"roles"</span> : [                &#123;</span><br><span class="line">                        <span class="string">"role"</span> : <span class="string">"userAdminAnyDatabase"</span>,</span><br><span class="line">                        <span class="string">"db"</span> : <span class="string">"admin"</span></span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; db.updateUser(<span class="string">'root'</span>,</span><br><span class="line"><span class="keyword">...</span> &#123;roles: [&#123;role: <span class="string">'root'</span>, db: <span class="string">'admin'</span>&#125;]&#125;</span><br><span class="line"><span class="keyword">...</span> );</span><br></pre></td></tr></table></figure>
<h2 id="MongoDB数据库操作"><strong>MongoDB数据库操作</strong></h2><p>&emsp;记录MongoDB数据库的增删查改等操作</p>
<h3 id="创建数据库"><strong>创建数据库</strong></h3><p>&emsp;MongoDB创建数据库只需要<code>use database_name</code>即可，但创建库后必须插入一条数据，否则离开后库系统<strong>自动删除</strong>刚刚<code>use</code>的库。<br><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="subst">&gt;</span> use mydb</span><br><span class="line"><span class="subst">&gt;</span> switched <span class="keyword">to</span> db mydb</span><br><span class="line"></span><br><span class="line"><span class="variable">#usr</span>是collection_name，可理解为<span class="string">'表名'</span></span><br><span class="line"><span class="subst">&gt;</span> db<span class="built_in">.</span>usr<span class="built_in">.</span>insert(&#123;<span class="string">'name'</span>: <span class="string">'mogl'</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nInserted"</span> : <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="subst">&gt;</span> show collections;</span><br><span class="line">system<span class="built_in">.</span>indexes</span><br><span class="line">usr</span><br><span class="line"><span class="subst">&gt;</span> db<span class="built_in">.</span>usr<span class="built_in">.</span>find();</span><br><span class="line">&#123; <span class="string">"_id"</span> : ObjectId(<span class="string">"55ed032aaaabebb7d6ffb58e"</span>), <span class="string">"name"</span> : <span class="string">"mogl"</span> &#125;</span><br><span class="line"><span class="subst">&gt;</span> show dbs;</span><br><span class="line">admin  <span class="number">0.031</span>GB</span><br><span class="line"><span class="built_in">local</span>  <span class="number">0.031</span>GB</span><br><span class="line">mydb   <span class="number">0.031</span>GB</span><br><span class="line">test   (empty)</span><br></pre></td></tr></table></figure></p>
<h3 id="查询"><strong>查询</strong></h3><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.zabbix_log.find<span class="literal">()</span>.limit(<span class="number">5</span>).pretty<span class="literal">()</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>zabbix_log</code></strong>：collection名</li>
<li><strong><code>limit(5)</code></strong>：限制输出5个记录</li>
<li><strong><code>pretty()</code></strong>：格式化显示</li>
</ul>
<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;db<span class="class">.zabbixLog</span><span class="class">.find</span>()<span class="class">.sort</span>(&#123;<span class="variable">$natural</span><span class="value">: -<span class="number">1</span>&#125;).<span class="function">limit</span>(<span class="number">1</span>).<span class="function">pretty</span>();</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>sort({$natural: -1})</code></strong>：逆序</li>
</ul>
<h3 id="删除"><strong>删除</strong></h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt; use mydb</span><br><span class="line"><span class="preprocessor">#删除一条记录</span></span><br><span class="line">&gt; db.foo.remove(&#123;<span class="string">"id"</span>:<span class="string">"bar"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#清空foo中所有记录，但foo这个collection不会被删除</span></span><br><span class="line">&gt; db.foo.remove()</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#仅删除一条符合查询的记录</span></span><br><span class="line">&gt; db.restult.remove(&#123;<span class="string">'error_code'</span>: <span class="number">9</span>&#125;, &#123;justOne: <span class="literal">true</span>&#125;);</span><br><span class="line">WriteResult(&#123; <span class="string">"nRemoved"</span> : <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#删除foo这个collection.show collections不会有foo，但查看数据文件发现大小不变，Mongodb不会自动释放文件空间</span></span><br><span class="line">&gt; db.foo.drop()</span><br><span class="line"><span class="preprocessor">#使MongoDB释放不需要的空间</span></span><br><span class="line">&gt; db.repairDatabase()</span><br></pre></td></tr></table></figure>
<h2 id="Python操作MongoDB"><strong>Python操作MongoDB</strong></h2><p>&emsp;安装<strong><code>pymongo</code></strong><br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip <span class="keyword">install</span> pymongo</span><br></pre></td></tr></table></figure></p>
<h3 id="pymongo操作MongoDB"><strong>pymongo操作MongoDB</strong></h3><p>&emsp;详细内容查看<a href="https://api.mongodb.org/python/current/" target="_blank" rel="external">pymongo文档</a><br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"></span><br><span class="line"><span class="keyword">host</span> = <span class="string">'mongodb.host'</span></span><br><span class="line">port = <span class="number">27017</span></span><br><span class="line"><span class="keyword">user</span> = <span class="string">'username'</span></span><br><span class="line">pwd = <span class="string">'password'</span></span><br><span class="line">db_name = <span class="string">'mydb'</span></span><br><span class="line">collection_name = <span class="string">'mycollection'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#noauth</span></span><br><span class="line"><span class="comment">#mongo_con = pymongo.Connection(host, port)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#auth</span></span><br><span class="line">mongo_client = pymongo.<span class="constant">Mongo</span>Client(<span class="string">"%s:%d"</span> % (<span class="keyword">host</span>, port))</span><br><span class="line">mongo_client[db_name].authenticate(<span class="keyword">user</span>, pwd, db_name, mechanism=<span class="string">'MONGODB-CR'</span>)</span><br><span class="line">mongo_db = mongo_client[db_name]</span><br><span class="line">mongo_collection = mongo_db[collection_name]</span><br><span class="line"></span><br><span class="line"><span class="comment">#操作</span></span><br><span class="line">count = mongo_collection.count()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">insert_data = <span class="keyword">&#123;</span><span class="string">'pv'</span>: pv,</span><br><span class="line">               <span class="string">'code_200'</span>: code_20<span class="number">0</span>,</span><br><span class="line">               <span class="string">'error_code'</span>: error_code</span><br><span class="line">               <span class="keyword">&#125;</span></span><br><span class="line">mongo_collection.insert(insert_data)</span><br></pre></td></tr></table></figure></p>
<h2 id="MongoDB主从复制"><strong>MongoDB主从复制</strong></h2><p>&emsp;一个MongoDB主从复制集群里只能有主节点，主节点将所有collection的变动记录到<strong>oplog</strong>(类似MySQL的binlog)，从节点将<code>oplog</code>复制并应用操作实现数据一致。</p>
<ul>
<li><strong><code>主节点</code></strong>：负责接收数据并写入数据库</li>
<li><strong><code>从节点</code></strong>：通过复制主节点的<code>oplog</code>保持数据一致。若主节点挂了，有多个从节点时会从中选举新的主节点。</li>
<li><strong><code>投票节点</code></strong>：不包含数据，仅在选举中起作用，当选举结果出现平局时通过投票节点选出新的主节点。</li>
</ul>
<h3 id="无验证主从配置"><strong>无验证主从配置</strong></h3><ul>
<li><p><strong>主节点</strong><br>  在<code>/usr/local/mongodb/etc/mongodb.conf</code>配置文件上新增，主节点启动后在<strong><code>local</code></strong>库下会生成<strong><code>oplog.$main</code></strong>的collection</p>
  <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">master=</span><span class="constant">true</span></span><br><span class="line"><span class="variable">oplogSize=</span><span class="number">2048</span> 		<span class="comment">#oplog日志大小，单位M</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>从节点</strong><br>  在<code>/usr/local/mongodb/etc/mongodb.conf</code>配置文件上新增</p>
  <figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">slave=</span><span class="constant">true</span></span><br><span class="line"><span class="variable">source=</span>host:port   			<span class="comment">#指定主mongodb server</span></span><br><span class="line"><span class="variable">slavedelay=</span><span class="number">10</span>               <span class="comment">#延迟复制，单位为s</span></span><br><span class="line"><span class="variable">autoresync=</span><span class="constant">true</span>             <span class="comment">#从节点数据不是最新时，自动向主节点同步数据</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="有验证的主从配置"><strong>有验证的主从配置</strong></h3><p>&emsp;<a href="http://docs.mongodb.org/v2.6/tutorial/deploy-replica-set-with-auth/" target="_blank" rel="external">官方文档</a><br>&emsp;需要验证的主从涉及到<strong>keyFile</strong>的验证，需要利用<code>openssl</code>生成keyFile(可不用openssl而选择其他工具)<br>&emsp;在<strong>主节点</strong>生成<strong>keyFile</strong>并在配置文件指定路径，将<strong>keyFile</strong>复制到<strong>从节点</strong>并在配置文件指定路径<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> cd /usr/local/mongodb</span><br><span class="line"><span class="variable">$&gt;</span> openssl rand -base64 <span class="number">741</span> &gt; mongodb-keyfile</span><br><span class="line"><span class="variable">$&gt;</span> chmod <span class="number">600</span> mongodb-keyfile</span><br><span class="line"><span class="variable">$&gt;</span> echo <span class="string">'keyFile=/usr/local/mongodb/mongodb-keyfile'</span> &gt;&gt; <span class="regexp">/usr/local</span><span class="regexp">/mongodb/etc</span><span class="regexp">/mongodb.conf</span></span><br></pre></td></tr></table></figure></p>
<h2 id="MongoDB备份恢复"><strong>MongoDB备份恢复</strong></h2><ul>
<li><p><strong>MongoDB备份</strong></p>
  <figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#备份特定collection</span></span><br><span class="line"><span class="comment">$</span>&gt; <span class="comment">mongodump</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">mongodb</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">net</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27017</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">db</span> <span class="comment">test</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">collection</span> <span class="comment">some</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">username</span> <span class="comment">backup</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">password</span> <span class="comment">passwd</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#备份所有数据库</span></span><br><span class="line"><span class="comment">$</span>&gt; <span class="comment">mongodump</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">mongos3</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">net</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27017</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#备份特定数据库</span></span><br><span class="line"><span class="comment">$</span>&gt; <span class="comment">mongodump</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">mongodb</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">net</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27017</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">db</span> <span class="comment">test</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">username</span> <span class="comment">backup</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">password</span> <span class="comment">passwd</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>MongoDB恢复</strong></p>
  <figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#从/data/backup中恢复test库的名为some的collection</span></span><br><span class="line"><span class="comment">mongorestore</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">host</span> <span class="comment">mongodb</span><span class="string">.</span><span class="comment">example</span><span class="string">.</span><span class="comment">net</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">port</span> <span class="comment">27017</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">db</span> <span class="comment">test</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">collection</span> <span class="comment">some</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">username</span> <span class="comment">backup</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">password</span> <span class="comment">password</span> <span class="comment">/data/backup</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;最近需要用Python对MongoDB进行操作，所以简单对MongoDB做了些了解，记录以备方便查阅。</p>
<h2 id="安装"><strong>安装</strong></h2><p>&emsp;从<a href="http://www.mongodb.o]]>
    </summary>
    
      <category term="MongoDB" scheme="http://yoursite.com/tags/MongoDB/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OpenVPN使用小记]]></title>
    <link href="http://yoursite.com/2015/08/30/openvpn/"/>
    <id>http://yoursite.com/2015/08/30/openvpn/</id>
    <published>2015-08-30T13:07:14.000Z</published>
    <updated>2015-08-30T14:07:55.000Z</updated>
    <content type="html"><![CDATA[<h2 id="安装OpenVPN"><strong>安装OpenVPN</strong></h2><p>&emsp;这里使用<code>yum</code>安装，先安装依赖。需要编译安装可到<a href="https://openvpn.net/index.php/download.html" target="_blank" rel="external">这里</a>下载源码包<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y openssl openssl-devel lzo lzo-devel pam pam-devel automake pkgconfig</span><br><span class="line">yum -y <span class="keyword">install</span> openvpn</span><br></pre></td></tr></table></figure></p>
<h2 id="生成证书"><strong>生成证书</strong></h2><h3 id="安装easy-rsa"><strong>安装easy-rsa</strong></h3><p>&emsp;OpenVPN2.3(此处用2.3.7)后的版本需要独立下载<strong>easy-rsa</strong>用于生成证书，目前<strong>easy-rsa</strong>最新版本为3.x(此处用3.x版本)，网上教程多为<code>2.x</code>版本。<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/openvpn</span><br><span class="line">wget -c -O easy-rsa<span class="class">.zip</span> https:<span class="comment">//github.com/OpenVPN/easy-rsa/archive/master.zip</span></span><br><span class="line">unzip easy-rsa<span class="class">.zip</span></span><br><span class="line">mv easy-rsa-master easy-rsa</span><br></pre></td></tr></table></figure></p>
<h3 id="配置PKI_与_生成服务端证书"><strong>配置PKI 与 生成服务端证书</strong></h3><p>&emsp;根据自身情况配置PKI——public key infrastructure(公钥基础设施)相关信息<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/openvpn/easy-rsa/easyrsa3/</span><br><span class="line">cp vars.example vars</span><br><span class="line">  <span class="built_in">export</span> <span class="built_in">set</span>_var EASYRSA_REQ_COUNTRY <span class="string">"CN"</span></span><br><span class="line">  <span class="built_in">export</span> <span class="built_in">set</span>_var EASYRSA_REQ_PROVINCE    <span class="string">"GuangDong"</span></span><br><span class="line">  <span class="built_in">export</span> <span class="built_in">set</span>_var EASYRSA_REQ_CITY    <span class="string">"XXXXX"</span></span><br><span class="line">  <span class="built_in">export</span> <span class="built_in">set</span>_var EASYRSA_REQ_ORG <span class="string">"Company"</span></span><br><span class="line">  <span class="built_in">set</span>_var EASYRSA_REQ_EMAIL   <span class="string">"XXXXX@gmail.com"</span></span><br><span class="line">  <span class="built_in">export</span> <span class="built_in">set</span>_var EASYRSA_REQ_OU      <span class="string">"YunWeiBu"</span></span><br><span class="line">  <span class="comment">#easy-rsa3已经不支持nsCertType设置，若需要则设置EASYRSA_NS_SUPPORT</span></span><br><span class="line">  <span class="built_in">export</span> <span class="built_in">set</span>_var EASYRSA_NS_SUPPORT     <span class="string">"yes"</span></span><br><span class="line">./easyrsa init-pki		<span class="comment">#初始化PKI</span></span><br><span class="line">./easyrsa build-ca		<span class="comment">#创建CA，输入PEM密码(签发证书使用)，其余一律回车</span></span><br><span class="line">./easyrsa gen-req server nopass	<span class="comment">#创建服务端证书。 设置一下common name后其余一律回车 </span></span><br><span class="line">./easyrsa sign server server		<span class="comment">#签发服务端证书。输入yes，输入创建CA的PEM密码</span></span><br><span class="line">./easyrsa gen-dh 		<span class="comment">#创建Diffie-Hellman，增强OpenVPN安全性，确保key穿越不安全网络的命令</span></span><br></pre></td></tr></table></figure></p>
<h3 id="生成及签发客户端证书"><strong>生成及签发客户端证书</strong></h3><p>&emsp;生成客户端所需的证书。如果是使用证书认证方式则需此步(生成客户端证书)，假若是使用User/Passwd认证则无需此步骤。<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/openvpn_client &amp;&amp; cd /home/openvpn_client</span><br><span class="line">cp -a /etc/openvpn/easy-rsa/easyrsa3/ <span class="regexp">/home/openvpn</span>_client/easyrsa3_client &amp;&amp; cd /home/openvpn_client/easyrsa3_client/</span><br><span class="line">mv pki/ <span class="string">"/tmp/pki_`date "</span>+%<span class="constant">F_</span>%<span class="constant">H</span><span class="symbol">:%M</span><span class="symbol">:%S<span class="string">"`"</span></span></span><br><span class="line">./easyrsa init-pki			<span class="comment">#初始化PKI</span></span><br><span class="line">./easyrsa gen-req mogl		<span class="comment">#为用户生成证书，输入密码，此后改key则使用该密码，其余默认回车</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;签发客户端证书<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/etc/</span>openvpn<span class="regexp">/easy-rsa/</span>easyrsa3/</span><br><span class="line">.<span class="regexp">/easyrsa import-req /</span>home<span class="regexp">/openvpn_client/</span>easyrsa3_client<span class="regexp">/pki/</span>reqs/mogl.req mogl		#导入用户的req</span><br><span class="line">./easyrsa sign client mogl			#用户签约，输入yes，输入服务端PEM密码</span><br></pre></td></tr></table></figure></p>
<p>&emsp;最终服务端的<strong>easyrsa3</strong>的<code>pki</code>目录如下所示：<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@openvpn easyrsa3]<span class="preprocessor"># cd /etc/openvpn/easy-rsa/easyrsa3</span></span><br><span class="line">[root@openvpn easyrsa3]<span class="preprocessor"># tree pki</span></span><br><span class="line">pki</span><br><span class="line">├── ca.crt</span><br><span class="line">├── certs_by_serial</span><br><span class="line">│   ├── <span class="number">01.</span>pem</span><br><span class="line">│   └── <span class="number">02.</span>pem</span><br><span class="line">├── dh.pem</span><br><span class="line">├── <span class="keyword">index</span>.txt</span><br><span class="line">├── <span class="keyword">index</span>.txt.attr</span><br><span class="line">├── <span class="keyword">index</span>.txt.attr.old</span><br><span class="line">├── <span class="keyword">index</span>.txt.old</span><br><span class="line">├── issued</span><br><span class="line">│   ├── mogl.crt</span><br><span class="line">│   └── <span class="keyword">server</span>.crt</span><br><span class="line">├── <span class="keyword">private</span></span><br><span class="line">│   ├── ca.key</span><br><span class="line">│   └── <span class="keyword">server</span>.key</span><br><span class="line">├── reqs</span><br><span class="line">│   ├── mogl.req</span><br><span class="line">│   └── <span class="keyword">server</span>.req</span><br><span class="line">├── serial</span><br><span class="line">└── serial.old</span><br><span class="line"><span class="number">4</span> directories, <span class="number">16</span> files</span><br></pre></td></tr></table></figure></p>
<h3 id="证书整理"><strong>证书整理</strong></h3><p>&emsp;将服务端和客户端证书集中，方便管理以及查找<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p <span class="regexp">/etc/</span>openvpn/keys</span><br><span class="line">#服务端证书</span><br><span class="line">cp <span class="regexp">/etc/</span>openvpn<span class="regexp">/easy-rsa/</span>easyrsa3<span class="regexp">/pki/</span>ca.crt <span class="regexp">/etc/</span>openvpn/keys</span><br><span class="line">cp <span class="regexp">/etc/</span>openvpn<span class="regexp">/easy-rsa/</span>easyrsa3<span class="regexp">/pki/</span><span class="keyword">private</span><span class="regexp">/ca.key /</span>etc<span class="regexp">/openvpn/</span>keys</span><br><span class="line">cp <span class="regexp">/etc/</span>openvpn<span class="regexp">/easy-rsa/</span>easyrsa3<span class="regexp">/pki/</span><span class="keyword">private</span><span class="regexp">/server.key /</span>etc<span class="regexp">/openvpn/</span>keys</span><br><span class="line">cp <span class="regexp">/etc/</span>openvpn<span class="regexp">/easy-rsa/</span>easyrsa3<span class="regexp">/pki/</span>issued<span class="regexp">/server.crt /</span>etc<span class="regexp">/openvpn/</span>keys</span><br><span class="line">cp <span class="regexp">/etc/</span>openvpn<span class="regexp">/easy-rsa/</span>easyrsa3<span class="regexp">/pki/</span>dh.pem <span class="regexp">/etc/</span>openvpn<span class="regexp">/keys/</span>dh2048.pem</span><br><span class="line"></span><br><span class="line">#客户端证书</span><br><span class="line">cp <span class="regexp">/etc/</span>openvpn<span class="regexp">/easy-rsa/</span>easyrsa3<span class="regexp">/pki/</span>issued<span class="regexp">/mogl.crt /</span>etc<span class="regexp">/openvpn/</span>keys</span><br><span class="line">cp <span class="regexp">/home/</span>openvpn_client<span class="regexp">/easyrsa3_client/</span>pki<span class="regexp">/private/</span>mogl.key <span class="regexp">/etc/</span>openvpn/keys</span><br></pre></td></tr></table></figure></p>
<h2 id="OpenVPN服务端配置"><strong>OpenVPN服务端配置</strong></h2><h3 id="服务端配置文件"><strong>服务端配置文件</strong></h3><p>&emsp;对配置文件<code>/etc/openvpn/server.conf</code>进行修改，<code>local</code>可不配置，默认监听<code>0.0.0.0</code><br><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#指定OpenVPN监听的ip</span></span><br><span class="line">;local xxx.xxx.xxx.xxx</span><br><span class="line"><span class="preprocessor">#指定OpenVPN监听的端口</span></span><br><span class="line">port <span class="number">1194</span></span><br><span class="line"><span class="preprocessor">#指定OpenVPN使用的协议(TCP/UDP)</span></span><br><span class="line">proto udp</span><br><span class="line"><span class="preprocessor">#指定通信隧道类型(tun/tap)，tap链路层协议，tun网络层点对点协议</span></span><br><span class="line">dev tun</span><br><span class="line"><span class="preprocessor">#指定ca cert key dh文件路径</span></span><br><span class="line">ca /etc/openvpn/keys/ca.crt</span><br><span class="line">cert /etc/openvpn/keys/server.crt</span><br><span class="line">key /etc/openvpn/keys/server.key</span><br><span class="line">dh /etc/openvpn/keys/dh2048.pem</span><br><span class="line"><span class="preprocessor">#指定client分配的IP段</span></span><br><span class="line">server <span class="number">192.168</span><span class="number">.10</span><span class="number">.0</span> <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span></span><br><span class="line"><span class="preprocessor">#指定client使用的ip地址</span></span><br><span class="line">ifconfig-pool-persist /etc/openvpn/ipp.txt</span><br><span class="line"><span class="preprocessor">#指定client默认网关为VPN，既使所有流量都走VPN隧道</span></span><br><span class="line">push <span class="string">"redirect-gateway def1 bypass-dhcp"</span></span><br><span class="line"><span class="preprocessor">#指定client的DHCP选项(DNS)</span></span><br><span class="line">push <span class="string">"dhcp-option DNS 223.5.5.5"</span></span><br><span class="line"><span class="preprocessor">#每10秒检查存活，连续120秒无响应则认为连接丢失并重新启动VPN和重连</span></span><br><span class="line">keepalive <span class="number">10</span> <span class="number">120</span></span><br><span class="line"><span class="preprocessor">#对数据进行压缩(server和client都设置才有效)</span></span><br><span class="line">comp-lzo</span><br><span class="line"><span class="preprocessor">#指定最大client数目</span></span><br><span class="line">max-clients <span class="number">100</span></span><br><span class="line"><span class="preprocessor">#设定连接保持密钥功能。在由于keepalive检测超时后而重新启动VPN的情况，不重新读取keys，而保留第一次使用的keys</span></span><br><span class="line">persist-key</span><br><span class="line"><span class="preprocessor">#设定连接保持在线功能。由于keepalive检测超时后而重新启动VPN，一直保持tun/tap是linkup，否则连接会先linkdown然后linkup</span></span><br><span class="line">persist-tun</span><br><span class="line"><span class="preprocessor">#日志相关设置</span></span><br><span class="line">status /<span class="keyword">var</span>/log/openvpn-status.log</span><br><span class="line">log    /<span class="keyword">var</span>/log/openvpn.log</span><br><span class="line"><span class="preprocessor">#指定日志记录级别(0-9)</span></span><br><span class="line">verb <span class="number">3</span></span><br><span class="line"><span class="preprocessor">#指定脚本安全级别，当前客户端设置需要要将此值设置大于3，否则客户端连接时会报错</span></span><br><span class="line">script-security <span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<h3 id="内核参数及iptables配置"><strong>内核参数及iptables配置</strong></h3><p>&emsp;允许本机ip转发<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">"net.ipv4.ip_forward = 1"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo <span class="number">1</span> &gt; /<span class="keyword">proc</span>/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure></p>
<p>&emsp;iptables允许连接OpenVPN，注意自己添加开机启动。网卡设备<code>eth0</code>根据自身服务器上为准<br><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -<span class="literal">A</span> INPUT -p udp --dport <span class="number">1194</span> -j ACCEPT</span><br><span class="line">iptables -t nat -<span class="literal">A</span> POSTROUTING -s <span class="number">192.168</span>.<span class="number">10.0</span>/<span class="number">24</span> -o eth0 -j MASQUERADE</span><br><span class="line">iptables -<span class="literal">A</span> INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br></pre></td></tr></table></figure></p>
<h2 id="客户端配置"><strong>客户端配置</strong></h2><p>&emsp;下载Windows客户端，安装程序点击<a href="https://openvpn.net/index.php/open-source/downloads.html" target="_blank" rel="external">这里</a><br>将<code>ca.crt</code>、<code>mogl.crt</code>、<code>mogl.key</code>、<code>client.ovpn</code>四个文件放到OpenVPN安装目录下的<strong>config</strong>目录，<code>client.ovpn</code>文件内容如下<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto udp</span><br><span class="line">remote 服务器主机IP <span class="number">1194</span></span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">ca ca<span class="class">.crt</span></span><br><span class="line">cert mogl<span class="class">.crt</span></span><br><span class="line">key mogl<span class="class">.key</span></span><br><span class="line"><span class="id">#ns-cert-type</span> server	#假若客户端报错<span class="string">'VERIFY nsCertType ERROR: require nsCertType=SERVER'</span>，则将此行注释</span><br><span class="line">comp-lzo</span><br><span class="line">verb <span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<h2 id="User/Pass认证方式"><strong>User/Pass认证方式</strong></h2><h3 id="服务端配置"><strong>服务端配置</strong></h3><p>&emsp;以上配置客户端是通过证书的验证方式，OpenVPN可以配置成通过<strong>User/Pass</strong>认证方式<br>&emsp;在保持配置文件<code>/etc/openvpn/server.conf</code>不变的基础上添加如下内容：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#User/Pass认证方式</span></span><br><span class="line">auth-user-pass-verify /etc/openvpn/checkpsw.sh via-env</span><br><span class="line">client-cert-<span class="keyword">not</span>-required  </span><br><span class="line">username-<span class="keyword">as</span>-common-<span class="property">name</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;添加<code>client-cert-not-required</code>则代表只使用用户名密码方式验证登录，如果不加，则代表需要证书和用户名密码双重验证登录！<br>&emsp;<code>/etc/openvpn/checkpsw.sh</code>内容如下所示，也可点击<a href="http://openvpn.se/files/other/checkpsw.sh" target="_blank" rel="external">这里</a>进行下载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"><span class="comment"># checkpsw.sh (C) 2004 Mathias Sundman &lt;mathias@openvpn.se&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This script will authenticate OpenVPN users against</span></span><br><span class="line"><span class="comment"># a plain text file. The passfile should simply contain</span></span><br><span class="line"><span class="comment"># one row per user with the username first followed by</span></span><br><span class="line"><span class="comment"># one or more space(s) or tab(s) and then the password.</span></span><br><span class="line"></span><br><span class="line">PASSFILE=<span class="string">"/etc/openvpn/psw-file"</span></span><br><span class="line">LOG_FILE=<span class="string">"/var/log/openvpn-password.log"</span></span><br><span class="line">TIME_STAMP=`date <span class="string">"+%Y-%m-%d %T"</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -r <span class="string">"<span class="variable">$&#123;PASSFILE&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: Could not open password file \"<span class="variable">$&#123;PASSFILE&#125;</span>\" for reading."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line">  <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">CORRECT_PASSWORD=`awk <span class="string">'!/^;/&amp;&amp;!/^#/&amp;&amp;$1=="'</span><span class="variable">$&#123;username&#125;</span><span class="string">'"&#123;print $2;exit&#125;'</span> <span class="variable">$&#123;PASSFILE&#125;</span>`</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;CORRECT_PASSWORD&#125;</span>"</span> = <span class="string">""</span> ]; <span class="keyword">then</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: User does not exist: username=\"<span class="variable">$&#123;username&#125;</span>\", password=\"<span class="variable">$&#123;password&#125;</span>\"."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line">  <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;password&#125;</span>"</span> = <span class="string">"<span class="variable">$&#123;CORRECT_PASSWORD&#125;</span>"</span> ]; <span class="keyword">then</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: Successful authentication: username=\"<span class="variable">$&#123;username&#125;</span>\"."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line">  <span class="built_in">exit</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;TIME_STAMP&#125;</span>: Incorrect password: username=\"<span class="variable">$&#123;username&#125;</span>\", password=\"<span class="variable">$&#123;password&#125;</span>\"."</span> &gt;&gt; <span class="variable">$&#123;LOG_FILE&#125;</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;默认密码文件在<code>/etc/openvpn/psw-file</code>，用户名和密码用空格隔开，同时确保openvpn启动用户可读取该文件<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cat</span> /etc/openvpn/psw-<span class="keyword">file</span></span><br><span class="line">	<span class="keyword">test</span> mogl1002</span><br><span class="line">chmod 600 /etc/openvpn/psw-<span class="keyword">file</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;服务端配置完后需要重启OpenVPN<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/etc/i</span>nit.d<span class="regexp">/openvpn restart</span></span><br></pre></td></tr></table></figure></p>
<h3 id="客户端配置-1"><strong>客户端配置</strong></h3><p>&emsp;客户端<strong>client.ovpn</strong>只需要<code>ca.crt</code>即可，将<code>cert mogl.crt</code>和<code>key mogl.key</code>注释，新增<code>auth-user-pass</code><br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">client</span><br><span class="line">auth-user-pass</span><br><span class="line">dev tun</span><br><span class="line">proto udp</span><br><span class="line">remote 服务器主机IP <span class="number">1194</span></span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line"><span class="keyword">ca</span> <span class="keyword">ca</span>.crt</span><br><span class="line">;cert mogl.crt</span><br><span class="line">;key mogl.key</span><br><span class="line">#ns-cert-<span class="built_in">type</span> server	#假若客户端报错<span class="string">'VERIFY nsCertType ERROR: require nsCertType=SERVER'</span>，则将此行注释</span><br><span class="line"><span class="keyword">comp</span>-lzo</span><br><span class="line"><span class="keyword">verb</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;Linux下的客户端，<code>ca.crt</code>如常放在<code>/etc/openvpn/</code>目录下<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">yum</span> <span class="comment">install</span> <span class="comment">openvpn</span></span><br><span class="line"><span class="comment">openvpn</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">daemon</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">cd</span> <span class="comment">/etc/openvpn</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">config</span> <span class="comment">client</span><span class="string">.</span><span class="comment">ovpn</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;tips1，假若不想每次登录都输入用户名/密码，则可以修改<code>auth-user-pass</code>参数，将用户名/密码明文存到文件中让OpenVPN客户端读取(<strong>安全性会降低</strong>)<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auth-<span class="keyword">user</span>-<span class="literal">pass</span> pwd.txt</span><br><span class="line"><span class="comment">#在config目录下新建文件pwd.txt明文保存用户名/密码</span></span><br><span class="line">username</span><br><span class="line"><span class="literal">password</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;tips2，windows中若想OpenVPN客户端自动连接，则可按以下步骤设置：</p>
<ol>
<li>创建<code>openvpn-gui.exe</code>快捷方式</li>
<li><code>右键</code>——&gt;<code>属性</code>——&gt;<code>高级</code>——<code>以管理员身份运行</code></li>
<li><code>右键</code>——&gt;<code>属性</code>——&gt;<code>目标</code>，添加<strong><code>--connect client.ovpn</code></strong>，例如——“C:\Program Files\OpenVPN\bin\openvpn-gui.exe” —connect client.ovpn</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="安装OpenVPN"><strong>安装OpenVPN</strong></h2><p>&emsp;这里使用<code>yum</code>安装，先安装依赖。需要编译安装可到<a href="https://openvpn.net/index.php/downl]]>
    </summary>
    
      <category term="openvpn" scheme="http://yoursite.com/tags/openvpn/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Twemproxy简记]]></title>
    <link href="http://yoursite.com/2015/08/15/twemproxy/"/>
    <id>http://yoursite.com/2015/08/15/twemproxy/</id>
    <published>2015-08-15T03:01:06.000Z</published>
    <updated>2016-02-28T03:13:03.000Z</updated>
    <content type="html"><![CDATA[<p>&emsp;Twemproxy是Twitter开源的Redis/Memcache代理软件。</p>
<h2 id="基础环境"><strong>基础环境</strong></h2><ul>
<li>CentOS 6.4 64bit</li>
<li>Twemproxy 0.4.1</li>
<li>Redis 2.8.24</li>
</ul>
<h2 id="安装Twemproxy"><strong>安装Twemproxy</strong></h2><ul>
<li><p><strong>安装依赖</strong></p>
  <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&gt; yum -y <span class="keyword">install</span> libtool</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装autoconf</strong><br>  <strong>autoconf</strong>的版本必须在<strong><code>2.6.4</code></strong>以上</p>
  <figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> wget http:<span class="comment">//ftp.gnu.org/gnu/autoconf/autoconf-2.68.tar.gz</span></span><br><span class="line"><span class="variable">$&gt;</span> tar -zxf autoconf-<span class="number">2.68</span>.tar.gz</span><br><span class="line"><span class="variable">$&gt;</span> cd autoconf-<span class="number">2.68</span></span><br><span class="line"><span class="variable">$&gt;</span> ./configure --prefix=/usr/local/</span><br><span class="line"><span class="variable">$&gt;</span> make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"><span class="variable">$&gt;</span> autoconf -V</span><br><span class="line">autoconf (GNU Autoconf) <span class="number">2.68</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>安装Twemproxy</strong><br>  &emsp;如果需要twemproxy支持<code>redis_auth</code>则要选择<code>0.4.1</code>版本，若redis没有设置认证则并非必须使用<code>0.4.1</code>。<a href="https://drive.google.com/folderview?id=0B6pVMMV5F5dfMUdJV25abllhUWM&amp;usp=drive_web#list" target="_blank" rel="external">下载twemproxy.0.4.1.tar.gz</a> (需要梯子)<br>  &emsp;configure时可以指定debug的log输出级别 “full、log、yes、no”，默认是no。</p>
  <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar -zxf twemproxy.tar.gz</span><br><span class="line"><span class="keyword">cd</span> twemproxy-<span class="number">0.4</span>.<span class="number">1</span>/</span><br><span class="line">autoreconf -fvi</span><br><span class="line">./configure --prefix=/usr/local/twemproxy --enable-<span class="keyword">debug</span>=<span class="built_in">log</span></span><br><span class="line"><span class="keyword">make</span> &amp;&amp; <span class="keyword">make</span> install</span><br><span class="line"></span><br><span class="line">/usr/local/twemproxy/sbin/nutcracker --<span class="keyword">version</span></span><br><span class="line">This <span class="keyword">is</span> nutcracker-<span class="number">0.4</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="配置Twemproxy"><strong>配置Twemproxy</strong></h2><p>&emsp;<strong><code>/usr/local/twemproxy/conf/nutcracker.yml</code></strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">web_redis:</span><br><span class="line">  listen: <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">22122</span></span><br><span class="line">  <span class="built_in">hash</span>: fnv1a_64</span><br><span class="line">  <span class="built_in">hash</span>_tag: <span class="string">"&#123;&#125;"</span></span><br><span class="line">  distribution: ketama</span><br><span class="line">  auto_eject_hosts: <span class="literal">true</span></span><br><span class="line">  redis: <span class="literal">true</span></span><br><span class="line">  redis_auth: redis_password</span><br><span class="line">  server_retry_timeout: <span class="number">3000</span></span><br><span class="line">  server_failure_<span class="built_in">limit</span>: <span class="number">1</span></span><br><span class="line">  servers:</span><br><span class="line">   - <span class="number">10.0</span>.<span class="number">6.5</span>:<span class="number">6379</span>:<span class="number">1</span></span><br><span class="line">   - <span class="number">10.0</span>.<span class="number">6.6</span>:<span class="number">6379</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>web_redis：实例别名</li>
<li>listen：监听ip及端口</li>
<li>hash：hash算法<ul>
<li>one_at_a_time</li>
<li>md5</li>
<li>crc16</li>
<li>crc32 (crc32 implementation compatible with libmemcached)</li>
<li>crc32a (correct crc32 implementation as per the spec)</li>
<li>fnv1_64</li>
<li>fnv1a_64</li>
<li>fnv1_32</li>
<li>fnv1a_32</li>
<li>hsieh</li>
<li>murmur</li>
<li>jenkins</li>
</ul>
</li>
<li>hash_tag: 使用key的一部分作为键值，比如：”user:{user1}:ids”、”user:{user1}:tweets”使用<code>user1</code>作为hash会映射到同一台redis上</li>
<li>distribution: 分片算法<ul>
<li>ketama：一致性Hash。据服务器构造出一个hash ring，并为ring上的节点分配hash范围。ketama的优势在于单个节点添加、删除之后，会最大程度上保持整个群集中缓存的key值可以被重用。</li>
<li>modula：取模。据key值的hash值取模，根据取模的结果选择对应的服务器。</li>
<li>random：随机。无论key值的hash是什么，都随机的选择一个服务器作为key值操作的目标。这种分片适合只读缓存。</li>
</ul>
</li>
<li>auto_eject_hosts: twemproxy是否应该根据server的连接状态重建群集。连接状态是由server_failure_limit阀值来控制。 默认是false。 （是否在节点故障无法响应时自动摘除该节点，如果作为存储需要设置为为false）</li>
<li>redis: 是否是redis代理，如果是false则是memcached代理。</li>
<li>redis_auth:　后端redis若需要认证则需此选项。</li>
<li>server_retry_timeout：单位是毫秒，控制服务器连接的时间间隔（重新连接一个临时摘掉的故障节点的间隔），在auto_eject_host被设置为true的时候产生作用。默认是30000 毫秒。</li>
<li>server_failure_limit: 控制连接服务器的次数（节点故障无法响应多少次从一致性Hash环临时摘掉它），在auto_eject_host被设置为true的时候产生作用。默认是2。</li>
<li>servers: 代理的服务器列表，该列表会使用distribution配置的分片算法进行分片。</li>
</ul>
<h2 id="启动Twemproxy"><strong>启动Twemproxy</strong></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 测试配置文件</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/twemproxy/</span>sbin<span class="regexp">/nutcracker -t /u</span>sr<span class="regexp">/local/</span>twemproxy<span class="regexp">/conf/</span>nutcracker.yml</span><br><span class="line"></span><br><span class="line"># 启动Twemproxy</span><br><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/twemproxy/</span>sbin<span class="regexp">/nutcracker -d -c /u</span>sr<span class="regexp">/local/</span>twemproxy<span class="regexp">/conf/</span>nutcracker.yml -p <span class="regexp">/usr/</span>local<span class="regexp">/twemproxy/</span>run<span class="regexp">/twemproxy.pid -o /u</span>sr<span class="regexp">/local/</span>twemproxy<span class="regexp">/run/</span>twemproxy.log</span><br></pre></td></tr></table></figure>
<h2 id="测试Twemproxy"><strong>测试Twemproxy</strong></h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&gt;</span> /usr/local/redis/bin/redis-cli -p <span class="number">22122</span> -a redis_password</span><br><span class="line"></span><br><span class="line"><span class="prompt">127.0.0.1:22122&gt;</span> set name mogl</span><br><span class="line"><span class="constant">OK</span></span><br><span class="line"><span class="prompt">127.0.0.1:22122&gt;</span> get name</span><br><span class="line"><span class="string">"mogl"</span></span><br><span class="line"><span class="prompt">127.0.0.1:22122&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>&emsp;Twemproxy是Twitter开源的Redis/Memcache代理软件。</p>
<h2 id="基础环境"><strong>基础环境</strong></h2><ul>
<li>CentOS 6.4 64bit</li>
<li>Twemproxy 0.]]>
    </summary>
    
      <category term="twemproxy" scheme="http://yoursite.com/tags/twemproxy/"/>
    
      <category term="OPS" scheme="http://yoursite.com/categories/OPS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重读《TCP/IP详解卷一》之UDP及DNS]]></title>
    <link href="http://yoursite.com/2015/07/30/review-tcp-ip-4/"/>
    <id>http://yoursite.com/2015/07/30/review-tcp-ip-4/</id>
    <published>2015-07-30T14:28:34.000Z</published>
    <updated>2015-08-27T14:19:25.000Z</updated>
    <content type="html"><![CDATA[<h2 id="UDP用户数据报协议"><strong>UDP用户数据报协议</strong></h2><p>&emsp;UDP是一种简单的<strong>面向数据报</strong>的传输层协议(TCP是面向数据流)。面向数据报，既当应用层交给UDP的数据，UDP并不会理会数据的大小而是直接在数据上封装UDP首部后直接交给网络层的IP(TCP对数据则会是<code>大割小补</code>，总是以TCP认为适合的数据大小进行传输)。<br>&emsp;UDP不提供可靠性，与IP一样是不可靠协议，数据会有丢失的可能性。<br>&emsp;应用程序必须关系网络层中IP数据报的长度。因为UDP是面向数据报的，不理会数据大小直接将数据交给IP，如果数据大小超过<strong>MTU</strong>则会涉及到<strong>IP分片</strong>的问题。</p>
<h3 id="UDP首部"><strong>UDP首部</strong></h3><p>&emsp;UDP首部结构相比TCP要简单得多，如下图所示：</p>
<center><br><img src="http://7xk64o.com1.z0.glb.clouddn.com/udp-header.jpg" alt="udp-header"><br></center>

<ul>
<li><strong>源端口(16位)</strong>：用于表明发送进程。端口占<strong>16位</strong>表明端口最大为<code>2^16</code>(端口最大为65535)。</li>
<li><strong>目的端口(16位)</strong>：用于表明接收进程。</li>
<li><strong>UDP长度</strong>：UDP首部+UDP数据的总长度。</li>
<li><strong>UDP校验和</strong>：校验和是校验以下三个部分：UDP首部+UDP数据+<strong>UDP伪首部</strong></li>
</ul>
<h2 id="DNS"><strong>DNS</strong></h2><h3 id="基础概念"><strong>基础概念</strong></h3><p>&emsp;域名系统(DNS)提供主机名和IP地址间的转换，是一种TCP/IP应用程序的分布式数据库，具有层次化结构且不区分大小写。<br>&emsp;以<strong>点</strong>结尾的域名称之为<strong>绝对域名</strong>或<strong>完全合格域名——FQDN(Full Qualified Domain Name)</strong>，比如<code>www.google.com.</code>(域名树的根节点即为<strong>点</strong>)<br>&emsp;<strong>顶级域名</strong>分为三部分：</p>
<ul>
<li>arpa是一个用作地址到名字转换的特殊域</li>
<li>7个3字符长的普通域。<code>com edu gov int mil net org</code></li>
<li>所有2字符长的域均是基于ISO3166中定义的国家代码。<code>us cn</code></li>
</ul>
<h3 id="DNS服务器类型"><strong>DNS服务器类型</strong></h3><p>&emsp;DNS服务器大致分成四种类型：</p>
<ul>
<li>主域名服务器：负责维护一个区域的所有域名信息，是特定的所有信息的权威信息源，数据可以修改</li>
<li>辅助域名服务器：辅助域名服务器中区域文件中的数据是从主域名服务器中复制得来，是不可以修改的。辅助域名服务器从主域名服务器复制区域数据的行为称之为<strong>区域传送</strong>(区域传送使用的是<strong>TCP 53端口</strong>)</li>
<li>缓存域名服务器：又称<code>唯缓存域名服务器</code>，将查询过的结果进行缓存以便快速查询，缓存域名服务器不是权威的域名服务器，提供的信息只是间接信息。</li>
<li>转发域名服务器：将所有非本地域名的查询转发到指定的域名服务器中。</li>
</ul>
<h3 id="DNS查询方式"><strong>DNS查询方式</strong></h3><p>&emsp;一般DNS提供本地域名查询，若遇到非本地域名则会采用<strong>递归查询</strong>或<strong>迭代查询</strong>两种方式进行查询：</p>
<ul>
<li>递归查询(最常见的查询方式)：<br>  由本地域名服务器代替客户端向根域名服务器发起查询请求并在域名树中上下分支中进行递归查询，最终将查询结果返回给客户端。<br>  比如客户端发起一个域名查询<code>www.google.com</code>，假设本地域名服务器没有相应记录，则本地域名服务器向根域名服务器发起查询，根域名服务器告知本地域名服务器去问<code>.com</code>域名服务器，以此类推本地域名服务器依次向<code>.com</code>、<code>google.com</code>、<code>www.google.com</code>发起查询请求，最终将结果返回给客户端并存入高速缓存中。</li>
<li>迭代查询：<br>  迭代查询与递归查询不同的是，查询请求都有客户端自己发起。迭代查询时客户端依次向<code>.</code>、<code>.com</code>、<code>google.com</code>、<code>www.google.com</code>发起查询请求，而并非像递归查询由本地服务器发起。</li>
</ul>
<h3 id="DNS资源记录"><strong>DNS资源记录</strong></h3><p>&emsp;DNS资源记录常见的有5种类型，详细请参见<a href="https://zh.wikipedia.org/wiki/%E5%9F%9F%E5%90%8D%E6%9C%8D%E5%8B%99%E5%99%A8%E8%A8%98%E9%8C%84%E9%A1%9E%E5%9E%8B%E5%88%97%E8%A1%A8" target="_blank" rel="external">这里</a>：</p>
<ul>
<li>主机（A）：将域名FQND映射到IP  正向解析</li>
<li>别名（CNAME）：将A记录指向的域名 指向 另外一个域名</li>
<li>邮件交换器（MX）：指出当前区域内 SMTP邮件服务器IP</li>
<li>名称服务器（NS）：指出当前区域内有几个DNS服务器在提供服务</li>
<li>反向解析(PRT)：将IP解析为域名(FQND)</li>
</ul>
<h3 id="TCP_or_UDP"><strong>TCP or UDP</strong></h3><p>&emsp;DNS是使用<code>TCP 53</code>端口和<code>UDP 53</code>端口的，那么什么时候使用TCP，什么时候使用UDP呢？<br>&emsp;一般情况下DNS默认都是使用<strong>UDP 53</strong>，但在一些特殊情况下会使用到<strong>TCP 53</strong></p>
<ul>
<li>应答长度超过512字节，使用TCP。DNS在UDP模式下限制报文长度在<code>512</code>字节以下，假若应答报文超过512字节则使用TCP</li>
<li><strong>区域传送</strong>使用TCP。辅助服务器与主服务器在进行<strong>区域传输</strong>时使用TCP</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="UDP用户数据报协议"><strong>UDP用户数据报协议</strong></h2><p>&emsp;UDP是一种简单的<strong>面向数据报</strong>的传输层协议(TCP是面向数据流)。面向数据报，既当应用层交给UDP的数据，UDP并不会理会数据]]>
    </summary>
    
      <category term="TCP/IP" scheme="http://yoursite.com/tags/TCP-IP/"/>
    
      <category term="TCP/IP" scheme="http://yoursite.com/categories/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重读《TCP/IP详解卷一》之传输层TCP]]></title>
    <link href="http://yoursite.com/2015/07/16/review-tcp-ip-3/"/>
    <id>http://yoursite.com/2015/07/16/review-tcp-ip-3/</id>
    <published>2015-07-16T12:41:29.000Z</published>
    <updated>2016-03-07T10:40:29.000Z</updated>
    <content type="html"><![CDATA[<h2 id="TCP传输控制协议"><strong>TCP传输控制协议</strong></h2><p>&emsp;TCP工作在传输层，提供一种面向连接的、可靠的字节流服务。面向连接表示在进行数据传输之前必须先建立一个<strong>TCP连接</strong>，这就有了之后要讲的<strong>TCP三次握手</strong>。<br>&emsp;TCP传输的信息单元称之为<strong>段(segment)</strong>。TCP提供<strong>点对点</strong>的服务，不支持多播和组播(UDP支持广播和多播)。<br>&emsp;TCP提供确认重传机制，当TCP发送一个段(segment)后会启动一个定时器，超时后没有等到确认段则超时重传，所以说TCP为可靠的。<br>&emsp;TCP的可靠性还体现在数据校验上，TCP首部会有<code>检验和</code>字段会对<strong>TCP首部和数据</strong>进行检验(IP首部同样有<code>校验和</code>，但仅对<strong>IP首部</strong>进行校验不对其数据部分进行校验，数据的校验交给TCP完成)。<br>&emsp;TCP会对应用数据进行分割或填充，总是以TCP认为最合适的数据块大小进行发送。此外TCP还提供流量控制。</p>
<h3 id="TCP首部结构"><strong>TCP首部结构</strong></h3><p>&emsp;TCP首部如下图所示：<br><img src="http://7xk64o.com1.z0.glb.clouddn.com/tcp-header.png" alt="tcp-header"><br>&emsp;TCP头部如果不包含<code>选项</code>通常是<strong>20字节</strong>(IP头部不含选项也是<strong>20字节</strong>)</p>
<ul>
<li><strong>源端口(16位)</strong>：发送端的端口号。源端口及目的端口主要用于寻找发送端和接收端的应用程序。端口占<strong>16位</strong>表明端口最大为<code>2^16</code>(端口最大为65535)。</li>
<li><strong>目的端口(16位)</strong>： 接收端的端口号。TCP通过<strong><code>src_ip, src_port, dst_ip, dst_port</code></strong>四个元组唯一标识一个TCP连接。</li>
<li><strong>序号(32位)</strong> &amp; <strong>确认序号(32位)</strong>：之所以会有两个序号是因为TCP是全双工的。<code>序号</code>用来表明发送方向上的字节流而<code>确认序号</code>用来表明接收方向上的字节流。<code>数据</code>中的一个字节占用一个序号，若<code>TCP数据</code>有100个字节则<code>序号</code>就<code>+100</code>。当<code>数据</code>为<code>0</code>时(无数据要传输只有IP首部和TCP首部)，只要<code>SYN</code>或<code>FIN</code>标志为<code>1</code>则<code>序号</code>就要<code>+1</code>(<code>ACK</code>位为<code>1</code>序号是不需要+1的)。<br>  &emsp;&emsp;<code>序号</code>和<code>确认序号</code>变化过程：<ul>
<li>假定发送端的开始<code>序号</code>为<code>SN</code></li>
<li>当发送端发送100字节数据，则下次的发送<code>序号</code>变为<code>SN+100+1</code></li>
<li>当接收端成功接收100字节数据后，回复的<code>确认序号</code>为<strong><code>SN+100+1</code></strong>；(<code>确认序号</code>可理解为接收端告诉发送端下一次想接收的开始序号)</li>
<li>当发送端收到接收端发来的TCP段，查看<code>确认序号</code>得知之前发送的100字节数据已经成功传输。</li>
</ul>
</li>
<li><strong>首部长度(4位)</strong>：TCP的<code>首部长度</code>字节和IP的<code>首部长度</code>字节完全一致，既<code>TCP首部</code>最大能有<strong><code>60字节</code></strong>(包含<code>选项</code>)，一般正常的<code>TCP首部</code>和<code>IP首部</code>一样为<strong>20字节</strong></li>
<li><strong>保留(6位)</strong>：保留未使用</li>
<li><strong>FLAG(6位)</strong>：有6个flag，若某位被置<code>1</code>则表示使用此flag位<ul>
<li>URG：紧急指针</li>
<li>ACK：确认序号有效(除三次握手的第一个SYN包ACK位没有置1外，其余的所有包都要ACK标志)</li>
<li>PSH：接收端应尽快将段传给应用层(此位用处不大)</li>
<li>RST：重建连接</li>
<li>SYN：同步序号(用于三次握手)</li>
<li>FIN：发送端完成发送任务(主动断开TCP连接)</li>
</ul>
</li>
<li><strong>窗口大小(16位)</strong>：申明窗口大小，用于TCP流量控制(滑动窗口流量控制)。主要作用是让接收端对发送端发送的数据进行控制。因为<code>窗口大小</code>字段占<code>16位</code>所以窗口大小最大为<code>65535</code>，但对于高速网络窗口太小，故在<code>TCP选项</code>中有<strong><code>窗口扩大因子</code></strong>用于扩大窗口大小，需要利用到此值来计算实际的窗口大小(具体见<strong>选项</strong>中的<strong>窗口扩大因子</strong>)。</li>
<li><strong>校验和(16位)</strong>：TCP的校验和是包含<code>TCP首部</code>和<code>TCP数据</code>的校验。</li>
<li><strong>紧急指针(16位)</strong>：当<code>URG</code>被置<code>1</code>时，此字段才有效，用于表明哪一段数据为紧急数据。</li>
<li><strong>选项</strong>：<code>选项</code>字段最大为<code>40字节</code>。<code>选项</code>一般的结构是——<code>|kind(1byte)|length(1byte)|info(n byte)|</code>，不同的<code>kind</code>表示不同的作用，详见<a href="https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure" target="_blank" rel="external">TCP选项</a>。选着性挑常见的说明：<ul>
<li><strong><code>kind=2</code>——最大报文段长度 MSS(Maximum Segment Size)</strong>：表明最长报文大小。告诉对方本端能接收的最大长度的段是多少。一般以太网的<code>MTU</code>为<code>1500</code>则TCP的<code>MSS</code>为<code>1460</code>(除去IP首部和TCP首部，1500-20-20)。通常都是在<code>SYN</code>中顺带声明<code>MSS</code>。若应用层交给TCP的数据超过<code>MSS</code>，TCP则会数据进行分割(让数据小于MSS后再传输)，故TCP很少会有IP分片而UDP则会较多IP分片(UDP不会对数据进行分割，应用层传大多数据给UDP，UDP直接加个UDP首部后直接传给IP)</li>
<li><strong><code>kind=3</code>——窗口扩大因子 Window Scale</strong>：用于扩大窗口大小。TCP首部中<code>窗口大小</code>字段占<code>16位</code>最大窗口大小为<code>65535</code>，但在高速网络中此大小可能不够用，需要用到<code>窗口扩大因子</code>选项来增大TCP的窗口大小以便更快的传输数据。<br>  Window Scale中有声明一个<strong><code>Shift count</code></strong>，假设<code>Shift count=n</code>，那么：实际窗口大小 = <strong>窗口大小(16位)</strong> × 2^n</li>
<li><strong><code>kind=4</code>——选择性确认 SACK(Selective Acknowledgment)</strong>：用于优化TCP传输性能。当TCP在传输数据时，如传输<code>1 2 3 4</code>，假若<code>1</code>报文丢失而<code>2 3 4</code>报文顺利到达，TCP会重传<code>1 2 3 4</code>。那么<code>2 3 4</code>就重复传输了从而导致性能降低，使用SACK能使得接收方告诉发送方<code>2 3 4</code>已收到仅重传<code>1</code>即可。<br>  Linux可通过修改<strong><code>/proc/sys/net/ipv4/tcp_window_scaling</code></strong>启用或关闭SACK。</li>
</ul>
</li>
<li><strong>数据</strong>：TCP的<code>数据</code>部分是可选的，既TCP段是可以没有数据的，如三次握手的TCP段就没有<code>数据</code>。</li>
</ul>
<h3 id="TCP连接状态"><strong>TCP连接状态</strong></h3><p>&emsp;TCP是面向连接的，所以在开始传输数据前需要建立连接。而这个建立连接并非是在发送端和接收端创建一个专属的链路，只是发送端和接受端双方来维护一个连接状态，从而使得网络存在一个连接一样。TCP连接状态十分重要，<strong>建立连接(三次握手)</strong>以及<strong>释放连接(四次挥手)</strong>的详细过程如下图所示(<a href="http://coolshell.cn/articles/11564.html" target="_blank" rel="external">图片来源</a>)</p>
<p><center><br><img src="http://7xk64o.com1.z0.glb.clouddn.com/tcp-open-close.jpeg" alt="tcp-open-close"><br></center></p>
<ul>
<li>当上一次收到的包是<code>SYN</code>或<code>FIN</code>时，此次发送ACK的<code>确认序号</code>为上次收到<code>SYN</code>或<code>FIN</code>包的<strong><code>序号</code>+1</strong>。如图中第一次握手时，Client发送<code>SYN seq=x</code>。当Server收到此<code>SYN</code>包后需要回一个确认ACK包，Server判断由于上次收到的是一个<code>SYN</code>包，所以回复<code>ACK</code>包的<code>确认序号</code>为上次<code>SYN</code>包中的<strong><code>序号</code>+1</strong>既<code>x+1</code></li>
<li>通常在第一、二次握手的<code>SYN</code>包中，<code>TCP首部</code>的<code>选项</code>都会带有<strong><code>MSS</code></strong>选项，分别告诉对方自己的最长报文大小是多少，然后协商用MSS小的为准进行传输。</li>
<li>TCP三次握手其中一个很重要的作用是确定双方的初始化<code>序号</code>，既图中的<strong><code>x</code></strong>及<strong><code>y</code></strong>。借助此<code>序号</code>保证应用层接收数据时不会乱序问题。</li>
<li>四次挥手，其实是两次的<code>FIN+ACK</code>。因为TCP是全双工的，所以当要断开连接时，Client——&gt;Server方向需要一个<code>FIN</code>，Server——&gt;Client方向也需要一个<code>FIN</code></li>
<li>当Client和Server同时断开，既同时发送<code>FIN</code>给对方时，TCP状态则不同于上图，Client和Server的状态都是<code>FIN_WAIT_1——&gt;CLOSING(收到对方的Fin)——&gt;TIME_WAIT</code></li>
<li>在建立连接时，若其中一方发出<code>SYN</code>后对方没有响应，则发送<code>SYN</code>的一方会尝试超时重传。重传采用的是一种称之为<strong>指数退避</strong>的策略，既重传的时间间隔为2的N次幂<code>2^N</code>。第一次重传时间间隔<code>2^0=1</code>(1秒后没收到ACK回应则重传)，第二次重传时间间隔<code>2^1=2</code>(第一次重传后2秒没有收到ACK回应则重传)，第三次重传时间间隔<code>2^2=4</code>(第二次重传后4秒没有收到ACK回应则重传)。至于会重传多少次则根据每个设备不同而不同，Linux可通过<strong><code>/proc/sys/net/ipv4/tcp_syn_retries</code></strong>调节。</li>
<li>TIME_WAIT状态也被称之为<strong>2MSL等待状态</strong>(Maximum Segment Lifetime)，既TIME_WAIT状态要持续2<em>MSL秒才能到CLOSED状态。之所以要等待2</em>MSL秒有两个主要原因：<ul>
<li>Client发送的最后一个<code>ACK</code>有可能丢失，需要给Server足够的时间重传<code>FIN</code>，一个<code>ACK</code>和一个<code>FIN</code>正好是2个MSL</li>
<li>确保有足够时间使得该连接(src_ip, src_port, dst_ip, dst_port)不能被再次使用，假若不等待2MSL再释放，该连接(src_ip, src_port, dst_ip, dst_port)立马被新的程序所使用，由于网络存在延时上一次连接的数据报在新连接建立后才到达目的端，那么上次连接的数据将会和新连接混淆。</li>
</ul>
</li>
<li>Linux内核中有很多专门针对TCP状态进行调整优化的选项，大多在<strong><code>/proc/sys/net/ipv4/</code></strong>目录下，其中各选项参数涉及复杂改天专门写一篇博客记录。</li>
<li><code>RST</code>复位报文，在TCP首部FLAG字段中有一个<code>RST</code>复位字段，当报文发往基准的连接出现错误时，TCP就会发送一个复位报文。复位报文可以用来释放一个TCP连接，这种称之为<strong>异常释放</strong>(正常的释放都通过发送<code>FIN</code>释放TCP连接的)，正常释放会待双方数据都发送完毕后关闭，而异常释放则会丢弃待发送的数据。</li>
</ul>
<h3 id="TCP流量控制"><strong>TCP流量控制</strong></h3><p>&emsp;TCP需要提供可靠的数据传输服务，那么就必须根据网络的实际情况及接受方数据的处理能力进行发送数据的调整，通过流量控制调整发送速率避免引起网络拥塞导致丢包。TCP是通过<strong>滑动窗口</strong>进行流量控制。</p>
<h4 id="滑动窗口">滑动窗口</h4><p>&emsp;在<code>TCP首部</code>有<code>窗口大小</code>字段，该字段是告诉对方自己的缓冲区还能接受多少数据，发送方根据接收方窗口的大小调整发送速率，防止发送方发送数据过快过多导致接收方缓冲区被占满无法接受处理新的数据。一般我们称接收方缓冲区空间大小的窗口为<strong>通告窗口</strong>。下面通过一个实例来了解TCP是如何利用滑动窗口来实现流量控制的<br><img src="http://7xk64o.com1.z0.glb.clouddn.com/tcp-slide-window.jpg" alt="tcp-slide-window"><br>&emsp;如上图所示，图中大致可分为三部分，框框即为<strong>滑动窗口</strong>：</p>
<ul>
<li><code>1-3</code>部分：发送并已收到<code>ACK</code>确认。这部分为已经成功传输的数据</li>
<li><code>4-9</code>部分：此部分为在<code>滑动窗口</code>中的数据，如图所示目前窗口大小为<strong><code>6</code></strong>。其中又可细分为两部分：<ul>
<li><code>4-6</code>：已发送，但未收到<code>ACK</code>确认</li>
<li><code>7-9</code>：未发送，但接受方缓存区仍有空间，发送方可尽快将此部分数据发给接收方</li>
</ul>
</li>
<li><code>10-11</code>部分：暂时不能发送，由于接受方缓存区空间不足而需要等待<code>滑动窗口</code>移动</li>
</ul>
<p>&emsp;下面来描述一下<code>滑动窗口</code>变化的一些过程：</p>
<ul>
<li>发送方发送完数据<code>1 2 3</code>后，接收方回复<code>ACK=4 window=6</code>，于是有了上图所示的情况，发送方准备再次发送<code>4</code>以后的数据。</li>
<li>发送方发送<code>4 5 6</code>数据(发送方并不一定要一次性发送所有窗口大小的数据)，此时滑动窗口大小为<code>6</code>，窗口中的数据为<code>4-9</code>，<code>4 5 6</code>数据已发送但未确认，<code>7 8 9</code>可选择性尽快发送。</li>
<li>接收方接受到<code>4 5 6</code>数据，根据自身缓冲区大小确定<strong>通告窗口</strong>大小并回复<code>ACK=7 window=X</code></li>
<li>发送方接受到<code>ACK=7 window=X</code>的确认包，确定<code>4 5 6</code>已成功传输，<code>滑动窗口左边缘</code>向右移动到达数据<code>7</code>的位置，根据<code>ACK=7 window=X</code>调整<code>滑动窗口</code>的大小<ul>
<li>若<code>ACK=7 window=3</code>，表明接收方确实已成功收到<code>4 5 6</code>数据但应用程序没有将数据从缓冲区读走，所以窗口大小为<code>3</code>(窗口缩小)。当前<code>滑动窗口</code>中的数据为<code>7 8 9</code></li>
<li>若<code>ACK=7 window=6</code>，表明接收方成功收到<code>4 5 6</code>数据并被应用程序从缓冲区读走，窗口大小保持不变为<code>6</code>。<code>滑动窗口右边缘</code>向右滑动<code>3</code>到达数据<code>12</code>的位置。当前<code>滑动窗口</code>中的数据为<code>7-12</code></li>
</ul>
</li>
<li>假定发送方收到的是<code>ACK=7 window=3</code>的确认包，当前<code>滑动窗口</code>的大小为<code>3</code>其中的数据只有<code>7 8 9</code>，此时发送方一次性将<code>7 8 9</code>全部发出</li>
<li>接收方收到<code>7 8 9</code>数据，缓冲区被填满。于是接收方回复<code>ACK=10 window=0</code>，告诉发送方自身的缓冲区已满不要再发送数据了</li>
<li>发送方收到<code>ACK=10 window=0</code>的确认包，确定<code>7 8 9</code>数据已成功传输，<code>滑动窗口左边缘</code>向右移动到达数据<code>10</code>的位置，发现接收方的窗口大小为<code>0</code>表示已不能再接受数据了，于是停止发送数据并等待。</li>
<li>如果接收方缓冲区中的数据被读走，缓冲区有剩余空间，那么接收方会再次发送一个<code>ACK</code>包通告自己的窗口大小<code>window=X</code>。发送方收到此确认包后调整<code>滑动窗口</code>大小再发送数据，如此重复。</li>
</ul>
<h4 id="零窗口_与_糊涂窗口">零窗口 与 糊涂窗口</h4><p>&emsp;TCP使用<code>滑动窗口</code>来进行流量控制需要注意<strong>零窗口</strong>与<strong>糊涂窗口</strong>：</p>
<ul>
<li><strong>零窗口</strong>：如上面所说，当发送方窗口大小为<code>0</code>且接收方回复的<code>window=0</code>表明无法再接收数据时，发送方会停止发送数据并等待。当接收方缓存区有空间后，接收方会回复一个<code>ACK</code>给发送方告诉发送方自己的窗口大小让发送方发送数据。但如果接收方发送的这个<code>ACK</code>包丢失了，那么发送方就以为接收方窗口一直为<code>0</code>就无止境的等待。<br>&emsp;&emsp;为防止此情况出现，TCP使用<strong>Zero Window Probe技术</strong>。当发送方窗口大小为<code>0</code>时，发送方会向接收方发送<strong>零窗口探测包</strong>，让接收方回复<code>ACK</code>通告它的窗口。有些设计会规定若三次探测包后接收方窗口大小依旧通告为<code>0</code>，则发送方会发一个<code>RST</code>复位报文中断连接。</li>
<li><strong>糊涂窗口综合症</strong>：如上图的例子，当接收方通告自身窗口<code>window=0</code>时，发送方就会停止发送数据并等待。假若过了一段时间，接收方缓冲区有空间但空间很小比如说只有<code>1</code>字节的空间，此时接收方通告自身窗口<code>window=1</code>而发送方为了传输这<code>1字节</code>的数据需要耗费<code>40字节</code>开销(IP首部20字节+TCP首部20字节)，这种花费大开销传输少数据的情况称之为<em>糊涂窗口综合症</em>。<br>&emsp;&emsp;为了解决<em>糊涂窗口综合症</em>，特意针对是发送方引起的还是接收方引起的糊涂窗口分为两种情况的解决方法：<ul>
<li>发送方引起的糊涂窗口：Nagle算法。1)等到 Window Size&gt;=MSS 或是 Data Size &gt;=MSS；2)等待时间或是超时200ms。两个条件满足其中一个就发数据，否则一直等待攒数据到满足条件为止。</li>
<li>接收方引起的糊涂窗口：接收方引起的糊涂窗口又可分为两种解决办法<ol>
<li>Clark解决方案：只要有数据到达就回复<code>ACK=X window=0</code>，通告自身窗口为<code>0</code>让发送方停止发送数据，直到接收方<strong>Window Size&gt;=MSS</strong>或<strong>缓冲区有一半空间</strong></li>
<li>延迟确认：当有数据到达时不立即回复<code>ACK</code>，等待缓冲区有足够空间为止，为防止发送方超时重传，延时不能超过500毫秒</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="TCP重传机制"><strong>TCP重传机制</strong></h3><p>&emsp;TCP是一个可靠的传输协议，为了保证数据成功到达接收方就必须有数据丢失后的重传机制，因为1)数据可能在传输过程中丢失，2)即使接收方成功接受到数据，当回复<code>ACK</code>时，这个<code>ACK</code>数据包也可能会丢失。<br>&emsp;TCP重传机制是通过在发送数据时设置<strong>定时器</strong>来解决丢包问题，当<code>定时器</code>溢出时仍没有收到<code>ACK</code>确认，TCP则任务该数据已经丢失变回重新传输该数据。TCP重传机制的重点在于<strong>如何确定超时时间</strong>和<strong>如何确定重传频率</strong>。<br>&emsp;TCP重传机制的<strong>定时器</strong>可分为四种类型：</p>
<ul>
<li>重传定时器</li>
<li>坚持定时器</li>
<li>保活定时器</li>
<li>2MSL定时器</li>
</ul>
<h4 id="重传定时器">重传定时器</h4><p>&emsp;为了确认数据是否丢失或被丢弃而设定，是对数据<code>ACK</code>确认包等待的时间。当TCP发送数据时，就创建针对该数据的<em>重传定时器</em>。若定时器超时前收到<code>ACK</code>确认包，则撤消<em>重传定时器</em>；若定时器超时后还没有收到<code>ACK</code>确认包，则重传该数据，并将<em>重传定时器</em>复位重新计时。<br>&emsp;如果重传失败，TCP会尝试多次重传，至于重传多少次后放弃则不同系统设计不同，Linux系统与<code>/proc/sys/net/ipv4/tcp_retries1</code> <code>/proc/sys/net/ipv4/tcp_retries2</code>有关，关于这两个选项参数更详细内容请点击<a href="https://www.kernel.org/doc/Documentation/networking/ip-sysctl.txt" target="_blank" rel="external">这里</a><br>&emsp;TCP多次重传的间隔并不都是一样的，TCP重传间隔采用<strong>指数退避(exponential backoff)</strong>策略，既两次重传时间间隔是一个倍乘关系(每次增加1倍)。如书中的例子重传时间间隔为<code>1 3 6 12 24 48 64 64 64 64...</code>；Linux下可能是这样<code>1 2 4 8 16 32 64 64*8</code>(<code>tcp_retries2</code>默认为<code>15</code>)。</p>
<h4 id="坚持定时器">坚持定时器</h4><p>&emsp;其实<code>坚持定时器</code>在<strong>零窗口</strong>的时候就已经提到过。当接收方的窗口大小为<code>0</code>时，会通告自身<code>通告窗口</code>已为<code>0</code>让发送方停止发送数据。等到接收方的缓冲区空闲<code>通告窗口</code>恢复后，接收方会发送<code>ACK</code>包通告自身窗口大小。因为TCP是不会对<code>ACK</code>包进行确认的，既这个带<code>通告窗口</code>大小的<code>ACK</code>包可能会丢失。假若此<code>ACK</code>包丢失，发送方认为接收方窗口仍为<code>0</code>继续等待，接收方认为自己已经通知发送方自己窗口大小而等待发送方的数据，双方都陷入等待当中。为了避免这个<code>ACK</code>包丢失而导致的双方等待，当接收方通告自身窗口大小为<code>0</code>时，发送方会启用<strong>坚持定时器</strong>，当<strong>坚持定时器</strong>超时后，发送方会主动发送<code>探测包</code>询问接收方的窗口大小。在计算<strong>坚持定时器</strong>时同样是使用<strong>指数退避</strong>，比如说首次坚持定时器超时时间为<code>1.5秒</code>，则后续超时时间为<code>3 6 12</code>。但不会一直增加下去<strong>坚持定时器</strong>总是在<strong><code>5~60</code></strong>之间，达到<code>60</code>后就一直以<code>60</code>为超时时间。</p>
<h4 id="保活定时器">保活定时器</h4><p>&emsp;其实TCP的保活定时器就是类似于HTTP的Keepalive功能，<strong>保活定时器</strong>是用于检测对方是否发送异常，如果有异常则及时关闭连接释放资源。当<strong>保活定时器</strong>超时后会检查连接是否空闲太久，若空闲时间超过设定时间则发送探测报文。通过对方是否响应、响应是否符合预期，来判断对方是否正常，若不正常则关闭连接释放资源。<br>&emsp;在Linux系统中是由<code>/proc/sys/net/ipv4/tcp_keepalive_time</code>、<code>/proc/sys/net/ipv4/tcp_keepalive_intvl</code>、<code>/proc/sys/net/ipv4/tcp_keepalive_probes</code>三个内核参数决定。</p>
<ul>
<li>/proc/sys/net/ipv4/tcp_keepalive_time<br>  最后一次数据交换到TCP发送第一个保活探测报文的时间，即允许连接空闲的时间，默认为7200s</li>
<li>/proc/sys/net/ipv4/tcp_keepalive_intvl<br>  保活探测报文的重传时间，默认为75s</li>
<li>/proc/sys/net/ipv4/tcp_keepalive_probes<br>  保活探测报文的发送次数，默认为9次</li>
</ul>
<p>&emsp;默认情况下Linux的一次完整的保活探测时间，既Linux下TCP认为一个连接出现异常后关闭的时间：<br>tcp_keepalive_time + tcp_keepalive_intvl × tcp_keepalive_probes = <code>7200 + 75 × 9</code> = <code>7875</code></p>
<h4 id="2MSL定时器">2MSL定时器</h4><p>&emsp;TCP的<code>TIME_WAIT状态</code>也称之为<strong><code>2MSL等待状态</code></strong>，之前的章节也已说过。TCP连接的一端发起主动关闭，在四次挥手主动关闭方发送完最后一个<code>ACK</code>包后既进入<code>TIME_WAIT</code>状态，必须等待<strong><code>2MSL</code></strong>的时间后才能释放该TCP连接。之所以必须等待<code>2MSL</code>时间主要有以下两个原因：</p>
<ol>
<li>给被动关闭方重传<code>FIN</code>包的机会。主动关闭方发送的最后一个<code>ACK</code>包有可能会丢失，假若该最后一个<code>ACK</code>包丢失，被动关闭方的<code>重传定时器</code>超时后仍没有收到该<code>ACK</code>包就会重传之前的<code>FIN</code>。假若主动关闭方在发送完最后一个<code>ACK</code>后释放连接而此<code>ACK</code>丢失，就会导致被动关闭方处在<code>CLOSE_WAIT</code>状态，<code>重传定时器</code>不断超时、<code>FIN</code>指数退避不断重传，Linux系统中直到被动关闭方达到<code>tcp_retries2</code>次数后，TCP认为此连接出现问题才会释放该连接。</li>
<li>防止已失效连接的旧数据包出现在新连接上。TCP是根据四元组(src_ip,src_port,dst_ip,dst_port)唯一标识一个连接，数据包可能因为网络等原因延时到达，假若主动关闭方在发送最后一个<code>ACK</code>后立刻释放连接使得原先的端口可以被使用，当应用程序使用原先被释放的端口新建了一个TCP连接而旧连接的数据延时到达，这样就会造成数据混淆。</li>
</ol>
<h4 id="超时重传_与_快速重传">超时重传 与 快速重传</h4><p>&emsp;介绍完四个定时器后，接下来看看TCP常见的两种重传机制——<strong>超时重传</strong>、<strong>快速重传</strong></p>
<ul>
<li><strong>超时重传</strong>：超时重传机制利用到的就是<code>重传定时器</code>，当<code>重传定时器</code>超时后仍没有收到<code>ACK</code>确认则认为该数据包已经丢失，发送方会重传该数据包并将<code>重传定时器</code>复位重新计算。至于<code>重传定时器</code>的<strong>*超时时间</strong>则是由<strong>Jcobson/Karels 算法</strong>计算而得。</li>
<li><strong>快速重传</strong>：由于<code>超时重传</code>是以时间作为驱动，需要等待<strong>timeout</strong>后才进行重传。为了更快的得知数据是否已经丢失，TCP还会使用<strong>快速重传</strong>机制。<strong>快速重传</strong>是以数据为驱动的，如果发送方<strong>连续</strong>收到<strong>3次</strong>相同的<strong>ACK</strong>，则认为数据包已经丢失需要重传。<br>  &emsp;比如说发送方发送<code>1 2 3 4 5</code>数据，但<code>2</code>丢失了<code>3 4 5</code>成功到达，则<code>3 4 5</code>到达时接收方回复的都是<code>ACK=2</code>。发送方收到三个重复的ACK则知道<code>2</code>已丢失需要重传。</li>
</ul>
<p>&emsp;所以只要是<code>重传定时器</code>超时或收到<code>重复ACK</code>，TCP则会认为数据丢失需要重传数据。</p>
<h3 id="TCP拥塞控制"><strong>TCP拥塞控制</strong></h3><p>&emsp;TCP流量控制主要是针对发送端和接收端进行，而TCP拥塞控制则是对其中的网络情况进行控制。试想一下，当网络负载严重导致网络拥塞，进而使得数据丢失或延时到达，假若TCP不加控制就超时重传数据，那便会加重网络负载致使恶性循环直至整个网络瘫痪。为了避免此情况出现，TCP拥塞控制的主要实现方法有以下四种：</p>
<ul>
<li>慢启动</li>
<li>拥塞避免</li>
<li>快速重传</li>
<li>快速恢复</li>
</ul>
<h4 id="慢启动">慢启动</h4><p>&emsp;慢启动，既当刚刚需要发送数据时，不是一下便发送大流量数据而是一点点的进行提速。<br>&emsp;慢启动为TCP的发送方定义了一个窗口——<strong>拥塞窗口(Congestion Window)</strong>，简称<strong>cwnd</strong>，拥塞窗口表明发送方一次可以发送多少报文段，一般cwnd是根据MSS而定，每收到一个<code>ACK</code>则<code>cwnd=cwnd+cwnd</code>。<br>&emsp;慢启动理想状态的过程如下所示()：</p>
<ul>
<li>TCP三次握手建立连接后，<strong>cwnd=1</strong>，表明可以发送一个MSS大小的数据。假定MSS=1024，cwnd=1则可发送<code>1024(1)</code>大小的数据</li>
<li>当收到<code>ACK</code>后，<strong>cwnd=1+1</strong>，表明可以发送两个MSS大小的数据。cwnd=2可发送<code>2048(2)</code>大小的数据</li>
<li>当收到cwnd=2时发送数据的<code>ACK</code>后，<strong>cwnd=2+2</strong>，表明可以发送四个MSS大小的数据。cwnd=4可发送<code>4096(4)</code>大小的数据</li>
<li>当收到cwnd=4时发送数据的<code>ACK</code>后，<strong>cwnd=4+4</strong>，表明可以发送八个MSS大小的数据。cwnd=8可发送<code>8192(8)</code>大小的数据</li>
<li>cwnd呈指数增长。但并不会无限增长下去，当拥塞窗口&lt;通告窗口时，发送拥塞窗口大小数据;但当拥塞窗口&gt;通告窗口时，只能发送通告窗口大小数据</li>
</ul>
<h4 id="拥塞避免_快速重传_快速恢复">拥塞避免 快速重传 快速恢复</h4><p>&emsp;TCP对于拥塞避免有一套复杂的拥塞避免算法，在此只能简要的描述TCP是如何实现拥塞避免的。<br>&emsp;TCP的拥塞避免算法通常都是与<strong>慢启动</strong>一起作用，那么每个TCP连接就会维持两个变量——<strong><code>cwnd</code></strong>(拥塞窗口Congestion Window)、<strong><code>ssthresh</code></strong>(慢启动门限slow start threshold)，TCP拥塞避免大致过程如下：</p>
<ul>
<li>当TCP完成三次握手后，会给该连接设定两个变量<strong><code>cwnd</code></strong>和<strong>ssthresh</strong>。<strong><code>cwnd</code></strong>初始化值为<code>1个报文段</code>(该值通常为MSS-40[IP+TCP header])，<strong><code>ssthresh</code></strong>初始化值一般为<code>65535字节</code></li>
<li>首先TCP使用<strong>慢启动</strong>，<strong><code>cwnd</code></strong>指数增长，但<strong><code>cwnd</code></strong>并不会无限制增长，当<strong><code>cwnd</code></strong><code>&gt;</code>接收方的<strong>通告窗口</strong>时以<strong>通告窗口</strong>为标准。<strong>拥塞窗口</strong>是发送方的流量控制、<strong>通告窗口</strong>是接收方的流量控制。当<em>拥塞窗口</em> <code>&lt;</code> <em>通告窗口</em>时，由<em>拥塞窗口</em>(发送方)控制发送速率(既为慢启动)；当<em>拥塞窗口</em> <code>&gt;</code> <em>通告窗口</em>时，由<em>通告窗口</em>(接收方)控制发送速率。</li>
<li>TCP在两种情况下会认为数据包已经丢失(详看重传机制)——<strong>超时</strong> 或 <strong>收到3个重复ACK</strong>，TCP对这两种情况处理又所有不同：<ol>
<li>假若在<strong>慢启动</strong>过程中出现<strong>超时</strong><ul>
<li>出现超时后则需要重新设置<strong>ssthresh</strong>。数据包超时后<strong>慢启动门限ssthresh</strong>会被设置为当前<strong>拥塞窗口</strong>的一半，既<strong><code>ssthresh=cwnd/2</code></strong></li>
<li><strong><code>cwnd</code></strong>重新初始化，既<code>cwnd</code>=1。重新开始慢启动过程</li>
<li>重新慢启动后，<code>cwnd</code>指数增长。当<code>cwnd</code> <code>=</code> <code>ssthresh</code>时，停止<strong>慢启动</strong>进入<strong>拥塞避免算法</strong></li>
<li>进入<strong>拥塞避免算法</strong>后，每收到一个<code>ACK</code>不再像慢启动那样<code>+1cwnd</code>而是<code>+1/cwnd</code>，既<code>cwnd = cwnd + 1/cwnd</code></li>
</ul>
</li>
<li>假若在<strong>慢启动</strong>过程中<strong>收到重复<code>ACK</code></strong><ul>
<li>收到<code>3</code>个重复<code>ACK</code>后需要重新设置<strong>ssthresh</strong>，<strong><code>ssthresh=cwnd/2</code></strong>。进入<strong>快速恢复算法</strong></li>
<li>在<strong>快速恢复算法</strong>中，<code>cwnd</code>会被重新计算——<strong><code>cwnd = ssthresh(既上面的cwnd/2) + 3*MSS(3个ACK)</code></strong> </li>
<li>启用<strong>快速重传</strong>重新丢失的数据包</li>
<li>如果在收到重复<code>ACK</code>则<code>cwnd=cwnd+1MSS</code></li>
<li>如果收到新<code>ACK</code>则<code>cwnd=ssthresh</code>，然后进入<strong>拥塞避免算法</strong>(既每收到一个<code>ACK</code>则<code>cwnd=cwnd+1/cwnd</code>)</li>
</ul>
</li>
</ol>
</li>
</ul>
<p>&emsp;&emsp;&emsp;&emsp;超时：<code>慢启动</code>——&gt;<code>超时</code>——&gt;<code>ssthresh=cwnd/2 重新慢启动</code>——&gt;<code>cwnd=ssthresh</code>——&gt;<code>拥塞避免算法(cwnd=cwnd+1/cwnd)</code><br>&emsp;&emsp;&emsp;&emsp;重复ACK：<code>慢启动</code>——&gt;<code>3重复ACK</code>——&gt;<code>快速恢复算法+快速重传 ssthresh=cwnd/2</code>——&gt;<code>cwnd=ssthresh</code>——&gt;<code>拥塞避免算法(cwnd=cwnd+1/cwnd)</code><br>&emsp;&emsp;&emsp;&emsp;<strong>当<code>cwnd</code> <code>&lt;=</code> <code>ssthresh</code>时，慢启动(指数增长)；当<code>cwnd</code> <code>&gt;</code> <code>ssthresh</code>，拥塞避免算法(线性增长)</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="TCP传输控制协议"><strong>TCP传输控制协议</strong></h2><p>&emsp;TCP工作在传输层，提供一种面向连接的、可靠的字节流服务。面向连接表示在进行数据传输之前必须先建立一个<strong>TCP连接</strong>，这就有了之后要]]>
    </summary>
    
      <category term="TCP/IP" scheme="http://yoursite.com/tags/TCP-IP/"/>
    
      <category term="TCP/IP" scheme="http://yoursite.com/categories/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重读《TCP/IP详解卷一》之网络层]]></title>
    <link href="http://yoursite.com/2015/07/04/review-tcp-ip-2/"/>
    <id>http://yoursite.com/2015/07/04/review-tcp-ip-2/</id>
    <published>2015-07-04T14:25:15.000Z</published>
    <updated>2016-03-04T15:15:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="IP网际协议"><strong>IP网际协议</strong></h2><p>&emsp;IP提供的是不可靠、无连接的数据报传输服务。</p>
<ul>
<li>不可靠：不能保证IP数据报能成功到达目的地，既可能<strong>丢包</strong>。可靠性需要由上层提供，如TCP的超时重传机制等。IP有一个简单的错误处理办法，当IP数据报被丢弃后，会发送ICMP消息告诉发送端错误情况。</li>
<li>无连接：不维护任何后续数据报的状态信息。每个数据报都是相互独立的，独立进行路由选择，到达目的地的顺序和发送顺序可以不同。虽然IP是无连接的，但TCP是面向连接的。<br>举个例子，发送端TCP有四个数据包<code>0 1 2 3</code>，传给网络层，IP封装IP头部后将四个数据包发送出去；由于网络原因产生丢包或延时到达，在接收端只收到<code>0 1 3</code>三个数据包，由于IP是无连接的所以它不需要等<code>2</code>号包的到来就直接将三个数据包传给TCP。由于TCP是面向连接的，所以必须等到<code>2</code>号包的到达组装成完整的数据包后才能传入应用层。</li>
</ul>
<h2 id="IP头部分析"><strong>IP头部分析</strong></h2><p>&emsp;IP头部如图所示：</p>
<p><center><br><img src="http://7xk64o.com1.z0.glb.clouddn.com/ip-header.png" alt="ip-header"><br></center><br>&emsp;普通的IP头部长<strong>20字节</strong>(不包含选项字段)</p>
<ul>
<li><strong>版本(4位)</strong>：常说的IPv4或IPv6</li>
<li><strong>首部长度(4位)</strong>：IP头部最长为<strong>60字节</strong>(一般为<strong>20字节</strong>)。用4位表示长度，那么最大为<code>1111</code>转换成十进制为<code>15</code>，那么最大则为<code>15*4字节=60字节</code>。<br>  &emsp;需要注意的是：4个位里面，<code>0001</code>代表的不是数值1而是首部的1个单位长度，1个单位长度为32bit=4字节(如图所示一行为32bit)。所以首部长度表示首部占32bit字的数目，既首部长度能占多少行(每行32bit)。故一般IP头部长<strong>20字节</strong>，首部长度字段的值为<strong><code>5</code></strong>。</li>
<li><strong>服务类型TOS(8位)</strong>：TOS(8bit)=优先权子字段(3bit[已弃用])+TOS子字段(4bit)+保留位(1bit)，服务类型字段主要可用在QOS上。<br>  &emsp;4bitTOS子字段分别代表：<code>1000</code>——最小延时、<code>0100</code>——最大吞吐量、<code>0010</code>——最高可靠性、<code>0001</code>——最小费用</li>
<li><strong>总长度(16位)</strong>：指定整个IP数据报的长度(IP头部+数据)，单位为<strong>字节</strong>。由于<code>总长度</code>字段占<code>16</code>位，所以IP数据报的最长总长度为<code>2^16</code>既<code>65535</code>字节。</li>
<li><strong>标识(16位)</strong>：唯一标识每个数据报。通常情况下每发一个数据报该字段加1。<br>  &emsp;在IP分片的时候，比如说一个包该标识字段为<code>1</code>，此包过大需要被分片，分成三个小包<code>1-1</code>、<code>1-2</code>、<code>1-3</code>，这三个小包的标识字段依旧是<code>1</code>，而后面的<code>1、2、3</code>则和接下来的字段相关。</li>
<li><strong>标志(3位)</strong>：目前只用到2bit，第3位保留。<br>  &emsp;标志(3bit)=0+DF+MF    &emsp;&emsp;&emsp;&emsp;DF——Don’t Fragment    &emsp;&emsp;&emsp;&emsp;MF——More Fragment<br>  &emsp;<code>010</code>DF=1表示不允许分片(DF=1，若包过大则直接丢弃并用ICMP报文通知源端相关情况)；<code>DF=0</code>则表示允许分片<br>  &emsp;<code>001</code>MF=1表示后续还有分片；MF=0表示此分片包为若干分片的最后一个</li>
<li><strong>片偏移(13位)</strong>：分片在原数据报中的相对位置。相对于原数据报起点，该分片从何处开始。片偏移都是以<strong>8字节</strong>为偏移单位，既除最后一片外，其余所有分片长度皆为8字节的整数倍。由于IP是无连接的，分片后的数据报可能乱序到达所以需要用片偏移对分片进行正确重组。<br>  &emsp;举例说明：一个数据报被分成<code>1 2 3</code>三个分片，<code>1</code>分片的长度80字节、<code>2</code>分片长度64字节、<code>3</code>分片长度10字节。<br>  &emsp;<code>1</code>分片的片偏移为<code>0</code><br>  &emsp;<code>2</code>分片的片偏移为<code>80</code>，在原数据报中，<code>2</code>分片从第<em>80</em>字节开始<br>  &emsp;<code>3</code>分片的片偏移为<code>144</code>(0+80+64)</li>
<li><strong>TTL生存时间(8位)</strong>：设置数据报可经过的最多路由器数。经过一个路由器，TTL减一。当TTL=0时，数据报被丢弃并发送ICMP报文通知源端。<br>  &emsp;TTL占8bit，所以TTL最大值为<code>2^8</code>既<code>255</code>。TTL设置的意义在于防止网络出现环路时，数据报被无限的传递。</li>
<li><strong>协议(8位)</strong>：表明上一层传输层用的协议类型。常见的协议及字段值如下所示：<br>  &emsp;TCP——6、UDP——17、ICMP——1、EGP——8、IGP——9、OSPF——89</li>
<li><strong>首部检验和(16位)</strong>：IP头部的检验和</li>
<li><strong>源地址(32位)</strong></li>
<li><strong>目标地址(32位)</strong></li>
<li><strong>选项</strong>：由于IP头部最大位<code>60字节</code>，以上的基础头部占用<code>20字节</code>，所以选项最多只有<code>40字节</code><br>  &emsp;选项位是一个可变长的字段，目前有如下这些定义：<ul>
<li>安全和处理限制</li>
<li>路径记录(记录每跳路由的IP)</li>
<li>时间戳</li>
<li>宽松源站路由</li>
<li>严格源站路由</li>
</ul>
</li>
</ul>
<h2 id="IP路由选择"><strong>IP路由选择</strong></h2><p>&emsp;IP路由选择是<strong>逐跳</strong>进行的，所有的IP路由选择只为数据传输提供下一站路由的IP地址。IP路由选择需要注意以下两点：</p>
<ul>
<li>数据报中的<strong>目的IP</strong>始终是不变的(除非在IP头部<code>选项</code>中使用<code>源站路由</code>，目的IP才可能会被改变)。</li>
<li>链路层的<strong>目的MAC</strong>始终都是在改变的(非直连路由)，并且是下一跳路由的MAC地址。(下一跳路由的MAC通过ARP协议获得)</li>
</ul>
<p>&emsp;IP路由选择的大致过程如下：</p>
<ol>
<li>检查IP头部的<code>TTL</code>值，若<code>TTL=0</code>则丢弃该数据报并发送ICMP报文通知源端</li>
<li>搜索路由表，优先匹配主机，寻找能与目的IP完全匹配的条目。</li>
<li>搜索路由表，匹配相同子网的条目，寻找能与目的网络号匹配的条目。</li>
<li>搜索路由表，寻找默认路由条目。</li>
<li>搜索路由表后都没有找到以上三种相关的条目，丢弃该数据报。</li>
</ol>
<p>&emsp;路由选择的顺序：<code>匹配主机——&gt;匹配子网——&gt;默认路由</code></p>
<p>&emsp;IP路由根据连接情况可粗略分成两类：<code>直连路由</code>和<code>非直连路由</code></p>
<ul>
<li>直连路由的寻址<br>  源IP、目的IP、源MAC、目的MAC由始到终都是固定的，数据报不经过路由器</li>
<li>非直连路由<br>  <code>源IP</code>、<code>源MAC</code>、<code>目的IP</code>都是不变的(IP头部非源站路由)，但其中需要经过若干个路由器，每经过一次IP路由选择得出<code>下一跳路由</code>后，<code>目的MAC</code>就被修改成该<code>下一跳路由</code>接口的MAC</li>
</ul>
<p>&emsp;直连路由的目的MAC就是目标主机的MAC，而非直连路由的目的MAC是经路由选择后下一跳接口的MAC</p>
<h2 id="ARP"><strong>ARP</strong></h2><p>&emsp;ARP是为IP地址到对应的硬件地址(以太网中既MAC地址)之间提供动态映射的一种协议。</p>
<h3 id="实例分析"><strong>实例分析</strong></h3><p>&emsp;书中举例一个FTP的例子，可以从这个例子中全局的理解TCP/IP一个整体的过程，例子图如下：</p>
<p><center><br><img src="http://7xk64o.com1.z0.glb.clouddn.com/arp_example.png" alt="arp_example"><br></center><br><code>ftp bsdi</code></p>
<ol>
<li>应用层：FTP应用程序需要获取FTP服务器的IP地址，FTP应用程序发现输入的是一个域名于是调用DNS域名解析将域名解析成32bit的IP地址并将数据传给传输层</li>
<li>传输层：由于FTP是使用TCP连接的，所以请求TCP进行三次握手建立连接，TCP将握手包封装好后传给网络层</li>
<li>网络层：如果目的IP是直连网络那么数据报可直接送给目的主机；如果目的IP是非直连网络则按<code>IP路由选择</code>获取下一跳地址并将数据报转发。</li>
<li>链路层(以太网)：有了目的IP后需要知道目的IP对应的MAC(直连是目的主机的MAC/非直连是下一跳的MAC)才能将数据报真正的传给目的主机。这就需要ARP做<code>IP——&gt;MAC</code>的解析。</li>
<li>ARP解析过程<ul>
<li>ARP发送一个二层的<strong>广播</strong>既<code>ARP广播请求包</code>，ARP广播包里的<strong>目的MAC</strong>为<code>FF:FF:FF:FF:FF:FF</code>全F，全网广播询问<code>目的IPxxx.xxx.x.x对应的MAC是多少</code>。本网段的所有主机都会收到此ARP广播包，然后根据广播包中的目的IP是否为自己的IP做出判断。如果目的IP不是自己的IP则丢弃该ARP广播包。</li>
<li>目的主机发现该ARP广播包中的目的IP是自己的IP，于是向源IP发送一个<strong>单播</strong>的<code>ARP响应包</code>。该ARP响应包中包含了自己的MAC地址</li>
</ul>
</li>
<li><ul>
<li>如果是直连网络的话，源IP、源MAC、目的IP和目的MAC都齐全了并且建立连接后即可传输数据(数据的传输其实还是上述的过程)</li>
<li>如果是非直连网络的话，目的MAC就是下一跳的MAC，将数据报转发给下一跳的设备，经过不断的IP路由选择，数据报最终到达目的主机(期间不断重复3/4/5步骤)。在非直连网络中，数据报中的<code>目的IP</code>始终是不变的(非源站路由)而<code>目的MAC</code>总是在变换是下一跳设备接口的MAC，IP地址用于逻辑选路，MAC地址才是真正决定数据报要传到哪个设备或主机上。</li>
</ul>
</li>
</ol>
<p>&emsp;假若ARP解析失败，无法获取目的IP的MAC，那么网络层封装的IP包是不会从主机接口发出去的。<br>&emsp;在收到<code>ARP应答</code>的时候，操作系统或网络设备等都会将查询到的<code>IP-MAC</code>对应关系缓存起来，所以一般情况下系统会维护一张<strong>ARP表</strong>以供快速查询。Linux系统可以通过命令<code>arp -a</code>或<code>cat /proc/net/arp</code>查看缓存的arp记录</p>
<h3 id="ARP包结构"><strong>ARP包结构</strong></h3><p>&emsp;在<a href="">上一篇博客</a>中讲到以太网帧的结构，其中<code>类型</code>字段用来表示上层所用的协议，<strong><code>0x0806</code></strong>表示的是<code>ARP</code>，具体以太网帧结构如下：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">以太网帧结构：</span><br><span class="line">  | 目的地址<span class="comment">(6)</span> | 源地址<span class="comment">(6)</span> | <span class="number">0</span>x<span class="number">0806</span> | ARP请求/应答数据<span class="comment">(28)</span> + PAD填充字节<span class="comment">(18)</span> | CRC<span class="comment">(4)</span> |</span><br></pre></td></tr></table></figure></p>
<p>&emsp;其中以太网帧的<code>数据</code>部分是由<code>ARP请求/应答数据(28) + PAD填充字节(18)</code>组成，接下来要分析的是<code>ARP请求/应答数据(28)</code>这<code>28字节</code>的结构，具体的分组结构如下所示：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ARP包结构：</span><br><span class="line">  | 硬件类型<span class="comment">(2)</span> | 协议类型<span class="comment">(2)</span> | 硬件地址长度<span class="comment">(1)</span> | 协议地址长度<span class="comment">(1)</span> | 操作<span class="comment">(2)</span> | 源MAC<span class="comment">(6)</span> | 源IP<span class="comment">(4)</span> | 目的MAC<span class="comment">(6)</span> | 目的IP<span class="comment">(4)</span> |</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>硬件类型(2)</strong>：表示硬件地址的类型。<code>1</code>表示以太网地址</li>
<li><strong>协议类型(2)</strong>：此字段和以太网帧头部的<code>类型</code>字段是一样的。<code>0x0800</code>——IP。<code>协议类型</code>和<code>硬件类型</code>可以表面ARP是在做<code>IP——MAC</code>之间的映射。</li>
<li><strong>硬件地址长度(1)</strong>： 表明硬件地址的长度。以太网硬件地址(MAC)该字段值为<code>6</code>，表明以太网硬件地址(MAC)是占<code>6字节</code>/<code>48位</code>。</li>
<li><strong>协议地址长度(1)</strong>：表明协议地址的长度。IP协议地址长度该字段值为<code>4</code>，表明IP协议地址占<code>4字节</code>/<code>32位</code></li>
<li><strong>操作(2)</strong>：表明操作的类型。以太网帧的<code>类型</code>字段对于ARP请求/应答都是<code>0x0806</code>，所以需要通过ARP分组结构中的<code>操作</code>字段区分ARP请求/ARP应答<ul>
<li>1——ARP请求</li>
<li>2——ARP应答</li>
<li>3——RARP请求</li>
<li>4——RARP应答</li>
</ul>
</li>
<li><strong>源MAC(6)</strong>：源端的MAC地址</li>
<li><strong>源IP(4)</strong>：源端的IP地址</li>
<li><strong>目的MAC(6)</strong>：目的设备的MAC地址。该字段的值和<em>以太网帧头部的</em><code>目的地址</code>在<code>ARP请求</code>时是不同的(尽管它们都表示硬件地址，但所填的值不同)。<br>  &emsp;当是<code>ARP请求</code>的时候(<code>操作</code>字段为<code>1</code>)<ul>
<li>以太网帧头部的<code>目的地址(6)</code>字段值是<strong><code>FF:FF:FF:FF:FF</code></strong>(表明这是一个二层广播包，所有同网段的主机都会接收到该ARP请求包)</li>
<li>ARP分组结构的<code>目的MAC(6)</code>字段值是<strong><code>00:00:00:00:00:00</code></strong>(表明ARP不知道目的MAC是多少，需要目的主机将自身MAC填入该字段)</li>
</ul>
</li>
<li><strong>目的IP(4)</strong>：目的IP地址</li>
</ul>
<p>&emsp;所以包含ARP分组的完整以太网帧结构是这样的：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|目的地址<span class="comment">(6)</span>|源地址<span class="comment">(6)</span>|<span class="number">0</span>x<span class="number">0806</span>||  硬件类型<span class="comment">(2)</span>|协议类型<span class="comment">(2)</span>|硬件地址长度<span class="comment">(1)</span>|协议地址长度<span class="comment">(1)</span>|操作<span class="comment">(2)</span>|源MAC<span class="comment">(6)</span>|源IP<span class="comment">(4)</span>|目的MAC<span class="comment">(6)</span>|目的IP<span class="comment">(4)</span>  || + PAD填充字节<span class="comment">(18)</span>|CRC<span class="comment">(4)</span>|</span><br></pre></td></tr></table></figure></p>
<h3 id="代理ARP"><strong>代理ARP</strong></h3><p>&emsp;如果ARP请求是试图解析非本网络的一台主机，那么连接两个网络的路由器会代替目的主机应答该ARP请求，路由器将自身的接口MAC地址回应给源主机，此过程就称之为<code>代理ARP</code>或<code>委托ARP</code>。路由器其实是“欺骗”了源主机，ARP响应中的MAC地址并发真正目的主机的MAC地址而是与源主机相连的路由器接口的MAC，路由器让源主机误以为路由器是目的主机。因为ARP请求是一个<strong>二层的广播包</strong>，而路由器是隔离广播的，也就是说ARP请求广播包正常情况下是无法穿过路由器继续前进的，路由器知道如何到达目的主机(路由表有路由记录)，所以“欺骗”源主机并接收之后的数据报，将这些数据报<strong>转发</strong>出去。<br>&emsp;举例说明<strong>代理ARP</strong>，如下所示：<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PC-A<span class="comment">(192.168.1.1/mac-a)</span>--------------<span class="comment">(192.168.1.2/mac-r1)</span> <span class="number">1</span>——Router——<span class="number">2</span> <span class="comment">(10.1.1.1/mac-r2)</span>-------------------<span class="comment">(10.1.1.2/mac-b)</span>PC-B</span><br></pre></td></tr></table></figure></p>
<ul>
<li>当PC-A发送<code>ARP请求</code>查询<em>10.1.1.2对应的MAC地址是多少</em>，ARP请求的广播包到达Router——1接口(一般情况下广播包就只能到达Router——1接口，不会经由Router——2再发出去)</li>
<li>如果普通主机接收到非自身IP的ARP请求包时，都是做丢弃处理的。但Router开启了代理ARP的功能，查询自身路由表发现知道如何到达10.1.1.2</li>
<li>Router对PC-A的<code>ARP请求</code>做出回应，发送一个<code>ARP响应</code>给PC-A，此ARP响应包内的映射关系为<strong><code>10.1.1.2——mac-r1</code></strong>(但实际上10.1.1.2对应的MAC应该是mac-b才对)</li>
<li>PC-A接收到Router发送的<code>ARP响应</code>包，误以为<code>10.1.1.2</code>的MAC地址是<code>mac-r1</code>，于是将所有目的IP为<code>10.1.1.2</code>的数据都发到<code>Router——1</code>接口上。Router接收到数据后再转发给PC-B</li>
</ul>
<h3 id="免费ARP"><strong>免费ARP</strong></h3><p>&emsp;主机发送ARP请求查询IP对应的MAC，这个ARP请求就称之为<code>免费ARP</code>。免费ARP的作用主要有两个：</p>
<ul>
<li>通过免费ARP来确定IP是否被占用，是否有IP冲突的情况。主机在系统重启或网络服务重启的时候会发送免费ARP，询问自身IP对应的MAC是多少，当网络上有主机已经配置了相同的IP则会回应该免费ARP的询问，源主机接收到ARP回应就能确定该IP已经被使用。</li>
<li>利用免费ARP更新arp表缓存。当主机发送免费ARP广播请求包时，本网络的所有主机都接收到该免费ARP。当发现目的IP不是自身IP时，主机会将该免费ARP丢弃，但在丢弃前会读取该免费ARP包内的源IP及源MAC，若发现和本机arp缓存表不同则更新映射。</li>
</ul>
<h3 id="ICMP"><strong>ICMP</strong></h3><p>&emsp;ICMP主要用于差错报文及其他消息的传递。ICMP报文通常被网络层或传输层使用，常用于将差错报文返回给客户进程，因为IP是不可靠的会出现丢包的情况，出现丢包现象的设备一般都会通过ICMP发送ICMP报文给源端，告诉出错的原因和问题等。<br>&emsp;ICMP报文封装在IP数据报内部，IP头部里的<code>协议(8位)</code>字段值为<code>1</code>就表示后面接的是ICMP报文：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">| IP头部(20字节) | ICMP报文 |</span></span><br></pre></td></tr></table></figure></p>
<p>&emsp;ICMP报文的基本格式：<br><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">| 类型(<span class="number">8</span><span class="typename">bit</span>) | 代码(<span class="number">8</span><span class="typename">bit</span>) | 检验和(<span class="number">16</span><span class="typename">bit</span>) |</span><br><span class="line">| <span class="comment">-----------------------------------------------------|</span></span><br><span class="line">| 不同类型和代码的内容				 |</span><br></pre></td></tr></table></figure></p>
<p>&emsp;ICMP报文类型：<br>ICMP报文类型很多，但最常用的是<code>0 0 回显应答</code>、<code>8 0 请求回显</code>，这两个类型主要用在ping中。</p>
<p><center><br><img src="http://7xk64o.com1.z0.glb.clouddn.com/icmp-type.png" alt="icmp-type"><br></center><br>&emsp;ICMP差错报文必须包含该差错报文的<strong>IP首部(含<code>选项</code>)</strong>和IP首部后面的<strong>前8个字节</strong>，之所以要这样，是因为需要根据<strong>IP首部</strong>判断特定的<strong>协议</strong>、根据<strong>前8个字节</strong>判断用户进程(<strong>前8字节</strong>包含<strong>源端口</strong>和<strong>目标端口</strong>)<br>&emsp;以下情况不会产生ICMP差错报文，目的是为了防止广播风暴：</p>
<ul>
<li>ICMP差错报文，ICMP差错报文不会再产生差错报文来通知源端ICMP差错报文丢失(ICMP查询报文会产生ICMP差错报文)</li>
<li>目的地址为广播或多播的IP数据报</li>
<li>链路层广播的数据报</li>
<li>非IP分片的第一片，因为只有第一片分片才包含<strong>前8字节</strong>所需的源端口和目的端口</li>
<li>源地址不是单个主机的数据报，既源地址不能为全零、环回地址、广播地址和多播地址</li>
</ul>
<h2 id="IP路由"><strong>IP路由</strong></h2><p>&emsp;路由选路是IP最为重要的功能之一，系统会维护一张包含路由条目的路由表，通过查询路由表得出下一跳地址然后进行路由转发及选路。</p>
<h3 id="路由更新方式"><strong>路由更新方式</strong></h3><p>&emsp;路由表更新的方式有如下三种：</p>
<ul>
<li>路由守护进程，运行着动态路由协议的用户进程，比如OSPF守护进程、RIP守护进程。</li>
<li>route命令，可以通过route命令手动添加路由条目(静态路由就属于这种方式)。</li>
<li>ICMP重定向，当收到ICMP重定向报文时，路由表也会被更新。</li>
</ul>
<p>&emsp;除了更新路由表外，可以通过<code>netstat -nr</code>命令查看路由表中的路由条目，当查看路由表时会看到不同的标志(flag)：</p>
<ul>
<li>U 该路由可用</li>
<li>G 该路由是一个网关</li>
<li>H 该路由是一个主机路由(直接到主机，目的地址是一个完整的主机地址)</li>
<li>D 该路由是ICMP重定向报文创建的</li>
<li>M 该路由被ICMP重定向报文修改</li>
</ul>
<h3 id="路由原理"><strong>路由原理</strong></h3><p>&emsp;路由原理其实之前也讲过，就是搜索路由表的优先顺序：</p>
<ul>
<li>搜索匹配主机地址的路由</li>
<li>搜索匹配网络地址的路由</li>
<li>搜索默认路由</li>
</ul>
<h3 id="ICMP重定向"><strong>ICMP重定向</strong></h3><p>&emsp;当路由器检测到某台主机使用非最优路由的时候，可以通过向该主机发送ICMP重定向报文，请求改变该主机的路由。(ICMP重定向报文一般由路由器生成，针对主机使用而不是路由器)<br>&emsp;Linux系统中控制ICMP重定向的相关文件<code>/proc/sys/net/ipv4/conf/all/send_redirects</code>、<code>/proc/sys/net/ipv4/conf/default/send_redirects</code>、<code>/proc/sys/net/ipv4/conf/&lt;interface_device&gt;/send_redirects</code>。<strong><code>0</code></strong>为关闭，<strong><code>1</code></strong>为开启。<br>&emsp;ICMP重定向报文结构：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">————————————</span><br><span class="line"><span class="string">|类型 5|代码 0~3|检验和|</span></span><br><span class="line">————————————</span><br><span class="line"><span class="string">|应该使用的路由器IP地址|</span></span><br><span class="line">———————————————</span><br><span class="line"><span class="string">|IP首部+原IP首部后的前8个字节|</span></span><br><span class="line">———————————————</span><br></pre></td></tr></table></figure></p>
<ul>
<li>类型——5，表示是ICMP重定向(详见之前的表格)</li>
<li>代码——0~3，0——网络重定向、1——主机重定向、2——服务类型和网络重定向、3——服务类型和主机重定向</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="IP网际协议"><strong>IP网际协议</strong></h2><p>&emsp;IP提供的是不可靠、无连接的数据报传输服务。</p>
<ul>
<li>不可靠：不能保证IP数据报能成功到达目的地，既可能<strong>丢包</strong>。可靠性需要由]]>
    </summary>
    
      <category term="TCP/IP" scheme="http://yoursite.com/tags/TCP-IP/"/>
    
      <category term="TCP/IP" scheme="http://yoursite.com/categories/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[重读《TCP/IP详解卷一》之链路层]]></title>
    <link href="http://yoursite.com/2015/06/29/review-tcp-ip-1/"/>
    <id>http://yoursite.com/2015/06/29/review-tcp-ip-1/</id>
    <published>2015-06-29T14:42:43.000Z</published>
    <updated>2015-08-03T14:42:32.000Z</updated>
    <content type="html"><![CDATA[<h2 id="链路层主要目的"><strong>链路层主要目的</strong></h2><p>&emsp;TCP/IP支持多种链路层协议，不同的网络硬件设备使用不同链路层协议，如：以太网协议、令牌环、FDDI和PPP等。链路层主要有三个目的：</p>
<ul>
<li>为IP模块发送和接受IP数据报</li>
<li>为ARP模块发送ARP请求和接受ARP应答</li>
<li>为RARP模块发送RARP请求和接受RARP应答</li>
</ul>
<h2 id="以太网"><strong>以太网</strong></h2><p>&emsp;以太网是目前TCP/IP在局域网中最主要的技术，采用CSMA/CD(带冲突检测的载波侦听多路接入)接入方法，地址为48bit(既MAC地址)。然而以太网是几家公司联合发布的一个技术标准，后来IEEE发布802标准(802.3针对CSMA/CD网络)。但实际上目前局域网中绝大多数都是以太网包，802.3的包有使用但极少。<strong>以太网帧结构和802.3帧结构是完全不同的</strong>，以下我主要记录以太网包相关的内容。</p>
<h3 id="以太网帧结构"><strong>以太网帧结构</strong></h3><p>&emsp;以太网规定以太网帧中的<code>数据</code>长度在<strong><code>46~1500</code></strong>字节之间。最小不少于46字节，<strong>不足46字节的必须加入填充(PAD)字节</strong>；最大不得超过1500字节(1500既MTU)。所以一个正常的以太网帧长度应该在<strong>64~1518</strong>字节之间，由<code>帧头部+数据+帧尾校验</code>组成<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| 目的地址<span class="comment">(6)</span> | 源地址<span class="comment">(6)</span> | 类型<span class="comment">(2)</span> | 数据<span class="comment">(46~1500)</span> | CRC<span class="comment">(4)</span> |</span><br></pre></td></tr></table></figure></p>
<h3 id="以太网帧中的类型字段"><strong>以太网帧中的类型字段</strong></h3><p>&emsp;在以太网帧结构中有2字节的<code>类型</code>字段，其主要目的是为了标识上层协议类型。常见的有以下三种类型，更详细的类型参见<a href="https://en.wikipedia.org/wiki/EtherType#Examples" target="_blank" rel="external">这里</a></p>
<ul>
<li><p>IP协议——0x0800<br>  IP数据报在以太网帧中的类型字段以<code>0x0800</code>表示，数据部分大小依旧是<code>46~1500</code>字节</p>
  <figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| 目的地址<span class="comment">(6)</span> | 源地址<span class="comment">(6)</span> | <span class="number">0</span>x<span class="number">0800</span> | 数据<span class="comment">(46~1500)</span> | CRC<span class="comment">(4)</span> |</span><br></pre></td></tr></table></figure>
</li>
<li><p>ARP协议——0x0806<br>  ARP的请求或应答包在以太网帧中的类型字段以<code>0x0806</code>表示，但数据部分ARP包只有<strong>28</strong>字节，不满足以太网规定的最小<strong>46</strong>字节，所以ARP包的数据部分会有<strong>18</strong>字节的PAD填充字节</p>
  <figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| 目的地址<span class="comment">(6)</span> | 源地址<span class="comment">(6)</span> | <span class="number">0</span>x<span class="number">0806</span> | ARP请求/应答数据<span class="comment">(28)</span> + PAD填充字节<span class="comment">(18)</span> | CRC<span class="comment">(4)</span> |</span><br></pre></td></tr></table></figure>
</li>
<li><p>RARP协议——0x0835<br>  RARP和ARP差不多，数据部分也只有28字节，需要填充18字节</p>
</li>
</ul>
<h2 id="环回接口(loopback)"><strong>环回接口(loopback)</strong></h2><p>&emsp;通常我们会把<code>127.0.0.1</code>分配给环回接口并命名为<code>localhost</code>，<strong>传给环回接口的IP包不能出现在任何网络上</strong>。环回接口是个比较特殊的接口，此接口会有些有趣或特殊的应用，比如LVS的DR模式中会将VIP配置在RealServer的<em>lo:0</em>环回设备上。<br>&emsp;以下三种情况环回接口处理数据包时，数据包直接经过环回接口驱动程序传入上层，数据包并没有经过网卡输出到以太网后再返回。所以当我们ping 127.0.0.1或本机IP地址时，数据包是直接通过环回驱动程序再回到上层。</p>
<ul>
<li>目的IP为环回接口地址。IP输出函数——&gt;环回驱动程序——&gt;IP输入函数</li>
<li>目的IP为广播或多播地址。</li>
<li>目的IP为本机接口IP地址。</li>
</ul>
<p>除以上三种情况外的目的IP数据包会通过ARP协议找到目的IP的MAC地址后进行发送到以太网</p>
<h2 id="最大传输单元MTU、路径MTU"><strong>最大传输单元MTU、路径MTU</strong></h2><p>&emsp;数据帧中可容最大数据长度称为MTU，在不同帧结构中MTU是不同的，以太网的MTU是<code>1500字节</code>。我们可以通过<code>netstat -in</code>命令查看MTU信息<br>&emsp;当网络上两台主机通信时，会经过路由选路确定一条路径，在这条路径上可能会有不同的网络或设备的MTU。所谓的<strong>路径MTU</strong>则是在这条路径中<strong>最小</strong>的MTU。两台主机间的路径MTU并不一定是固定的，因为路径MTU取决于所选路径。<br>&emsp;由于链路层有MTU限制，所以当IP层要传的数据包大于MTU时，网络层则需要进行IP分片，而且由于路径上的MTU可能会不同，所以数据包可能会被进行多次分片。有关IP分片的详细内容会在网络层做详细介绍。<br>&emsp;大于MTU的包会有两种处理方式：</p>
<ul>
<li>直接丢弃。丢弃后会发送ICMP报文告诉源端包太大并通告自身的MTU</li>
<li>重新分块后再发送</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="链路层主要目的"><strong>链路层主要目的</strong></h2><p>&emsp;TCP/IP支持多种链路层协议，不同的网络硬件设备使用不同链路层协议，如：以太网协议、令牌环、FDDI和PPP等。链路层主要有三个目的：</p>
<ul>
<li>为IP]]>
    </summary>
    
      <category term="TCP/IP" scheme="http://yoursite.com/tags/TCP-IP/"/>
    
      <category term="TCP/IP" scheme="http://yoursite.com/categories/TCP-IP/"/>
    
  </entry>
  
</feed>